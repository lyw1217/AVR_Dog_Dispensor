
Dog_Dispenser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000806  00800100  000029f0  00002a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e3  00800906  00800906  0000328a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000328a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000032e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  00003328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000318e  00000000  00000000  00003680  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000159b  00000000  00000000  0000680e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021d7  00000000  00000000  00007da9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b38  00000000  00000000  00009f80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bcc  00000000  00000000  0000aab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027dd  00000000  00000000  0000b684  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  0000de61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
       2:	00 00       	nop
       4:	69 c0       	rjmp	.+210    	; 0xd8 <__bad_interrupt>
       6:	00 00       	nop
       8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
       a:	00 00       	nop
       c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
       e:	00 00       	nop
      10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
      12:	00 00       	nop
      14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
      16:	00 00       	nop
      18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
      22:	00 00       	nop
      24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>
      26:	00 00       	nop
      28:	57 c0       	rjmp	.+174    	; 0xd8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	55 c0       	rjmp	.+170    	; 0xd8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	53 c0       	rjmp	.+166    	; 0xd8 <__bad_interrupt>
      32:	00 00       	nop
      34:	51 c0       	rjmp	.+162    	; 0xd8 <__bad_interrupt>
      36:	00 00       	nop
      38:	4f c0       	rjmp	.+158    	; 0xd8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c4       	rjmp	.+2198   	; 0x8d4 <__vector_15>
      3e:	00 00       	nop
      40:	4b c0       	rjmp	.+150    	; 0xd8 <__bad_interrupt>
      42:	00 00       	nop
      44:	49 c0       	rjmp	.+146    	; 0xd8 <__bad_interrupt>
      46:	00 00       	nop
      48:	47 c0       	rjmp	.+142    	; 0xd8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	45 c0       	rjmp	.+138    	; 0xd8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	43 c0       	rjmp	.+134    	; 0xd8 <__bad_interrupt>
      52:	00 00       	nop
      54:	41 c0       	rjmp	.+130    	; 0xd8 <__bad_interrupt>
      56:	00 00       	nop
      58:	3f c0       	rjmp	.+126    	; 0xd8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3d c0       	rjmp	.+122    	; 0xd8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3b c0       	rjmp	.+118    	; 0xd8 <__bad_interrupt>
      62:	00 00       	nop
      64:	39 c0       	rjmp	.+114    	; 0xd8 <__bad_interrupt>
      66:	00 00       	nop
      68:	37 c0       	rjmp	.+110    	; 0xd8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	35 c0       	rjmp	.+106    	; 0xd8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	33 c0       	rjmp	.+102    	; 0xd8 <__bad_interrupt>
      72:	00 00       	nop
      74:	31 c0       	rjmp	.+98     	; 0xd8 <__bad_interrupt>
      76:	00 00       	nop
      78:	f8 c3       	rjmp	.+2032   	; 0x86a <__vector_30>
      7a:	00 00       	nop
      7c:	2d c0       	rjmp	.+90     	; 0xd8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2b c0       	rjmp	.+86     	; 0xd8 <__bad_interrupt>
      82:	00 00       	nop
      84:	29 c0       	rjmp	.+82     	; 0xd8 <__bad_interrupt>
      86:	00 00       	nop
      88:	27 c0       	rjmp	.+78     	; 0xd8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b 0e       	add	r2, r27
      8e:	2f 0e       	add	r2, r31
      90:	34 0e       	add	r3, r20
      92:	3b 0e       	add	r3, r27
      94:	4e 0e       	add	r4, r30
      96:	42 0e       	add	r4, r18
      98:	46 0e       	add	r4, r22

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e1       	ldi	r29, 0x10	; 16
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	19 e0       	ldi	r17, 0x09	; 9
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	e0 ef       	ldi	r30, 0xF0	; 240
      ae:	f9 e2       	ldi	r31, 0x29	; 41
      b0:	00 e0       	ldi	r16, 0x00	; 0
      b2:	0b bf       	out	0x3b, r16	; 59
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
      b6:	07 90       	elpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a6 30       	cpi	r26, 0x06	; 6
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
      c0:	29 e0       	ldi	r18, 0x09	; 9
      c2:	a6 e0       	ldi	r26, 0x06	; 6
      c4:	b9 e0       	ldi	r27, 0x09	; 9
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	a9 3e       	cpi	r26, 0xE9	; 233
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <main>
      d4:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <_exit>

000000d8 <__bad_interrupt>:
      d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <button_Init>:
 */ 

#include "button.h"

void button_Init(){
	DDR_BUTTON &= ~((1<<button_1));
      da:	e4 e6       	ldi	r30, 0x64	; 100
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	87 7f       	andi	r24, 0xF7	; 247
      e2:	80 83       	st	Z, r24
      e4:	08 95       	ret

000000e6 <button1_State>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      e6:	8f e3       	ldi	r24, 0x3F	; 63
      e8:	9c e9       	ldi	r25, 0x9C	; 156
      ea:	01 97       	sbiw	r24, 0x01	; 1
      ec:	f1 f7       	brne	.-4      	; 0xea <button1_State+0x4>
      ee:	00 c0       	rjmp	.+0      	; 0xf0 <button1_State+0xa>
      f0:	00 00       	nop
uint8_t button1_State(){
	static uint8_t prevState = 1; // static을 선언하면 전역변수처럼, 처음만 설정되고 다음부터는 기존 값을 그대로 사용한다.
	
	_delay_ms(10); // 채터링 예방
	
	if(((PIN_BUTTON & (0x01 << button_1)) == 0) && (prevState == 1)){ // 버튼 close 이면서 prevState == 1 --> 버튼이 처음 눌린 상태
      f2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
      f6:	89 2f       	mov	r24, r25
      f8:	88 70       	andi	r24, 0x08	; 8
      fa:	93 fd       	sbrc	r25, 3
      fc:	07 c0       	rjmp	.+14     	; 0x10c <button1_State+0x26>
      fe:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     102:	91 30       	cpi	r25, 0x01	; 1
     104:	19 f4       	brne	.+6      	; 0x10c <button1_State+0x26>
		prevState = 0;
     106:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		return 0;
     10a:	08 95       	ret
	}
	else if (((PIN_BUTTON & (0x01 << button_1)) == (0x01 << button_1)) && (prevState == 0)){ // 버튼이 open 이면서 prevState == 0 --> 버튼이 처음 눌렸다가 떼졌을 때
     10c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
     110:	89 2f       	mov	r24, r25
     112:	88 70       	andi	r24, 0x08	; 8
     114:	93 ff       	sbrs	r25, 3
     116:	09 c0       	rjmp	.+18     	; 0x12a <button1_State+0x44>
     118:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     11c:	81 11       	cpse	r24, r1
     11e:	04 c0       	rjmp	.+8      	; 0x128 <button1_State+0x42>
		prevState = 1;
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		return 1;
     126:	08 95       	ret
	}
	return 0;
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	08 95       	ret

0000012c <buzzer_Init>:
/ ex) 1kHz 출력 : setSound(1000);
*/

void setBuzzer(int note){
	int ocr_value = 1000000 / note; // == ( F_CPU / 2 / PRESCALER / note )
	OCR3A = ocr_value;
     12c:	13 9a       	sbi	0x02, 3	; 2
     12e:	ea e8       	ldi	r30, 0x8A	; 138
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	80 81       	ld	r24, Z
     134:	82 60       	ori	r24, 0x02	; 2
     136:	80 83       	st	Z, r24
     138:	80 81       	ld	r24, Z
     13a:	88 60       	ori	r24, 0x08	; 8
     13c:	80 83       	st	Z, r24
     13e:	80 81       	ld	r24, Z
     140:	80 83       	st	Z, r24
     142:	eb e8       	ldi	r30, 0x8B	; 139
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	80 81       	ld	r24, Z
     148:	80 64       	ori	r24, 0x40	; 64
     14a:	80 83       	st	Z, r24
     14c:	88 ee       	ldi	r24, 0xE8	; 232
     14e:	93 e0       	ldi	r25, 0x03	; 3
     150:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     154:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     158:	08 95       	ret

0000015a <stopBuzzer>:
}

void stopBuzzer(){
	TCCR3A &= ~((1<<COM3A1) | (1<<COM3A0));
     15a:	eb e8       	ldi	r30, 0x8B	; 139
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	8f 73       	andi	r24, 0x3F	; 63
     162:	80 83       	st	Z, r24
     164:	08 95       	ret

00000166 <playBuzzer>:
}

void playBuzzer(){
	TCCR3A |= (0<<COM3A1) | (1<<COM3A0);
     166:	eb e8       	ldi	r30, 0x8B	; 139
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	80 81       	ld	r24, Z
     16c:	80 64       	ori	r24, 0x40	; 64
     16e:	80 83       	st	Z, r24
     170:	08 95       	ret

00000172 <powerOnBuzzer>:
}

void powerOnBuzzer(){
	playBuzzer();
     172:	f9 df       	rcall	.-14     	; 0x166 <playBuzzer>
/ ex) 1kHz 출력 : setSound(1000);
*/

void setBuzzer(int note){
	int ocr_value = 1000000 / note; // == ( F_CPU / 2 / PRESCALER / note )
	OCR3A = ocr_value;
     174:	e6 e8       	ldi	r30, 0x86	; 134
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	88 ee       	ldi	r24, 0xE8	; 232
     17a:	9e e0       	ldi	r25, 0x0E	; 14
     17c:	91 83       	std	Z+1, r25	; 0x01
     17e:	80 83       	st	Z, r24
     180:	2f ef       	ldi	r18, 0xFF	; 255
     182:	85 ea       	ldi	r24, 0xA5	; 165
     184:	9e e0       	ldi	r25, 0x0E	; 14
     186:	21 50       	subi	r18, 0x01	; 1
     188:	80 40       	sbci	r24, 0x00	; 0
     18a:	90 40       	sbci	r25, 0x00	; 0
     18c:	e1 f7       	brne	.-8      	; 0x186 <powerOnBuzzer+0x14>
     18e:	00 c0       	rjmp	.+0      	; 0x190 <powerOnBuzzer+0x1e>
     190:	00 00       	nop
     192:	86 ed       	ldi	r24, 0xD6	; 214
     194:	9b e0       	ldi	r25, 0x0B	; 11
     196:	91 83       	std	Z+1, r25	; 0x01
     198:	80 83       	st	Z, r24
     19a:	2f ef       	ldi	r18, 0xFF	; 255
     19c:	85 ea       	ldi	r24, 0xA5	; 165
     19e:	9e e0       	ldi	r25, 0x0E	; 14
     1a0:	21 50       	subi	r18, 0x01	; 1
     1a2:	80 40       	sbci	r24, 0x00	; 0
     1a4:	90 40       	sbci	r25, 0x00	; 0
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <powerOnBuzzer+0x2e>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <powerOnBuzzer+0x38>
     1aa:	00 00       	nop
     1ac:	87 ef       	ldi	r24, 0xF7	; 247
     1ae:	99 e0       	ldi	r25, 0x09	; 9
     1b0:	91 83       	std	Z+1, r25	; 0x01
     1b2:	80 83       	st	Z, r24
     1b4:	2f ef       	ldi	r18, 0xFF	; 255
     1b6:	85 ea       	ldi	r24, 0xA5	; 165
     1b8:	9e e0       	ldi	r25, 0x0E	; 14
     1ba:	21 50       	subi	r18, 0x01	; 1
     1bc:	80 40       	sbci	r24, 0x00	; 0
     1be:	90 40       	sbci	r25, 0x00	; 0
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <powerOnBuzzer+0x48>
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <powerOnBuzzer+0x52>
	_delay_ms(300);
	setBuzzer(E4);
	_delay_ms(300);
	setBuzzer(G4);
	_delay_ms(300);
	stopBuzzer();
     1c4:	00 00       	nop
     1c6:	c9 cf       	rjmp	.-110    	; 0x15a <stopBuzzer>
     1c8:	08 95       	ret

000001ca <buttonBuzzer>:
}

void buttonBuzzer(){
	playBuzzer();
     1ca:	cd df       	rcall	.-102    	; 0x166 <playBuzzer>
/ ex) 1kHz 출력 : setSound(1000);
*/

void setBuzzer(int note){
	int ocr_value = 1000000 / note; // == ( F_CPU / 2 / PRESCALER / note )
	OCR3A = ocr_value;
     1cc:	e6 e8       	ldi	r30, 0x86	; 134
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	88 e7       	ldi	r24, 0x78	; 120
     1d2:	97 e0       	ldi	r25, 0x07	; 7
     1d4:	91 83       	std	Z+1, r25	; 0x01
     1d6:	80 83       	st	Z, r24
     1d8:	2f ef       	ldi	r18, 0xFF	; 255
     1da:	80 e7       	ldi	r24, 0x70	; 112
     1dc:	92 e0       	ldi	r25, 0x02	; 2
     1de:	21 50       	subi	r18, 0x01	; 1
     1e0:	80 40       	sbci	r24, 0x00	; 0
     1e2:	90 40       	sbci	r25, 0x00	; 0
     1e4:	e1 f7       	brne	.-8      	; 0x1de <buttonBuzzer+0x14>
     1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <buttonBuzzer+0x1e>
     1e8:	00 00       	nop
     1ea:	81 e3       	ldi	r24, 0x31	; 49
     1ec:	9b e0       	ldi	r25, 0x0B	; 11
     1ee:	91 83       	std	Z+1, r25	; 0x01
     1f0:	80 83       	st	Z, r24
     1f2:	2f ef       	ldi	r18, 0xFF	; 255
     1f4:	80 e7       	ldi	r24, 0x70	; 112
     1f6:	92 e0       	ldi	r25, 0x02	; 2
     1f8:	21 50       	subi	r18, 0x01	; 1
     1fa:	80 40       	sbci	r24, 0x00	; 0
     1fc:	90 40       	sbci	r25, 0x00	; 0
     1fe:	e1 f7       	brne	.-8      	; 0x1f8 <buttonBuzzer+0x2e>
     200:	00 c0       	rjmp	.+0      	; 0x202 <buttonBuzzer+0x38>
	playBuzzer();
	setBuzzer(C5);
	_delay_ms(50);
	setBuzzer(F4);
	_delay_ms(50);
	stopBuzzer();
     202:	00 00       	nop
     204:	aa cf       	rjmp	.-172    	; 0x15a <stopBuzzer>
     206:	08 95       	ret

00000208 <DHT_Setup>:

//Get sensor status. 
enum DHT_Status_t DHT_status(void)
{
	return (__DHT_STATUS);
}
     208:	2f ef       	ldi	r18, 0xFF	; 255
     20a:	87 ea       	ldi	r24, 0xA7	; 167
     20c:	91 e6       	ldi	r25, 0x61	; 97
     20e:	21 50       	subi	r18, 0x01	; 1
     210:	80 40       	sbci	r24, 0x00	; 0
     212:	90 40       	sbci	r25, 0x00	; 0
     214:	e1 f7       	brne	.-8      	; 0x20e <DHT_Setup+0x6>
     216:	00 c0       	rjmp	.+0      	; 0x218 <DHT_Setup+0x10>
     218:	00 00       	nop
     21a:	10 92 6c 09 	sts	0x096C, r1	; 0x80096c <__DHT_STATUS>
     21e:	08 95       	ret

00000220 <DHT_ReadRaw>:

//Read raw buffer from sensor. 
void DHT_ReadRaw(uint8_t Data[4])
{
     220:	cf 92       	push	r12
     222:	df 92       	push	r13
     224:	ef 92       	push	r14
     226:	ff 92       	push	r15
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	00 d0       	rcall	.+0      	; 0x22e <DHT_ReadRaw+0xe>
     22e:	00 d0       	rcall	.+0      	; 0x230 <DHT_ReadRaw+0x10>
     230:	1f 92       	push	r1
     232:	cd b7       	in	r28, 0x3d	; 61
     234:	de b7       	in	r29, 0x3e	; 62
     236:	68 2f       	mov	r22, r24
     238:	79 2f       	mov	r23, r25
	uint8_t buffer[5] = {0, 0, 0, 0, 0};
     23a:	fe 01       	movw	r30, r28
     23c:	31 96       	adiw	r30, 0x01	; 1
     23e:	85 e0       	ldi	r24, 0x05	; 5
     240:	df 01       	movw	r26, r30
     242:	1d 92       	st	X+, r1
     244:	8a 95       	dec	r24
     246:	e9 f7       	brne	.-6      	; 0x242 <DHT_ReadRaw+0x22>
	uint8_t retries, i;
	int8_t j;
	__DHT_STATUS = DHT_Ok;
     248:	10 92 6c 09 	sts	0x096C, r1	; 0x80096c <__DHT_STATUS>

	//----- Step 1 - Start communication -----
	if (__DHT_STATUS == DHT_Ok)
	{
		//Request data
		DigitalWrite(DHT_Pin, Low);			//DHT_PIN = 0
     24c:	c0 98       	cbi	0x18, 0	; 24
		PinMode(DHT_Pin, Output);			//DHT_PIN = Output
     24e:	b8 9a       	sbi	0x17, 0	; 23
     250:	bf ef       	ldi	r27, 0xFF	; 255
     252:	29 ef       	ldi	r18, 0xF9	; 249
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	b1 50       	subi	r27, 0x01	; 1
     258:	20 40       	sbci	r18, 0x00	; 0
     25a:	80 40       	sbci	r24, 0x00	; 0
     25c:	e1 f7       	brne	.-8      	; 0x256 <DHT_ReadRaw+0x36>
     25e:	00 c0       	rjmp	.+0      	; 0x260 <DHT_ReadRaw+0x40>
     260:	00 00       	nop
		_delay_ms(__DHT_Delay_Read);
		
		//Setup DHT_PIN as input with pull-up resistor so as to read data
		DigitalWrite(DHT_Pin, High);		//DHT_PIN = 1 (Pull-up resistor)
     262:	c0 9a       	sbi	0x18, 0	; 24
		PinMode(DHT_Pin, Input);			//DHT_PIN = Input
     264:	b8 98       	cbi	0x17, 0	; 23

		//Wait for response for 20-40us
		retries = 0;
		while (DigitalRead(DHT_Pin))
     266:	2f e1       	ldi	r18, 0x1F	; 31
     268:	0a c0       	rjmp	.+20     	; 0x27e <DHT_ReadRaw+0x5e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     26a:	9a e0       	ldi	r25, 0x0A	; 10
     26c:	9a 95       	dec	r25
     26e:	f1 f7       	brne	.-4      	; 0x26c <DHT_ReadRaw+0x4c>
     270:	00 c0       	rjmp	.+0      	; 0x272 <DHT_ReadRaw+0x52>
     272:	21 50       	subi	r18, 0x01	; 1
		{
			_delay_us(2);
			retries += 2;
			if (retries > 60)
     274:	21 f4       	brne	.+8      	; 0x27e <DHT_ReadRaw+0x5e>
			{
				__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
     276:	84 e0       	ldi	r24, 0x04	; 4
     278:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <__DHT_STATUS>
     27c:	8f c0       	rjmp	.+286    	; 0x39c <DHT_ReadRaw+0x17c>
		DigitalWrite(DHT_Pin, High);		//DHT_PIN = 1 (Pull-up resistor)
		PinMode(DHT_Pin, Input);			//DHT_PIN = Input

		//Wait for response for 20-40us
		retries = 0;
		while (DigitalRead(DHT_Pin))
     27e:	b0 99       	sbic	0x16, 0	; 22
     280:	f4 cf       	rjmp	.-24     	; 0x26a <DHT_ReadRaw+0x4a>
		}
	}
	//----------------------------------------

	//----- Step 2 - Wait for response -----	
	if (__DHT_STATUS == DHT_Ok)
     282:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <__DHT_STATUS>
     286:	88 23       	and	r24, r24
     288:	59 f0       	breq	.+22     	; 0x2a0 <DHT_ReadRaw+0x80>
     28a:	88 c0       	rjmp	.+272    	; 0x39c <DHT_ReadRaw+0x17c>
     28c:	aa e0       	ldi	r26, 0x0A	; 10
     28e:	aa 95       	dec	r26
     290:	f1 f7       	brne	.-4      	; 0x28e <DHT_ReadRaw+0x6e>
     292:	00 c0       	rjmp	.+0      	; 0x294 <DHT_ReadRaw+0x74>
     294:	21 50       	subi	r18, 0x01	; 1
		retries = 0;
		while (!DigitalRead(DHT_Pin))
		{
			_delay_us(2);
			retries += 2;
			if (retries > 100)
     296:	29 f4       	brne	.+10     	; 0x2a2 <DHT_ReadRaw+0x82>
			{
				__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
     298:	84 e0       	ldi	r24, 0x04	; 4
     29a:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <__DHT_STATUS>
				break;
     29e:	0e c0       	rjmp	.+28     	; 0x2bc <DHT_ReadRaw+0x9c>
     2a0:	23 e3       	ldi	r18, 0x33	; 51
	if (__DHT_STATUS == DHT_Ok)
	{
		//Response sequence began
		//Wait for the first response to finish (low for ~80us)
		retries = 0;
		while (!DigitalRead(DHT_Pin))
     2a2:	b0 9b       	sbis	0x16, 0	; 22
     2a4:	f3 cf       	rjmp	.-26     	; 0x28c <DHT_ReadRaw+0x6c>
     2a6:	0a c0       	rjmp	.+20     	; 0x2bc <DHT_ReadRaw+0x9c>
     2a8:	ba e0       	ldi	r27, 0x0A	; 10
     2aa:	ba 95       	dec	r27
     2ac:	f1 f7       	brne	.-4      	; 0x2aa <DHT_ReadRaw+0x8a>
     2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <DHT_ReadRaw+0x90>
     2b0:	21 50       	subi	r18, 0x01	; 1
		retries = 0;
		while(DigitalRead(DHT_Pin))
		{
			_delay_us(2);
			retries += 2;
			if (retries > 100)
     2b2:	29 f4       	brne	.+10     	; 0x2be <DHT_ReadRaw+0x9e>
			{
				__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
     2b4:	84 e0       	ldi	r24, 0x04	; 4
     2b6:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <__DHT_STATUS>
				break;
     2ba:	70 c0       	rjmp	.+224    	; 0x39c <DHT_ReadRaw+0x17c>
     2bc:	23 e3       	ldi	r18, 0x33	; 51
				break;
			}
		}
		//Wait for the last response to finish (high for ~80us)
		retries = 0;
		while(DigitalRead(DHT_Pin))
     2be:	b0 99       	sbic	0x16, 0	; 22
     2c0:	f3 cf       	rjmp	.-26     	; 0x2a8 <DHT_ReadRaw+0x88>
		}
	}
	//--------------------------------------

	//----- Step 3 - Data transmission -----
	if (__DHT_STATUS == DHT_Ok)
     2c2:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <__DHT_STATUS>
     2c6:	88 23       	and	r24, r24
     2c8:	09 f4       	brne	.+2      	; 0x2cc <DHT_ReadRaw+0xac>
     2ca:	43 c0       	rjmp	.+134    	; 0x352 <DHT_ReadRaw+0x132>
     2cc:	67 c0       	rjmp	.+206    	; 0x39c <DHT_ReadRaw+0x17c>
     2ce:	8a e0       	ldi	r24, 0x0A	; 10
     2d0:	8a 95       	dec	r24
     2d2:	f1 f7       	brne	.-4      	; 0x2d0 <DHT_ReadRaw+0xb0>
     2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <DHT_ReadRaw+0xb6>
     2d6:	21 50       	subi	r18, 0x01	; 1
				retries = 0;
				while(!DigitalRead(DHT_Pin))
				{
					_delay_us(2);
					retries += 2;
					if (retries > 70)
     2d8:	31 f4       	brne	.+12     	; 0x2e6 <DHT_ReadRaw+0xc6>
					{
						__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
     2da:	50 93 6c 09 	sts	0x096C, r21	; 0x80096c <__DHT_STATUS>
						j = -1;								//Break inner for-loop
						i = 5;								//Break outer for-loop
     2de:	45 e0       	ldi	r20, 0x05	; 5
     2e0:	34 c0       	rjmp	.+104    	; 0x34a <DHT_ReadRaw+0x12a>
     2e2:	42 2f       	mov	r20, r18
     2e4:	24 e2       	ldi	r18, 0x24	; 36
		for (i = 0 ; i < 5 ; i++)
			for (j = 7 ; j >= 0 ; j--)
			{
				//There is always a leading low level of 50 us
				retries = 0;
				while(!DigitalRead(DHT_Pin))
     2e6:	b0 9b       	sbis	0x16, 0	; 22
     2e8:	f2 cf       	rjmp	.-28     	; 0x2ce <DHT_ReadRaw+0xae>
						i = 5;								//Break outer for-loop
						break;								//Break while loop
					}
				}

				if (__DHT_STATUS == DHT_Ok)
     2ea:	20 91 6c 09 	lds	r18, 0x096C	; 0x80096c <__DHT_STATUS>
     2ee:	21 11       	cpse	r18, r1
     2f0:	29 c0       	rjmp	.+82     	; 0x344 <DHT_ReadRaw+0x124>
     2f2:	9a eb       	ldi	r25, 0xBA	; 186
     2f4:	9a 95       	dec	r25
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <DHT_ReadRaw+0xd4>
     2f8:	00 c0       	rjmp	.+0      	; 0x2fa <DHT_ReadRaw+0xda>
				{
					//We read data bit || 26-28us means '0' || 70us means '1'
					_delay_us(35);							//Wait for more than 28us
					if (DigitalRead(DHT_Pin))				//If HIGH
     2fa:	b0 9b       	sbis	0x16, 0	; 22
     2fc:	1e c0       	rjmp	.+60     	; 0x33a <DHT_ReadRaw+0x11a>
						BitSet(buffer[i], j);				//bit = '1'
     2fe:	e1 e0       	ldi	r30, 0x01	; 1
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	ec 0f       	add	r30, r28
     304:	fd 1f       	adc	r31, r29
     306:	e4 0f       	add	r30, r20
     308:	f1 1d       	adc	r31, r1
     30a:	20 81       	ld	r18, Z
     30c:	d7 01       	movw	r26, r14
     30e:	c6 01       	movw	r24, r12
     310:	03 2e       	mov	r0, r19
     312:	04 c0       	rjmp	.+8      	; 0x31c <DHT_ReadRaw+0xfc>
     314:	88 0f       	add	r24, r24
     316:	99 1f       	adc	r25, r25
     318:	aa 1f       	adc	r26, r26
     31a:	bb 1f       	adc	r27, r27
     31c:	0a 94       	dec	r0
     31e:	d2 f7       	brpl	.-12     	; 0x314 <DHT_ReadRaw+0xf4>
     320:	82 2b       	or	r24, r18
     322:	80 83       	st	Z, r24
     324:	0a c0       	rjmp	.+20     	; 0x33a <DHT_ReadRaw+0x11a>
     326:	aa e0       	ldi	r26, 0x0A	; 10
     328:	aa 95       	dec	r26
     32a:	f1 f7       	brne	.-4      	; 0x328 <DHT_ReadRaw+0x108>
     32c:	00 c0       	rjmp	.+0      	; 0x32e <DHT_ReadRaw+0x10e>
     32e:	21 50       	subi	r18, 0x01	; 1
					retries = 0;
					while(DigitalRead(DHT_Pin))
					{
						_delay_us(2);
						retries += 2;
						if (retries > 100)
     330:	29 f4       	brne	.+10     	; 0x33c <DHT_ReadRaw+0x11c>
						{
							__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
     332:	50 93 6c 09 	sts	0x096C, r21	; 0x80096c <__DHT_STATUS>
							break;
     336:	24 2f       	mov	r18, r20
     338:	06 c0       	rjmp	.+12     	; 0x346 <DHT_ReadRaw+0x126>
     33a:	23 e3       	ldi	r18, 0x33	; 51
					_delay_us(35);							//Wait for more than 28us
					if (DigitalRead(DHT_Pin))				//If HIGH
						BitSet(buffer[i], j);				//bit = '1'

					retries = 0;
					while(DigitalRead(DHT_Pin))
     33c:	b0 99       	sbic	0x16, 0	; 22
     33e:	f3 cf       	rjmp	.-26     	; 0x326 <DHT_ReadRaw+0x106>
     340:	24 2f       	mov	r18, r20
     342:	01 c0       	rjmp	.+2      	; 0x346 <DHT_ReadRaw+0x126>
     344:	24 2f       	mov	r18, r20
	//----- Step 3 - Data transmission -----
	if (__DHT_STATUS == DHT_Ok)
	{
		//Reading 5 bytes, bit by bit
		for (i = 0 ; i < 5 ; i++)
			for (j = 7 ; j >= 0 ; j--)
     346:	31 50       	subi	r19, 0x01	; 1
     348:	62 f6       	brpl	.-104    	; 0x2e2 <DHT_ReadRaw+0xc2>

	//----- Step 3 - Data transmission -----
	if (__DHT_STATUS == DHT_Ok)
	{
		//Reading 5 bytes, bit by bit
		for (i = 0 ; i < 5 ; i++)
     34a:	4f 5f       	subi	r20, 0xFF	; 255
     34c:	45 30       	cpi	r20, 0x05	; 5
     34e:	38 f0       	brcs	.+14     	; 0x35e <DHT_ReadRaw+0x13e>
     350:	08 c0       	rjmp	.+16     	; 0x362 <DHT_ReadRaw+0x142>
     352:	40 e0       	ldi	r20, 0x00	; 0
				if (__DHT_STATUS == DHT_Ok)
				{
					//We read data bit || 26-28us means '0' || 70us means '1'
					_delay_us(35);							//Wait for more than 28us
					if (DigitalRead(DHT_Pin))				//If HIGH
						BitSet(buffer[i], j);				//bit = '1'
     354:	c1 2c       	mov	r12, r1
     356:	d1 2c       	mov	r13, r1
     358:	76 01       	movw	r14, r12
     35a:	c3 94       	inc	r12
					{
						_delay_us(2);
						retries += 2;
						if (retries > 100)
						{
							__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
     35c:	54 e0       	ldi	r21, 0x04	; 4
     35e:	37 e0       	ldi	r19, 0x07	; 7
     360:	c1 cf       	rjmp	.-126    	; 0x2e4 <DHT_ReadRaw+0xc4>
	}
	//--------------------------------------


	//----- Step 4 - Check checksum and return data -----
	if (__DHT_STATUS == DHT_Ok)
     362:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <__DHT_STATUS>
     366:	81 11       	cpse	r24, r1
     368:	19 c0       	rjmp	.+50     	; 0x39c <DHT_ReadRaw+0x17c>
	{	
		if (((uint8_t)(buffer[0] + buffer[1] + buffer[2] + buffer[3])) != buffer[4])
     36a:	99 81       	ldd	r25, Y+1	; 0x01
     36c:	8a 81       	ldd	r24, Y+2	; 0x02
     36e:	98 0f       	add	r25, r24
     370:	8b 81       	ldd	r24, Y+3	; 0x03
     372:	98 0f       	add	r25, r24
     374:	8c 81       	ldd	r24, Y+4	; 0x04
     376:	89 0f       	add	r24, r25
     378:	9d 81       	ldd	r25, Y+5	; 0x05
     37a:	89 17       	cp	r24, r25
     37c:	21 f0       	breq	.+8      	; 0x386 <DHT_ReadRaw+0x166>
		{
			__DHT_STATUS = DHT_Error_Checksum;	//Checksum error
     37e:	83 e0       	ldi	r24, 0x03	; 3
     380:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <__DHT_STATUS>
     384:	0b c0       	rjmp	.+22     	; 0x39c <DHT_ReadRaw+0x17c>
     386:	de 01       	movw	r26, r28
     388:	11 96       	adiw	r26, 0x01	; 1
     38a:	e6 2f       	mov	r30, r22
     38c:	f7 2f       	mov	r31, r23
     38e:	ce 01       	movw	r24, r28
     390:	05 96       	adiw	r24, 0x05	; 5
			//data[1] = Humidity		(dec)
			//data[2] = Temperature		(int)
			//data[3] = Temperature		(dec)
			//data[4] = Checksum
			for (i = 0 ; i < 4 ; i++)
				Data[i] = buffer[i];
     392:	2d 91       	ld	r18, X+
     394:	21 93       	st	Z+, r18
			//data[0] = Humidity		(int)
			//data[1] = Humidity		(dec)
			//data[2] = Temperature		(int)
			//data[3] = Temperature		(dec)
			//data[4] = Checksum
			for (i = 0 ; i < 4 ; i++)
     396:	a8 17       	cp	r26, r24
     398:	b9 07       	cpc	r27, r25
     39a:	d9 f7       	brne	.-10     	; 0x392 <DHT_ReadRaw+0x172>
				Data[i] = buffer[i];
		}
	}
	//---------------------------------------------------
}
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	ff 90       	pop	r15
     3ac:	ef 90       	pop	r14
     3ae:	df 90       	pop	r13
     3b0:	cf 90       	pop	r12
     3b2:	08 95       	ret

000003b4 <DHT_Read>:
	DHT_Read(waste, Humidity);
}

//Read temperature and humidity. 
void DHT_Read(uint8_t *Temperature, uint8_t *Humidity)
{
     3b4:	ef 92       	push	r14
     3b6:	ff 92       	push	r15
     3b8:	0f 93       	push	r16
     3ba:	1f 93       	push	r17
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	00 d0       	rcall	.+0      	; 0x3c2 <DHT_Read+0xe>
     3c2:	00 d0       	rcall	.+0      	; 0x3c4 <DHT_Read+0x10>
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
     3c8:	8c 01       	movw	r16, r24
     3ca:	7b 01       	movw	r14, r22
	uint8_t data[4] = {0, 0, 0, 0};
     3cc:	19 82       	std	Y+1, r1	; 0x01
     3ce:	1a 82       	std	Y+2, r1	; 0x02
     3d0:	1b 82       	std	Y+3, r1	; 0x03
     3d2:	1c 82       	std	Y+4, r1	; 0x04

	//Read data
	DHT_ReadRaw(data);
     3d4:	ce 01       	movw	r24, r28
     3d6:	01 96       	adiw	r24, 0x01	; 1
     3d8:	23 df       	rcall	.-442    	; 0x220 <DHT_ReadRaw>
	
	//If read successfully
	if (__DHT_STATUS == DHT_Ok)
     3da:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <__DHT_STATUS>
     3de:	81 11       	cpse	r24, r1
     3e0:	18 c0       	rjmp	.+48     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	{	
		//Calculate values
		Temperature[0] = data[2];
     3e2:	8b 81       	ldd	r24, Y+3	; 0x03
     3e4:	f8 01       	movw	r30, r16
     3e6:	80 83       	st	Z, r24
		Temperature[1] = data[3];
     3e8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ea:	81 83       	std	Z+1, r24	; 0x01
		Humidity[0] = data[0];
     3ec:	89 81       	ldd	r24, Y+1	; 0x01
     3ee:	f7 01       	movw	r30, r14
     3f0:	80 83       	st	Z, r24
		Humidity[1] = data[1];
     3f2:	9a 81       	ldd	r25, Y+2	; 0x02
     3f4:	91 83       	std	Z+1, r25	; 0x01
		
		//Check values
		if ((*Temperature < __DHT_Temperature_Min) || (*Temperature > __DHT_Temperature_Max))
     3f6:	f8 01       	movw	r30, r16
     3f8:	90 81       	ld	r25, Z
     3fa:	93 33       	cpi	r25, 0x33	; 51
     3fc:	20 f0       	brcs	.+8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
			__DHT_STATUS = DHT_Error_Temperature;
     3fe:	82 e0       	ldi	r24, 0x02	; 2
     400:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <__DHT_STATUS>
     404:	06 c0       	rjmp	.+12     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		else if ((*Humidity < __DHT_Humidity_Min) || (*Humidity > __DHT_Humidity_Max))
     406:	85 50       	subi	r24, 0x05	; 5
     408:	8b 35       	cpi	r24, 0x5B	; 91
     40a:	18 f0       	brcs	.+6      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
			__DHT_STATUS = DHT_Error_Humidity;
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <__DHT_STATUS>
	}
}
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	ff 90       	pop	r15
     424:	ef 90       	pop	r14
     426:	08 95       	ret

00000428 <DS1302_Init>:
	DS1302_DAT_PORT &= ~(1<<DS1302_DAT);	// data low로 설정
}

uint8_t DS1302_Read_DataPin(){
	return (DS1302_DAT_PIN & (1 << DS1302_DAT));
}
     428:	d0 9a       	sbi	0x1a, 0	; 26
     42a:	d1 9a       	sbi	0x1a, 1	; 26
     42c:	d2 9a       	sbi	0x1a, 2	; 26
     42e:	08 95       	ret

00000430 <DS1302_Selected>:
     430:	da 9a       	sbi	0x1b, 2	; 27
     432:	08 95       	ret

00000434 <DS1302_Deselected>:
     434:	da 98       	cbi	0x1b, 2	; 27
     436:	08 95       	ret

00000438 <DS1302_Clock>:
     438:	d8 98       	cbi	0x1b, 0	; 27
     43a:	d8 9a       	sbi	0x1b, 0	; 27
     43c:	d8 98       	cbi	0x1b, 0	; 27
     43e:	08 95       	ret

00000440 <DS1302_DataBitSet>:
     440:	d9 9a       	sbi	0x1b, 1	; 27
     442:	08 95       	ret

00000444 <DS1302_DataBitReset>:
     444:	d9 98       	cbi	0x1b, 1	; 27
     446:	08 95       	ret

00000448 <DS1302_Change_ReadMode>:

void DS1302_Change_ReadMode(){
	DS1302_DAT_DDR &= ~(1<<DS1302_DAT);	// read mode
     448:	d1 98       	cbi	0x1a, 1	; 26
     44a:	08 95       	ret

0000044c <DS1302_Change_WriteMode>:
}

void DS1302_Change_WriteMode(){
	DS1302_DAT_DDR |= (1<<DS1302_DAT);	// write mode
     44c:	d1 9a       	sbi	0x1a, 1	; 26
     44e:	08 95       	ret

00000450 <decimal_to_bcd>:
}

uint8_t decimal_to_bcd(uint8_t decimal){
	return ( ((decimal/10) << 4) | (decimal % 10) );
     450:	9d ec       	ldi	r25, 0xCD	; 205
     452:	89 9f       	mul	r24, r25
     454:	91 2d       	mov	r25, r1
     456:	11 24       	eor	r1, r1
     458:	96 95       	lsr	r25
     45a:	96 95       	lsr	r25
     45c:	96 95       	lsr	r25
     45e:	20 e1       	ldi	r18, 0x10	; 16
     460:	92 9f       	mul	r25, r18
     462:	a0 01       	movw	r20, r0
     464:	11 24       	eor	r1, r1
     466:	99 0f       	add	r25, r25
     468:	29 2f       	mov	r18, r25
     46a:	22 0f       	add	r18, r18
     46c:	22 0f       	add	r18, r18
     46e:	92 0f       	add	r25, r18
     470:	89 1b       	sub	r24, r25
}
     472:	84 2b       	or	r24, r20
     474:	08 95       	ret

00000476 <bcd_to_decimal>:

uint8_t bcd_to_decimal(uint8_t bcd){
	return ( ((bcd >> 4) * 10) + (bcd & 0x0f) );
     476:	98 2f       	mov	r25, r24
     478:	92 95       	swap	r25
     47a:	9f 70       	andi	r25, 0x0F	; 15
     47c:	99 0f       	add	r25, r25
     47e:	29 2f       	mov	r18, r25
     480:	22 0f       	add	r18, r18
     482:	22 0f       	add	r18, r18
     484:	92 0f       	add	r25, r18
     486:	8f 70       	andi	r24, 0x0F	; 15
}
     488:	89 0f       	add	r24, r25
     48a:	08 95       	ret

0000048c <DS1302_TxData>:

void DS1302_TxData(uint8_t _txData){
     48c:	0f 93       	push	r16
     48e:	1f 93       	push	r17
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	08 2f       	mov	r16, r24
	DS1302_Change_WriteMode();
     496:	da df       	rcall	.-76     	; 0x44c <DS1302_Change_WriteMode>
	
	for(int i = 0; i < 8; i++){
     498:	c0 e0       	ldi	r28, 0x00	; 0
     49a:	d0 e0       	ldi	r29, 0x00	; 0
		if (_txData & (1<<i))
     49c:	10 e0       	ldi	r17, 0x00	; 0
     49e:	98 01       	movw	r18, r16
     4a0:	0c 2e       	mov	r0, r28
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <DS1302_TxData+0x1c>
     4a4:	35 95       	asr	r19
     4a6:	27 95       	ror	r18
     4a8:	0a 94       	dec	r0
     4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <DS1302_TxData+0x18>
     4ac:	20 ff       	sbrs	r18, 0
		DS1302_DataBitSet();
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DS1302_TxData+0x28>
     4b0:	c7 df       	rcall	.-114    	; 0x440 <DS1302_DataBitSet>
		else
		DS1302_DataBitReset();
     4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <DS1302_TxData+0x2a>
     4b4:	c7 df       	rcall	.-114    	; 0x444 <DS1302_DataBitReset>
		
		// 클럭을 올려줬다가 내려준다 이것을 8번 반복
		DS1302_Clock();
     4b6:	c0 df       	rcall	.-128    	; 0x438 <DS1302_Clock>
     4b8:	21 96       	adiw	r28, 0x01	; 1
}

void DS1302_TxData(uint8_t _txData){
	DS1302_Change_WriteMode();
	
	for(int i = 0; i < 8; i++){
     4ba:	c8 30       	cpi	r28, 0x08	; 8
     4bc:	d1 05       	cpc	r29, r1
     4be:	79 f7       	brne	.-34     	; 0x49e <DS1302_TxData+0x12>
     4c0:	df 91       	pop	r29
		DS1302_DataBitReset();
		
		// 클럭을 올려줬다가 내려준다 이것을 8번 반복
		DS1302_Clock();
	}
}
     4c2:	cf 91       	pop	r28
     4c4:	1f 91       	pop	r17
     4c6:	0f 91       	pop	r16
     4c8:	08 95       	ret

000004ca <DS1302_RxData>:
     4ca:	df 92       	push	r13

uint8_t DS1302_RxData(){
     4cc:	ef 92       	push	r14
     4ce:	ff 92       	push	r15
     4d0:	0f 93       	push	r16
     4d2:	1f 93       	push	r17
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
	uint8_t rxData = 0;
	DS1302_Change_ReadMode();
     4d8:	b7 df       	rcall	.-146    	; 0x448 <DS1302_Change_ReadMode>
	
	for(int i = 0; i < 8; i++){
     4da:	c0 e0       	ldi	r28, 0x00	; 0
     4dc:	d0 e0       	ldi	r29, 0x00	; 0
		DS1302_Clock();
	}
}

uint8_t DS1302_RxData(){
	uint8_t rxData = 0;
     4de:	10 e0       	ldi	r17, 0x00	; 0
	DS1302_Change_ReadMode();
	
	for(int i = 0; i < 8; i++){
		// data = A ? b : c; A가 참이면 b 반환, A가 거짓(0이 아니면)이면 c 반환
		rxData |= DS1302_Read_DataPin() ? (1<<i) : 0;
     4e0:	d1 2c       	mov	r13, r1
     4e2:	00 e0       	ldi	r16, 0x00	; 0
     4e4:	ee 24       	eor	r14, r14
     4e6:	e3 94       	inc	r14
     4e8:	f1 2c       	mov	r15, r1
     4ea:	c9 9b       	sbis	0x19, 1	; 25
     4ec:	08 c0       	rjmp	.+16     	; 0x4fe <DS1302_RxData+0x34>
     4ee:	c7 01       	movw	r24, r14
     4f0:	0c 2e       	mov	r0, r28
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <DS1302_RxData+0x2e>
     4f4:	88 0f       	add	r24, r24
     4f6:	99 1f       	adc	r25, r25
     4f8:	0a 94       	dec	r0
     4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <DS1302_RxData+0x2a>
     4fc:	01 c0       	rjmp	.+2      	; 0x500 <DS1302_RxData+0x36>
     4fe:	8d 2d       	mov	r24, r13
		
		// 클럭을 올려줬다가 내려준다 이것을 8번 반복
		DS1302_Clock();
     500:	18 2b       	or	r17, r24
     502:	9a df       	rcall	.-204    	; 0x438 <DS1302_Clock>

uint8_t DS1302_RxData(){
	uint8_t rxData = 0;
	DS1302_Change_ReadMode();
	
	for(int i = 0; i < 8; i++){
     504:	21 96       	adiw	r28, 0x01	; 1
     506:	c8 30       	cpi	r28, 0x08	; 8
     508:	d1 05       	cpc	r29, r1
     50a:	79 f7       	brne	.-34     	; 0x4ea <DS1302_RxData+0x20>
		
		// 클럭을 올려줬다가 내려준다 이것을 8번 반복
		DS1302_Clock();
	}
	return rxData;
}
     50c:	81 2f       	mov	r24, r17
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	1f 91       	pop	r17
     514:	0f 91       	pop	r16
     516:	ff 90       	pop	r15
     518:	ef 90       	pop	r14
     51a:	df 90       	pop	r13
     51c:	08 95       	ret

0000051e <DS1302_WriteData>:

void DS1302_WriteData(uint8_t address, uint8_t data){
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
     522:	d8 2f       	mov	r29, r24
     524:	c6 2f       	mov	r28, r22
	DS1302_Selected();	// CE 활성화
     526:	84 df       	rcall	.-248    	; 0x430 <DS1302_Selected>
	DS1302_TxData(address);	// 주소를 보내고
     528:	8d 2f       	mov	r24, r29
     52a:	b0 df       	rcall	.-160    	; 0x48c <DS1302_TxData>
	DS1302_TxData(decimal_to_bcd(data));	// 보내는 포멧이 bcd 이기 때문
     52c:	8c 2f       	mov	r24, r28
     52e:	90 df       	rcall	.-224    	; 0x450 <decimal_to_bcd>
     530:	ad df       	rcall	.-166    	; 0x48c <DS1302_TxData>
	DS1302_Deselected();	// CE 비활성화
     532:	80 df       	rcall	.-256    	; 0x434 <DS1302_Deselected>
     534:	df 91       	pop	r29
}
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <DS1302_ReadData>:
     53a:	cf 93       	push	r28

uint8_t DS1302_ReadData(uint8_t address){
     53c:	c8 2f       	mov	r28, r24
	uint8_t rxData = 0;
	DS1302_Selected();
     53e:	78 df       	rcall	.-272    	; 0x430 <DS1302_Selected>
	DS1302_TxData(address+1);	// 주소를 읽어오고 // read 주소가 write 주소보다 1 더 많기 때문에 +1
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	8c 0f       	add	r24, r28
	rxData = DS1302_RxData();
     544:	a3 df       	rcall	.-186    	; 0x48c <DS1302_TxData>
     546:	c1 df       	rcall	.-126    	; 0x4ca <DS1302_RxData>
	DS1302_Deselected();
     548:	c8 2f       	mov	r28, r24
     54a:	74 df       	rcall	.-280    	; 0x434 <DS1302_Deselected>
	
	return bcd_to_decimal(rxData);	
     54c:	8c 2f       	mov	r24, r28
     54e:	93 df       	rcall	.-218    	; 0x476 <bcd_to_decimal>
     550:	cf 91       	pop	r28
}
     552:	08 95       	ret

00000554 <DS1302_GetTime>:
     554:	cf 93       	push	r28
	
void DS1302_GetTime(DS1302 *timeData){
     556:	df 93       	push	r29
     558:	ec 01       	movw	r28, r24
	timeData->seconds = DS1302_ReadData(ADDRESS_SECONDS); // datasheet 참고
     55a:	80 e8       	ldi	r24, 0x80	; 128
     55c:	ee df       	rcall	.-36     	; 0x53a <DS1302_ReadData>
     55e:	88 83       	st	Y, r24
	timeData->minutes = DS1302_ReadData(ADDRESS_MINUTES);
     560:	82 e8       	ldi	r24, 0x82	; 130
     562:	eb df       	rcall	.-42     	; 0x53a <DS1302_ReadData>
     564:	89 83       	std	Y+1, r24	; 0x01
	timeData->hour = DS1302_ReadData(ADDRESS_HOUR);
     566:	84 e8       	ldi	r24, 0x84	; 132
     568:	e8 df       	rcall	.-48     	; 0x53a <DS1302_ReadData>
     56a:	8a 83       	std	Y+2, r24	; 0x02
     56c:	df 91       	pop	r29
}
     56e:	cf 91       	pop	r28
     570:	08 95       	ret

00000572 <DS1302_GetDate>:
     572:	cf 93       	push	r28

void DS1302_GetDate(DS1302 *dateData){
     574:	df 93       	push	r29
     576:	ec 01       	movw	r28, r24
	dateData->date = DS1302_ReadData(ADDRESS_DATE); // datasheet 참고
     578:	86 e8       	ldi	r24, 0x86	; 134
     57a:	df df       	rcall	.-66     	; 0x53a <DS1302_ReadData>
     57c:	8b 83       	std	Y+3, r24	; 0x03
	dateData->month = DS1302_ReadData(ADDRESS_MONTH);
     57e:	88 e8       	ldi	r24, 0x88	; 136
     580:	dc df       	rcall	.-72     	; 0x53a <DS1302_ReadData>
     582:	8c 83       	std	Y+4, r24	; 0x04
	dateData->dayofweek = DS1302_ReadData(ADDRESS_DAYOFWEEK);
     584:	8a e8       	ldi	r24, 0x8A	; 138
     586:	d9 df       	rcall	.-78     	; 0x53a <DS1302_ReadData>
     588:	8d 83       	std	Y+5, r24	; 0x05
	dateData->year = DS1302_ReadData(ADDRESS_YEAR);
     58a:	8c e8       	ldi	r24, 0x8C	; 140
     58c:	d6 df       	rcall	.-84     	; 0x53a <DS1302_ReadData>
     58e:	8e 83       	std	Y+6, r24	; 0x06
     590:	df 91       	pop	r29
}
     592:	cf 91       	pop	r28
     594:	08 95       	ret

00000596 <DS1302_SetTimeDates>:
     596:	0f 93       	push	r16
	*dayofweek = DS1302_ReadData(0x85);
	*year = DS1302_ReadData(0x8d);
}
*/

void DS1302_SetTimeDates(DS1302 timeDate){
     598:	1f 93       	push	r17
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	cd b7       	in	r28, 0x3d	; 61
     5a0:	de b7       	in	r29, 0x3e	; 62
     5a2:	29 97       	sbiw	r28, 0x09	; 9
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	f8 94       	cli
     5a8:	de bf       	out	0x3e, r29	; 62
     5aa:	0f be       	out	0x3f, r0	; 63
     5ac:	cd bf       	out	0x3d, r28	; 61
     5ae:	1a 83       	std	Y+2, r17	; 0x02
     5b0:	2b 83       	std	Y+3, r18	; 0x03
     5b2:	3c 83       	std	Y+4, r19	; 0x04
     5b4:	4d 83       	std	Y+5, r20	; 0x05
     5b6:	5e 83       	std	Y+6, r21	; 0x06
     5b8:	6f 83       	std	Y+7, r22	; 0x07
	DS1302_WriteData(ADDRESS_SECONDS, timeDate.seconds);
     5ba:	60 2f       	mov	r22, r16
     5bc:	80 e8       	ldi	r24, 0x80	; 128
     5be:	af df       	rcall	.-162    	; 0x51e <DS1302_WriteData>
	DS1302_WriteData(ADDRESS_MINUTES, timeDate.minutes);
     5c0:	6a 81       	ldd	r22, Y+2	; 0x02
     5c2:	82 e8       	ldi	r24, 0x82	; 130
     5c4:	ac df       	rcall	.-168    	; 0x51e <DS1302_WriteData>
	DS1302_WriteData(ADDRESS_HOUR, timeDate.hour);
     5c6:	6b 81       	ldd	r22, Y+3	; 0x03
     5c8:	84 e8       	ldi	r24, 0x84	; 132
     5ca:	a9 df       	rcall	.-174    	; 0x51e <DS1302_WriteData>
	DS1302_WriteData(ADDRESS_DATE, timeDate.date);
     5cc:	6c 81       	ldd	r22, Y+4	; 0x04
     5ce:	86 e8       	ldi	r24, 0x86	; 134
     5d0:	a6 df       	rcall	.-180    	; 0x51e <DS1302_WriteData>
	DS1302_WriteData(ADDRESS_MONTH, timeDate.month);
     5d2:	6d 81       	ldd	r22, Y+5	; 0x05
     5d4:	88 e8       	ldi	r24, 0x88	; 136
     5d6:	a3 df       	rcall	.-186    	; 0x51e <DS1302_WriteData>
	DS1302_WriteData(ADDRESS_DAYOFWEEK, timeDate.dayofweek);
     5d8:	6e 81       	ldd	r22, Y+6	; 0x06
     5da:	8a e8       	ldi	r24, 0x8A	; 138
     5dc:	a0 df       	rcall	.-192    	; 0x51e <DS1302_WriteData>
	DS1302_WriteData(ADDRESS_YEAR, timeDate.year);
     5de:	6f 81       	ldd	r22, Y+7	; 0x07
     5e0:	8c e8       	ldi	r24, 0x8C	; 140
     5e2:	9d df       	rcall	.-198    	; 0x51e <DS1302_WriteData>
     5e4:	29 96       	adiw	r28, 0x09	; 9
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	f8 94       	cli
     5ea:	de bf       	out	0x3e, r29	; 62
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	cd bf       	out	0x3d, r28	; 61
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	08 95       	ret

000005fa <BT_UART1_Init>:
     5fa:	ea e9       	ldi	r30, 0x9A	; 154
	BT_UART1_transmit(str[i]);
}

uint8_t BT_isRxD(){
	return (UCSR1A & (1<<7));
}
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	80 81       	ld	r24, Z
     600:	88 69       	ori	r24, 0x98	; 152
     602:	80 83       	st	Z, r24
     604:	eb e9       	ldi	r30, 0x9B	; 155
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	80 81       	ld	r24, Z
     60a:	82 60       	ori	r24, 0x02	; 2
     60c:	80 83       	st	Z, r24
     60e:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     612:	8f ec       	ldi	r24, 0xCF	; 207
     614:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     618:	08 95       	ret

0000061a <BT_UART1_transmit>:
     61a:	eb e9       	ldi	r30, 0x9B	; 155
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	90 81       	ld	r25, Z
     620:	95 ff       	sbrs	r25, 5
     622:	fd cf       	rjmp	.-6      	; 0x61e <BT_UART1_transmit+0x4>
     624:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     628:	08 95       	ret

0000062a <BT_UART1_printf_string>:
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	ec 01       	movw	r28, r24
     630:	88 81       	ld	r24, Y
     632:	88 23       	and	r24, r24
     634:	29 f0       	breq	.+10     	; 0x640 <BT_UART1_printf_string+0x16>
     636:	21 96       	adiw	r28, 0x01	; 1
     638:	f0 df       	rcall	.-32     	; 0x61a <BT_UART1_transmit>
     63a:	89 91       	ld	r24, Y+
     63c:	81 11       	cpse	r24, r1
     63e:	fc cf       	rjmp	.-8      	; 0x638 <BT_UART1_printf_string+0xe>
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	08 95       	ret

00000646 <BT_isRxString>:

uint8_t BT_isRxString(){ // 들어온 String이 있는가?	
	return BT_rxReadyFlag;
     646:	80 91 09 09 	lds	r24, 0x0909	; 0x800909 <BT_rxReadyFlag>
}
     64a:	08 95       	ret

0000064c <BT_getRxString>:

uint8_t* BT_getRxString(){ // 리턴자료형 뒤에 *를 붙이면 반환되는 값이 주소임을 알려줌
	BT_rxReadyFlag = 0;
     64c:	10 92 09 09 	sts	0x0909, r1	; 0x800909 <BT_rxReadyFlag>
	return BT_rxString;
	// return %rxString[0]; 같은 의미, rxString의 첫 번째 요소의 주소를 반환
}
     650:	8a e0       	ldi	r24, 0x0A	; 10
     652:	99 e0       	ldi	r25, 0x09	; 9
     654:	08 95       	ret

00000656 <BT_UART1_ISR_Receive>:

void BT_UART1_ISR_Receive(){
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	1f 92       	push	r1
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
	static uint8_t BT_head = 0;
	volatile uint8_t BT_data;
	
	BT_data = UDR1; // UDRn : 송수신된 데이터가 저장되는 버퍼 레지스터
     660:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     664:	89 83       	std	Y+1, r24	; 0x01
	
	// 만약 data 문자열의 끝을 만나면 끝에 NULL을 넣어주겠다.
	if((BT_data == '\n') || (BT_data == '\r')){
     666:	89 81       	ldd	r24, Y+1	; 0x01
     668:	8a 30       	cpi	r24, 0x0A	; 10
     66a:	19 f0       	breq	.+6      	; 0x672 <BT_UART1_ISR_Receive+0x1c>
     66c:	89 81       	ldd	r24, Y+1	; 0x01
     66e:	8d 30       	cpi	r24, 0x0D	; 13
     670:	61 f4       	brne	.+24     	; 0x68a <BT_UART1_ISR_Receive+0x34>
		BT_rxString[BT_head]	= '\0';
     672:	e0 91 08 09 	lds	r30, 0x0908	; 0x800908 <BT_head.1643>
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	e6 5f       	subi	r30, 0xF6	; 246
     67a:	f6 4f       	sbci	r31, 0xF6	; 246
     67c:	10 82       	st	Z, r1
		BT_head = 0;
     67e:	10 92 08 09 	sts	0x0908, r1	; 0x800908 <BT_head.1643>
		BT_rxReadyFlag = 1;
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	80 93 09 09 	sts	0x0909, r24	; 0x800909 <BT_rxReadyFlag>
     688:	0b c0       	rjmp	.+22     	; 0x6a0 <BT_UART1_ISR_Receive+0x4a>
	}
	// 문자열의 끝이 아니라면(문자가 들어올때마다) rxString[head]에 data 문자를 넣겠다.
	else{
		BT_rxString[BT_head] = BT_data;
     68a:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <BT_head.1643>
     68e:	e8 2f       	mov	r30, r24
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	99 81       	ldd	r25, Y+1	; 0x01
     694:	e6 5f       	subi	r30, 0xF6	; 246
     696:	f6 4f       	sbci	r31, 0xF6	; 246
     698:	90 83       	st	Z, r25
		BT_head++;
     69a:	8f 5f       	subi	r24, 0xFF	; 255
     69c:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <BT_head.1643>
	}
     6a0:	0f 90       	pop	r0
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	08 95       	ret

000006a8 <I2C_init>:

//#define START 0x08
//#define SLA_W (0x27<<1)

void I2C_init(unsigned int baud){
	I2C_DDR |= (1 << I2C_SCL) | (1 << I2C_SDA);
     6a8:	91 b3       	in	r25, 0x11	; 17
     6aa:	93 60       	ori	r25, 0x03	; 3
     6ac:	91 bb       	out	0x11, r25	; 17
	TWBR = baud;
     6ae:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     6b2:	08 95       	ret

000006b4 <I2C_start>:
}

void I2C_start(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     6b4:	84 ea       	ldi	r24, 0xA4	; 164
     6b6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));  // 시작 완료 대기
     6ba:	e4 e7       	ldi	r30, 0x74	; 116
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	80 81       	ld	r24, Z
     6c0:	88 23       	and	r24, r24
     6c2:	ec f7       	brge	.-6      	; 0x6be <I2C_start+0xa>
}
     6c4:	08 95       	ret

000006c6 <I2C_transmit>:

void I2C_transmit(uint8_t data)
{
	TWDR = data;
     6c6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);
     6ca:	84 e8       	ldi	r24, 0x84	; 132
     6cc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));
     6d0:	e4 e7       	ldi	r30, 0x74	; 116
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	80 81       	ld	r24, Z
     6d6:	88 23       	and	r24, r24
     6d8:	ec f7       	brge	.-6      	; 0x6d4 <I2C_transmit+0xe>
}
     6da:	08 95       	ret

000006dc <I2C_write_byte>:

void I2C_write_byte(uint8_t address, uint8_t data)
{
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	d8 2f       	mov	r29, r24
     6e2:	c6 2f       	mov	r28, r22
	I2C_start();
     6e4:	e7 df       	rcall	.-50     	; 0x6b4 <I2C_start>
	I2C_transmit(address);
     6e6:	8d 2f       	mov	r24, r29
     6e8:	ee df       	rcall	.-36     	; 0x6c6 <I2C_transmit>
	I2C_transmit(data);
     6ea:	8c 2f       	mov	r24, r28
     6ec:	ec df       	rcall	.-40     	; 0x6c6 <I2C_transmit>
     6ee:	84 e9       	ldi	r24, 0x94	; 148
	I2C_stop();
}

void I2C_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     6f0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     6f4:	df 91       	pop	r29
{
	I2C_start();
	I2C_transmit(address);
	I2C_transmit(data);
	I2C_stop();
}
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <I2C_LCD_write_data>:
     6fa:	ef 92       	push	r14
#define START 0x08
#define SLA_W (0x3f<<1)				// I2C LCD 주소 0x3f , <<1 이유는 write모드 유지
#define SLA_R (0x3f<<1 | 0x01)      // I2C LCD 주소 0x3f , Read모드 유지

void I2C_LCD_write_data(uint8_t data)
{
     6fc:	ff 92       	push	r15
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	00 d0       	rcall	.+0      	; 0x708 <I2C_LCD_write_data+0xe>
     708:	00 d0       	rcall	.+0      	; 0x70a <I2C_LCD_write_data+0x10>
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
	char data_u, data_l;
	uint8_t data_t[4] = {0,};
	data_u = (data&0xf0);      // 상위 4bit 데이터
     70e:	28 2f       	mov	r18, r24
     710:	20 7f       	andi	r18, 0xF0	; 240
	data_l = ((data<<4)&0xf0); // 하위 4bit 데이터
     712:	30 e1       	ldi	r19, 0x10	; 16
     714:	83 9f       	mul	r24, r19
     716:	c0 01       	movw	r24, r0
     718:	11 24       	eor	r1, r1
	data_t[0] = data_u|0x0D;   //en=1, rs=1           |D7|D6|D5|D4|X|E|RW|RS|
     71a:	92 2f       	mov	r25, r18
     71c:	9d 60       	ori	r25, 0x0D	; 13
     71e:	99 83       	std	Y+1, r25	; 0x01
	data_t[1] = data_u|0x09;   //en=0, rs=1
     720:	29 60       	ori	r18, 0x09	; 9
     722:	2a 83       	std	Y+2, r18	; 0x02
	data_t[2] = data_l|0x0D;   //en=1, rs=1
     724:	98 2f       	mov	r25, r24
     726:	9d 60       	ori	r25, 0x0D	; 13
     728:	9b 83       	std	Y+3, r25	; 0x03
	data_t[3] = data_l|0x09;   //en=0, rs=1
     72a:	89 60       	ori	r24, 0x09	; 9
     72c:	8c 83       	std	Y+4, r24	; 0x04
     72e:	8e 01       	movw	r16, r28
     730:	0f 5f       	subi	r16, 0xFF	; 255
     732:	1f 4f       	sbci	r17, 0xFF	; 255
     734:	7e 01       	movw	r14, r28
     736:	85 e0       	ldi	r24, 0x05	; 5
     738:	e8 0e       	add	r14, r24
     73a:	f1 1c       	adc	r15, r1

	for(char i=0;i<4;i++){
		I2C_write_byte(SLA_W, data_t[i]);
     73c:	f8 01       	movw	r30, r16
     73e:	61 91       	ld	r22, Z+
     740:	8f 01       	movw	r16, r30
     742:	8e e7       	ldi	r24, 0x7E	; 126
     744:	cb df       	rcall	.-106    	; 0x6dc <I2C_write_byte>
	data_t[0] = data_u|0x0D;   //en=1, rs=1           |D7|D6|D5|D4|X|E|RW|RS|
	data_t[1] = data_u|0x09;   //en=0, rs=1
	data_t[2] = data_l|0x0D;   //en=1, rs=1
	data_t[3] = data_l|0x09;   //en=0, rs=1

	for(char i=0;i<4;i++){
     746:	0e 15       	cp	r16, r14
     748:	1f 05       	cpc	r17, r15
     74a:	c1 f7       	brne	.-16     	; 0x73c <I2C_LCD_write_data+0x42>
		I2C_write_byte(SLA_W, data_t[i]);
	}
}
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	ff 90       	pop	r15
     75e:	ef 90       	pop	r14
     760:	08 95       	ret

00000762 <I2C_LCD_write_command>:

void I2C_LCD_write_command(uint8_t command)
{
     762:	ef 92       	push	r14
     764:	ff 92       	push	r15
     766:	0f 93       	push	r16
     768:	1f 93       	push	r17
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	00 d0       	rcall	.+0      	; 0x770 <I2C_LCD_write_command+0xe>
     770:	00 d0       	rcall	.+0      	; 0x772 <I2C_LCD_write_command+0x10>
     772:	cd b7       	in	r28, 0x3d	; 61
     774:	de b7       	in	r29, 0x3e	; 62
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (command&0xf0);      // command의 상위 4bit 저장
     776:	28 2f       	mov	r18, r24
     778:	20 7f       	andi	r18, 0xF0	; 240
	data_l = ((command<<4)&0xf0); // command의 하위 4bit 저장
     77a:	30 e1       	ldi	r19, 0x10	; 16
     77c:	83 9f       	mul	r24, r19
     77e:	c0 01       	movw	r24, r0
     780:	11 24       	eor	r1, r1
	data_t[0] = data_u|0x0C;  //en=1, rs=0           |D7|D6|D5|D4|X|E|RW|RS|
     782:	92 2f       	mov	r25, r18
     784:	9c 60       	ori	r25, 0x0C	; 12
     786:	99 83       	std	Y+1, r25	; 0x01
	data_t[1] = data_u|0x08;  //en=0, rs=0
     788:	28 60       	ori	r18, 0x08	; 8
     78a:	2a 83       	std	Y+2, r18	; 0x02
	data_t[2] = data_l|0x0C;  //en=1, rs=0
     78c:	98 2f       	mov	r25, r24
     78e:	9c 60       	ori	r25, 0x0C	; 12
     790:	9b 83       	std	Y+3, r25	; 0x03
	data_t[3] = data_l|0x08;  //en=0, rs=0
     792:	88 60       	ori	r24, 0x08	; 8
     794:	8c 83       	std	Y+4, r24	; 0x04
     796:	8e 01       	movw	r16, r28
     798:	0f 5f       	subi	r16, 0xFF	; 255
     79a:	1f 4f       	sbci	r17, 0xFF	; 255
     79c:	7e 01       	movw	r14, r28
     79e:	85 e0       	ldi	r24, 0x05	; 5
     7a0:	e8 0e       	add	r14, r24
     7a2:	f1 1c       	adc	r15, r1
	
	for(char i=0;i<4;i++){
		I2C_write_byte(SLA_W, data_t[i]);
     7a4:	f8 01       	movw	r30, r16
     7a6:	61 91       	ld	r22, Z+
     7a8:	8f 01       	movw	r16, r30
     7aa:	8e e7       	ldi	r24, 0x7E	; 126
     7ac:	97 df       	rcall	.-210    	; 0x6dc <I2C_write_byte>
	data_t[0] = data_u|0x0C;  //en=1, rs=0           |D7|D6|D5|D4|X|E|RW|RS|
	data_t[1] = data_u|0x08;  //en=0, rs=0
	data_t[2] = data_l|0x0C;  //en=1, rs=0
	data_t[3] = data_l|0x08;  //en=0, rs=0
	
	for(char i=0;i<4;i++){
     7ae:	0e 15       	cp	r16, r14
     7b0:	1f 05       	cpc	r17, r15
     7b2:	c1 f7       	brne	.-16     	; 0x7a4 <I2C_LCD_write_command+0x42>
		I2C_write_byte(SLA_W, data_t[i]);
	}
}
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	1f 91       	pop	r17
     7c2:	0f 91       	pop	r16
     7c4:	ff 90       	pop	r15
     7c6:	ef 90       	pop	r14
     7c8:	08 95       	ret

000007ca <I2C_LCD_clear>:

void I2C_LCD_clear(void)
{
	I2C_LCD_write_command(COMMAND_CLEAR_DISPLAY);
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	ca df       	rcall	.-108    	; 0x762 <I2C_LCD_write_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7ce:	8f e3       	ldi	r24, 0x3F	; 63
     7d0:	9f e1       	ldi	r25, 0x1F	; 31
     7d2:	01 97       	sbiw	r24, 0x01	; 1
     7d4:	f1 f7       	brne	.-4      	; 0x7d2 <I2C_LCD_clear+0x8>
     7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <I2C_LCD_clear+0xe>
     7d8:	00 00       	nop
     7da:	08 95       	ret

000007dc <I2C_LCD_init>:
	_delay_ms(2);
}

void I2C_LCD_init(void)
{
	I2C_init(72);
     7dc:	88 e4       	ldi	r24, 0x48	; 72
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	63 df       	rcall	.-314    	; 0x6a8 <I2C_init>
     7e2:	2f ef       	ldi	r18, 0xFF	; 255
     7e4:	80 e7       	ldi	r24, 0x70	; 112
     7e6:	92 e0       	ldi	r25, 0x02	; 2
     7e8:	21 50       	subi	r18, 0x01	; 1
     7ea:	80 40       	sbci	r24, 0x00	; 0
     7ec:	90 40       	sbci	r25, 0x00	; 0
     7ee:	e1 f7       	brne	.-8      	; 0x7e8 <I2C_LCD_init+0xc>
     7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <I2C_LCD_init+0x16>
     7f2:	00 00       	nop
	// 16MHz/(16+2*10000*1) = 799Hz
	// 16MHz/(16+2*72*1) = 100kHz
	_delay_ms(50);
	//Initialization of HD44780-based LCD (4-bit HW)
	I2C_LCD_write_command(0x33);
     7f4:	83 e3       	ldi	r24, 0x33	; 51
     7f6:	b5 df       	rcall	.-150    	; 0x762 <I2C_LCD_write_command>
	I2C_LCD_write_command(0x32);
     7f8:	82 e3       	ldi	r24, 0x32	; 50
     7fa:	b3 df       	rcall	.-154    	; 0x762 <I2C_LCD_write_command>
	I2C_LCD_write_command(0x28);   //Function Set 4-bit mode
     7fc:	88 e2       	ldi	r24, 0x28	; 40
     7fe:	b1 df       	rcall	.-158    	; 0x762 <I2C_LCD_write_command>
	I2C_LCD_write_command(0x0c);   //Display On/Off Control
     800:	8c e0       	ldi	r24, 0x0C	; 12
     802:	af df       	rcall	.-162    	; 0x762 <I2C_LCD_write_command>
	I2C_LCD_write_command(0x06);   //Entry mode set
     804:	86 e0       	ldi	r24, 0x06	; 6
     806:	ad df       	rcall	.-166    	; 0x762 <I2C_LCD_write_command>
     808:	81 e0       	ldi	r24, 0x01	; 1
	I2C_LCD_write_command(0x01);   //Clear Display
     80a:	ab df       	rcall	.-170    	; 0x762 <I2C_LCD_write_command>
     80c:	8f e3       	ldi	r24, 0x3F	; 63
     80e:	9c e9       	ldi	r25, 0x9C	; 156
     810:	01 97       	sbiw	r24, 0x01	; 1
     812:	f1 f7       	brne	.-4      	; 0x810 <I2C_LCD_init+0x34>
     814:	00 c0       	rjmp	.+0      	; 0x816 <I2C_LCD_init+0x3a>
     816:	00 00       	nop
     818:	08 95       	ret

0000081a <I2C_LCD_write_string>:
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
	_delay_ms(10);
	
}

void I2C_LCD_write_string(char *string)
{
     81e:	cf 93       	push	r28
     820:	fc 01       	movw	r30, r24
	uint8_t i;
	for(i=0; string[i]; i++)
     822:	80 81       	ld	r24, Z
     824:	88 23       	and	r24, r24
     826:	51 f0       	breq	.+20     	; 0x83c <I2C_LCD_write_string+0x22>
     828:	8f 01       	movw	r16, r30
     82a:	c0 e0       	ldi	r28, 0x00	; 0
	I2C_LCD_write_data(string[i]);
     82c:	66 df       	rcall	.-308    	; 0x6fa <I2C_LCD_write_data>
}

void I2C_LCD_write_string(char *string)
{
	uint8_t i;
	for(i=0; string[i]; i++)
     82e:	cf 5f       	subi	r28, 0xFF	; 255
     830:	f8 01       	movw	r30, r16
     832:	ec 0f       	add	r30, r28
     834:	f1 1d       	adc	r31, r1
     836:	80 81       	ld	r24, Z
     838:	81 11       	cpse	r24, r1
     83a:	f8 cf       	rjmp	.-16     	; 0x82c <I2C_LCD_write_string+0x12>
	I2C_LCD_write_data(string[i]);
}
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	08 95       	ret

00000844 <I2C_LCD_goto_XY>:
	row %= 2;
	
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;
	
	I2C_LCD_write_command(command);
     844:	81 70       	andi	r24, 0x01	; 1
     846:	6f 70       	andi	r22, 0x0F	; 15
     848:	90 e4       	ldi	r25, 0x40	; 64
     84a:	89 9f       	mul	r24, r25
     84c:	60 0d       	add	r22, r0
     84e:	11 24       	eor	r1, r1
     850:	86 2f       	mov	r24, r22
     852:	80 58       	subi	r24, 0x80	; 128
     854:	86 cf       	rjmp	.-244    	; 0x762 <I2C_LCD_write_command>
     856:	08 95       	ret

00000858 <I2C_LCD_write_string_XY>:
}

void I2C_LCD_write_string_XY(uint8_t row, uint8_t col, char *string)
{
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	ea 01       	movw	r28, r20
	I2C_LCD_goto_XY(row, col);
     85e:	f2 df       	rcall	.-28     	; 0x844 <I2C_LCD_goto_XY>
	I2C_LCD_write_string(string);
     860:	ce 01       	movw	r24, r28
     862:	db df       	rcall	.-74     	; 0x81a <I2C_LCD_write_string>
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	08 95       	ret

0000086a <__vector_30>:
* Author : LYW
*/

#include "main.h"

ISR(USART1_RX_vect){
     86a:	1f 92       	push	r1
     86c:	0f 92       	push	r0
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	0f 92       	push	r0
     872:	11 24       	eor	r1, r1
     874:	0b b6       	in	r0, 0x3b	; 59
     876:	0f 92       	push	r0
     878:	2f 93       	push	r18
     87a:	3f 93       	push	r19
     87c:	4f 93       	push	r20
     87e:	5f 93       	push	r21
     880:	6f 93       	push	r22
     882:	7f 93       	push	r23
     884:	8f 93       	push	r24
     886:	9f 93       	push	r25
     888:	af 93       	push	r26
     88a:	bf 93       	push	r27
     88c:	ef 93       	push	r30
     88e:	ff 93       	push	r31
	BT_UART1_ISR_Receive();
     890:	e2 de       	rcall	.-572    	; 0x656 <BT_UART1_ISR_Receive>
	if((UDR1 == '\n') || (UDR1 == '\r')){
     892:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     896:	8a 30       	cpi	r24, 0x0A	; 10
     898:	21 f0       	breq	.+8      	; 0x8a2 <__vector_30+0x38>
     89a:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     89e:	8d 30       	cpi	r24, 0x0D	; 13
     8a0:	31 f4       	brne	.+12     	; 0x8ae <__vector_30+0x44>
     8a2:	8f e3       	ldi	r24, 0x3F	; 63
     8a4:	9f e1       	ldi	r25, 0x1F	; 31
     8a6:	01 97       	sbiw	r24, 0x01	; 1
     8a8:	f1 f7       	brne	.-4      	; 0x8a6 <__vector_30+0x3c>
     8aa:	00 c0       	rjmp	.+0      	; 0x8ac <__vector_30+0x42>
     8ac:	00 00       	nop
		_delay_ms(2);
	}
}
     8ae:	ff 91       	pop	r31
     8b0:	ef 91       	pop	r30
     8b2:	bf 91       	pop	r27
     8b4:	af 91       	pop	r26
     8b6:	9f 91       	pop	r25
     8b8:	8f 91       	pop	r24
     8ba:	7f 91       	pop	r23
     8bc:	6f 91       	pop	r22
     8be:	5f 91       	pop	r21
     8c0:	4f 91       	pop	r20
     8c2:	3f 91       	pop	r19
     8c4:	2f 91       	pop	r18
     8c6:	0f 90       	pop	r0
     8c8:	0b be       	out	0x3b, r0	; 59
     8ca:	0f 90       	pop	r0
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	0f 90       	pop	r0
     8d0:	1f 90       	pop	r1
     8d2:	18 95       	reti

000008d4 <__vector_15>:

ISR(TIMER0_COMP_vect){
     8d4:	1f 92       	push	r1
     8d6:	0f 92       	push	r0
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	0f 92       	push	r0
     8dc:	11 24       	eor	r1, r1
     8de:	0b b6       	in	r0, 0x3b	; 59
     8e0:	0f 92       	push	r0
     8e2:	2f 93       	push	r18
     8e4:	3f 93       	push	r19
     8e6:	4f 93       	push	r20
     8e8:	5f 93       	push	r21
     8ea:	6f 93       	push	r22
     8ec:	7f 93       	push	r23
     8ee:	8f 93       	push	r24
     8f0:	9f 93       	push	r25
     8f2:	af 93       	push	r26
     8f4:	bf 93       	push	r27
     8f6:	ef 93       	push	r30
     8f8:	ff 93       	push	r31
	incMilliSec();
     8fa:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <incMilliSec>
	incTime();
     8fe:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <incTime>
}
     902:	ff 91       	pop	r31
     904:	ef 91       	pop	r30
     906:	bf 91       	pop	r27
     908:	af 91       	pop	r26
     90a:	9f 91       	pop	r25
     90c:	8f 91       	pop	r24
     90e:	7f 91       	pop	r23
     910:	6f 91       	pop	r22
     912:	5f 91       	pop	r21
     914:	4f 91       	pop	r20
     916:	3f 91       	pop	r19
     918:	2f 91       	pop	r18
     91a:	0f 90       	pop	r0
     91c:	0b be       	out	0x3b, r0	; 59
     91e:	0f 90       	pop	r0
     920:	0f be       	out	0x3f, r0	; 63
     922:	0f 90       	pop	r0
     924:	1f 90       	pop	r1
     926:	18 95       	reti

00000928 <print_Menu>:
	}
}


void print_Menu(){
	BT_UART1_printf_string("\n---------------------- M E N U -------------------\n");
     928:	8b e6       	ldi	r24, 0x6B	; 107
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	7e de       	rcall	.-772    	; 0x62a <BT_UART1_printf_string>
	BT_UART1_printf_string("   1. Show Current Temperature & Humidity\n");
     92e:	80 ea       	ldi	r24, 0xA0	; 160
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	7b de       	rcall	.-778    	; 0x62a <BT_UART1_printf_string>
	BT_UART1_printf_string("   2. Set Current Time & Date\n");
     934:	8b ec       	ldi	r24, 0xCB	; 203
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	78 de       	rcall	.-784    	; 0x62a <BT_UART1_printf_string>
	BT_UART1_printf_string("   3. Set Feeding Period\n");
     93a:	8a ee       	ldi	r24, 0xEA	; 234
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	75 de       	rcall	.-790    	; 0x62a <BT_UART1_printf_string>
	BT_UART1_printf_string("   4. Show Setting\n");
     940:	84 e0       	ldi	r24, 0x04	; 4
     942:	92 e0       	ldi	r25, 0x02	; 2
     944:	72 de       	rcall	.-796    	; 0x62a <BT_UART1_printf_string>
	BT_UART1_printf_string("   5. Feeding Once\n");
     946:	88 e1       	ldi	r24, 0x18	; 24
     948:	92 e0       	ldi	r25, 0x02	; 2
     94a:	6f de       	rcall	.-802    	; 0x62a <BT_UART1_printf_string>
	BT_UART1_printf_string("   6. Servo Setting\n");
     94c:	8c e2       	ldi	r24, 0x2C	; 44
     94e:	92 e0       	ldi	r25, 0x02	; 2
     950:	6c de       	rcall	.-808    	; 0x62a <BT_UART1_printf_string>
	BT_UART1_printf_string("---------------------------------------------------\n");
     952:	81 e4       	ldi	r24, 0x41	; 65
     954:	92 e0       	ldi	r25, 0x02	; 2
     956:	69 de       	rcall	.-814    	; 0x62a <BT_UART1_printf_string>
     958:	86 e7       	ldi	r24, 0x76	; 118
	BT_UART1_printf_string("Select Number >\n");
     95a:	92 e0       	ldi	r25, 0x02	; 2
     95c:	66 ce       	rjmp	.-820    	; 0x62a <BT_UART1_printf_string>
     95e:	08 95       	ret

00000960 <servo_Set>:
     960:	0f 93       	push	r16
     962:	1f 93       	push	r17


/////////////////////////////////////
//---------- 함수 선언부 ----------//
void servo_Set(){
	if(input_flag == 0){
     964:	80 91 61 09 	lds	r24, 0x0961	; 0x800961 <input_flag>
     968:	81 11       	cpse	r24, r1
     96a:	09 c0       	rjmp	.+18     	; 0x97e <servo_Set+0x1e>
		BT_UART1_printf_string("\n---- SERVO SETTING ----\n>");
     96c:	87 e8       	ldi	r24, 0x87	; 135
     96e:	92 e0       	ldi	r25, 0x02	; 2
     970:	5c de       	rcall	.-840    	; 0x62a <BT_UART1_printf_string>
		BT_UART1_printf_string("\nInput Servo degree. (default : 100)\n>");
     972:	82 ea       	ldi	r24, 0xA2	; 162
     974:	92 e0       	ldi	r25, 0x02	; 2
     976:	59 de       	rcall	.-846    	; 0x62a <BT_UART1_printf_string>
		input_flag = 1;
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	80 93 61 09 	sts	0x0961, r24	; 0x800961 <input_flag>
	}
	
	if(millis() - prevMillis > 500){
     97e:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <millis>
     982:	00 91 8a 09 	lds	r16, 0x098A	; 0x80098a <prevMillis>
     986:	10 91 8b 09 	lds	r17, 0x098B	; 0x80098b <prevMillis+0x1>
     98a:	20 91 8c 09 	lds	r18, 0x098C	; 0x80098c <prevMillis+0x2>
     98e:	30 91 8d 09 	lds	r19, 0x098D	; 0x80098d <prevMillis+0x3>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	80 1b       	sub	r24, r16
     998:	91 0b       	sbc	r25, r17
     99a:	a2 0b       	sbc	r26, r18
     99c:	b3 0b       	sbc	r27, r19
     99e:	85 3f       	cpi	r24, 0xF5	; 245
     9a0:	91 40       	sbci	r25, 0x01	; 1
     9a2:	a1 05       	cpc	r26, r1
     9a4:	b1 05       	cpc	r27, r1
     9a6:	10 f1       	brcs	.+68     	; 0x9ec <servo_Set+0x8c>
		if (blink_flag == 0){
     9a8:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <blink_flag>
     9ac:	81 11       	cpse	r24, r1
     9ae:	0d c0       	rjmp	.+26     	; 0x9ca <servo_Set+0x6a>
			I2C_LCD_write_string_XY(0, 0, "||SERVO DEGREE||");
     9b0:	49 ec       	ldi	r20, 0xC9	; 201
     9b2:	52 e0       	ldi	r21, 0x02	; 2
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	50 df       	rcall	.-352    	; 0x858 <I2C_LCD_write_string_XY>
			I2C_LCD_write_string_XY(1, 0, "  degree : ---  ");
     9b8:	4a ed       	ldi	r20, 0xDA	; 218
     9ba:	52 e0       	ldi	r21, 0x02	; 2
     9bc:	60 e0       	ldi	r22, 0x00	; 0
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	4b df       	rcall	.-362    	; 0x858 <I2C_LCD_write_string_XY>
			blink_flag = 1;
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	80 93 5f 09 	sts	0x095F, r24	; 0x80095f <blink_flag>
     9c8:	07 c0       	rjmp	.+14     	; 0x9d8 <servo_Set+0x78>
		}
		else{
			I2C_LCD_write_string_XY(1, 0, "  degree :      ");
     9ca:	4b ee       	ldi	r20, 0xEB	; 235
     9cc:	52 e0       	ldi	r21, 0x02	; 2
     9ce:	60 e0       	ldi	r22, 0x00	; 0
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	42 df       	rcall	.-380    	; 0x858 <I2C_LCD_write_string_XY>
			blink_flag = 0;
     9d4:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <blink_flag>
		}
		prevMillis = millis();
     9d8:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <millis>
     9dc:	60 93 8a 09 	sts	0x098A, r22	; 0x80098a <prevMillis>
     9e0:	70 93 8b 09 	sts	0x098B, r23	; 0x80098b <prevMillis+0x1>
     9e4:	80 93 8c 09 	sts	0x098C, r24	; 0x80098c <prevMillis+0x2>
	}
	
	if(BT_isRxString()){
     9e8:	90 93 8d 09 	sts	0x098D, r25	; 0x80098d <prevMillis+0x3>
     9ec:	2c de       	rcall	.-936    	; 0x646 <BT_isRxString>
		receiveData = BT_getRxString();
     9ee:	88 23       	and	r24, r24
     9f0:	b1 f1       	breq	.+108    	; 0xa5e <servo_Set+0xfe>
     9f2:	2c de       	rcall	.-936    	; 0x64c <BT_getRxString>
     9f4:	90 93 a3 09 	sts	0x09A3, r25	; 0x8009a3 <receiveData+0x1>
		BT_UART1_printf_string(receiveData);
     9f8:	80 93 a2 09 	sts	0x09A2, r24	; 0x8009a2 <receiveData>
		BT_UART1_printf_string("\n");
     9fc:	16 de       	rcall	.-980    	; 0x62a <BT_UART1_printf_string>
     9fe:	81 e1       	ldi	r24, 0x11	; 17
     a00:	96 e0       	ldi	r25, 0x06	; 6
     a02:	13 de       	rcall	.-986    	; 0x62a <BT_UART1_printf_string>
		
		servo_degree = atoi(receiveData);
     a04:	80 91 a2 09 	lds	r24, 0x09A2	; 0x8009a2 <receiveData>
     a08:	90 91 a3 09 	lds	r25, 0x09A3	; 0x8009a3 <receiveData+0x1>
     a0c:	0e 94 cc 11 	call	0x2398	; 0x2398 <atoi>
     a10:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <servo_degree>
		if(servo_degree < 0 || servo_degree > 255){
			BT_UART1_printf_string("It is possible to insert degree from 0 to 255.\n");
			return;
		}
		
		sprintf(bt_buff, "Set %d\n\n", servo_degree);
     a14:	99 27       	eor	r25, r25
     a16:	9f 93       	push	r25
     a18:	8f 93       	push	r24
     a1a:	8c ef       	ldi	r24, 0xFC	; 252
     a1c:	92 e0       	ldi	r25, 0x02	; 2
     a1e:	9f 93       	push	r25
     a20:	8f 93       	push	r24
     a22:	88 eb       	ldi	r24, 0xB8	; 184
     a24:	99 e0       	ldi	r25, 0x09	; 9
     a26:	9f 93       	push	r25
     a28:	8f 93       	push	r24
		BT_UART1_printf_string(bt_buff);
     a2a:	0e 94 1b 12 	call	0x2436	; 0x2436 <sprintf>
     a2e:	88 eb       	ldi	r24, 0xB8	; 184
     a30:	99 e0       	ldi	r25, 0x09	; 9
		print_Menu();
     a32:	fb dd       	rcall	.-1034   	; 0x62a <BT_UART1_printf_string>
     a34:	79 df       	rcall	.-270    	; 0x928 <print_Menu>
		
		input_flag = 0;
     a36:	10 92 61 09 	sts	0x0961, r1	; 0x800961 <input_flag>
		blink_flag = 0;
     a3a:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <blink_flag>
		settingFlag = 0;
     a3e:	10 92 62 09 	sts	0x0962, r1	; 0x800962 <settingFlag>
		RUN_STATE = CLOCK;
     a42:	10 92 e0 09 	sts	0x09E0, r1	; 0x8009e0 <RUN_STATE>
     a46:	8f e3       	ldi	r24, 0x3F	; 63
     a48:	9f e1       	ldi	r25, 0x1F	; 31
     a4a:	01 97       	sbiw	r24, 0x01	; 1
     a4c:	f1 f7       	brne	.-4      	; 0xa4a <servo_Set+0xea>
     a4e:	00 c0       	rjmp	.+0      	; 0xa50 <servo_Set+0xf0>
     a50:	00 00       	nop
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	0f 90       	pop	r0
		// 딜레이를 주지 않으면 블루투스가 잘 안됨
		_delay_ms(2);
	}
}
     a5e:	1f 91       	pop	r17
     a60:	0f 91       	pop	r16
     a62:	08 95       	ret

00000a64 <show_Clock>:
	BT_UART1_printf_string("   6. Servo Setting\n");
	BT_UART1_printf_string("---------------------------------------------------\n");
	BT_UART1_printf_string("Select Number >\n");
}

void show_Clock(){
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
	DS1302_GetTime(&stTime);
     a6c:	8d e6       	ldi	r24, 0x6D	; 109
     a6e:	99 e0       	ldi	r25, 0x09	; 9
     a70:	71 dd       	rcall	.-1310   	; 0x554 <DS1302_GetTime>
	DS1302_GetDate(&stTime);
     a72:	8d e6       	ldi	r24, 0x6D	; 109
     a74:	99 e0       	ldi	r25, 0x09	; 9
     a76:	7d dd       	rcall	.-1286   	; 0x572 <DS1302_GetDate>
	
	if(millis() - prevMillis > 200){
     a78:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <millis>
     a7c:	00 91 8a 09 	lds	r16, 0x098A	; 0x80098a <prevMillis>
     a80:	10 91 8b 09 	lds	r17, 0x098B	; 0x80098b <prevMillis+0x1>
     a84:	20 91 8c 09 	lds	r18, 0x098C	; 0x80098c <prevMillis+0x2>
     a88:	30 91 8d 09 	lds	r19, 0x098D	; 0x80098d <prevMillis+0x3>
     a8c:	dc 01       	movw	r26, r24
     a8e:	cb 01       	movw	r24, r22
     a90:	80 1b       	sub	r24, r16
     a92:	91 0b       	sbc	r25, r17
     a94:	a2 0b       	sbc	r26, r18
     a96:	b3 0b       	sbc	r27, r19
     a98:	89 3c       	cpi	r24, 0xC9	; 201
     a9a:	91 05       	cpc	r25, r1
     a9c:	a1 05       	cpc	r26, r1
     a9e:	b1 05       	cpc	r27, r1
     aa0:	08 f4       	brcc	.+2      	; 0xaa4 <show_Clock+0x40>
     aa2:	76 c0       	rjmp	.+236    	; 0xb90 <show_Clock+0x12c>
		// 초기 temp가 측정이 안되어있는 경우를 위해 temp[0]==0 일 때 온도 읽어오기
		// 약 10초에 한 번 온도 측정
		dht_count++;
     aa4:	80 91 4f 09 	lds	r24, 0x094F	; 0x80094f <dht_count>
     aa8:	8f 5f       	subi	r24, 0xFF	; 255
     aaa:	80 93 4f 09 	sts	0x094F, r24	; 0x80094f <dht_count>
		if((dht_count % 40) || (temp[0] == 0)){
     aae:	9d ec       	ldi	r25, 0xCD	; 205
     ab0:	89 9f       	mul	r24, r25
     ab2:	91 2d       	mov	r25, r1
     ab4:	11 24       	eor	r1, r1
     ab6:	92 95       	swap	r25
     ab8:	96 95       	lsr	r25
     aba:	97 70       	andi	r25, 0x07	; 7
     abc:	28 e2       	ldi	r18, 0x28	; 40
     abe:	92 9f       	mul	r25, r18
     ac0:	80 19       	sub	r24, r0
     ac2:	11 24       	eor	r1, r1
     ac4:	81 11       	cpse	r24, r1
     ac6:	04 c0       	rjmp	.+8      	; 0xad0 <show_Clock+0x6c>
     ac8:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <temp>
     acc:	81 11       	cpse	r24, r1
     ace:	07 c0       	rjmp	.+14     	; 0xade <show_Clock+0x7a>
			DHT_Read(temp, humi);
     ad0:	6b e4       	ldi	r22, 0x4B	; 75
     ad2:	79 e0       	ldi	r23, 0x09	; 9
     ad4:	8d e4       	ldi	r24, 0x4D	; 77
     ad6:	99 e0       	ldi	r25, 0x09	; 9
     ad8:	6d dc       	rcall	.-1830   	; 0x3b4 <DHT_Read>
			dht_count = 0;
     ada:	10 92 4f 09 	sts	0x094F, r1	; 0x80094f <dht_count>
		}
		
		sprintf(date_buff, "%04d.%02d.%02d (%s)", 2000+stTime.year, stTime.month, stTime.date, dayofweek[stTime.dayofweek]);
     ade:	cd e6       	ldi	r28, 0x6D	; 109
     ae0:	d9 e0       	ldi	r29, 0x09	; 9
     ae2:	ed 81       	ldd	r30, Y+5	; 0x05
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	ee 0f       	add	r30, r30
     ae8:	ff 1f       	adc	r31, r31
     aea:	ef 5f       	subi	r30, 0xFF	; 255
     aec:	fe 4f       	sbci	r31, 0xFE	; 254
     aee:	81 81       	ldd	r24, Z+1	; 0x01
     af0:	8f 93       	push	r24
     af2:	80 81       	ld	r24, Z
     af4:	8f 93       	push	r24
     af6:	8b 81       	ldd	r24, Y+3	; 0x03
     af8:	1f 92       	push	r1
     afa:	8f 93       	push	r24
     afc:	8c 81       	ldd	r24, Y+4	; 0x04
     afe:	1f 92       	push	r1
     b00:	8f 93       	push	r24
     b02:	8e 81       	ldd	r24, Y+6	; 0x06
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	80 53       	subi	r24, 0x30	; 48
     b08:	98 4f       	sbci	r25, 0xF8	; 248
     b0a:	9f 93       	push	r25
     b0c:	8f 93       	push	r24
     b0e:	85 e0       	ldi	r24, 0x05	; 5
     b10:	93 e0       	ldi	r25, 0x03	; 3
     b12:	9f 93       	push	r25
     b14:	8f 93       	push	r24
     b16:	84 ea       	ldi	r24, 0xA4	; 164
     b18:	99 e0       	ldi	r25, 0x09	; 9
     b1a:	9f 93       	push	r25
     b1c:	8f 93       	push	r24
     b1e:	0e 94 1b 12 	call	0x2436	; 0x2436 <sprintf>
		sprintf(time_buff, "%02d:%02d:%02d  %02d.%01dC", stTime.hour, stTime.minutes, stTime.seconds, temp[0], temp[1]);
     b22:	ed e4       	ldi	r30, 0x4D	; 77
     b24:	f9 e0       	ldi	r31, 0x09	; 9
     b26:	81 81       	ldd	r24, Z+1	; 0x01
     b28:	1f 92       	push	r1
     b2a:	8f 93       	push	r24
     b2c:	80 81       	ld	r24, Z
     b2e:	1f 92       	push	r1
     b30:	8f 93       	push	r24
     b32:	88 81       	ld	r24, Y
     b34:	1f 92       	push	r1
     b36:	8f 93       	push	r24
     b38:	89 81       	ldd	r24, Y+1	; 0x01
     b3a:	1f 92       	push	r1
     b3c:	8f 93       	push	r24
     b3e:	8a 81       	ldd	r24, Y+2	; 0x02
     b40:	1f 92       	push	r1
     b42:	8f 93       	push	r24
     b44:	89 e1       	ldi	r24, 0x19	; 25
     b46:	93 e0       	ldi	r25, 0x03	; 3
     b48:	9f 93       	push	r25
     b4a:	8f 93       	push	r24
     b4c:	86 e7       	ldi	r24, 0x76	; 118
     b4e:	99 e0       	ldi	r25, 0x09	; 9
     b50:	9f 93       	push	r25
     b52:	8f 93       	push	r24
     b54:	0e 94 1b 12 	call	0x2436	; 0x2436 <sprintf>
		I2C_LCD_write_string_XY(0, 0, date_buff);
     b58:	44 ea       	ldi	r20, 0xA4	; 164
     b5a:	59 e0       	ldi	r21, 0x09	; 9
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	7b de       	rcall	.-778    	; 0x858 <I2C_LCD_write_string_XY>
		I2C_LCD_write_string_XY(1, 0, time_buff);
     b62:	46 e7       	ldi	r20, 0x76	; 118
     b64:	59 e0       	ldi	r21, 0x09	; 9
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	76 de       	rcall	.-788    	; 0x858 <I2C_LCD_write_string_XY>
		prevMillis = millis();
     b6c:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <millis>
     b70:	60 93 8a 09 	sts	0x098A, r22	; 0x80098a <prevMillis>
     b74:	70 93 8b 09 	sts	0x098B, r23	; 0x80098b <prevMillis+0x1>
     b78:	80 93 8c 09 	sts	0x098C, r24	; 0x80098c <prevMillis+0x2>
     b7c:	90 93 8d 09 	sts	0x098D, r25	; 0x80098d <prevMillis+0x3>
     b80:	8d b7       	in	r24, 0x3d	; 61
     b82:	9e b7       	in	r25, 0x3e	; 62
     b84:	4a 96       	adiw	r24, 0x1a	; 26
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	9e bf       	out	0x3e, r25	; 62
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	8d bf       	out	0x3d, r24	; 61
	}
}
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	08 95       	ret

00000b9a <set_State>:

uint8_t set_State(){
	I2C_LCD_clear();
     b9a:	17 de       	rcall	.-978    	; 0x7ca <I2C_LCD_clear>
	switch(num){
     b9c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <num>
     ba0:	83 30       	cpi	r24, 0x03	; 3
     ba2:	91 f0       	breq	.+36     	; 0xbc8 <set_State+0x2e>
     ba4:	28 f4       	brcc	.+10     	; 0xbb0 <set_State+0x16>
     ba6:	81 30       	cpi	r24, 0x01	; 1
     ba8:	f1 f0       	breq	.+60     	; 0xbe6 <set_State+0x4c>
     baa:	82 30       	cpi	r24, 0x02	; 2
     bac:	49 f0       	breq	.+18     	; 0xbc0 <set_State+0x26>
     bae:	16 c0       	rjmp	.+44     	; 0xbdc <set_State+0x42>
     bb0:	85 30       	cpi	r24, 0x05	; 5
     bb2:	71 f0       	breq	.+28     	; 0xbd0 <set_State+0x36>
     bb4:	18 f0       	brcs	.+6      	; 0xbbc <set_State+0x22>
     bb6:	86 30       	cpi	r24, 0x06	; 6
     bb8:	69 f0       	breq	.+26     	; 0xbd4 <set_State+0x3a>
     bba:	10 c0       	rjmp	.+32     	; 0xbdc <set_State+0x42>
		settingFlag = 1;
		return FEEDING_SETTING;
		break;
		
		case 4:
		return SHOW_SETTING;
     bbc:	85 e0       	ldi	r24, 0x05	; 5
     bbe:	08 95       	ret
		case 1:
		return SHOW_TH;
		break;
		
		case 2:
		settingFlag = 1;
     bc0:	91 e0       	ldi	r25, 0x01	; 1
     bc2:	90 93 62 09 	sts	0x0962, r25	; 0x800962 <settingFlag>
		return TIME_SETTING;
     bc6:	08 95       	ret
		break;
		
		case 3:
		settingFlag = 1;
     bc8:	91 e0       	ldi	r25, 0x01	; 1
     bca:	90 93 62 09 	sts	0x0962, r25	; 0x800962 <settingFlag>
		return FEEDING_SETTING;
     bce:	08 95       	ret
		case 4:
		return SHOW_SETTING;
		break;
		
		case 5:
		return FEEDING;
     bd0:	84 e0       	ldi	r24, 0x04	; 4
     bd2:	08 95       	ret
		break;
		
		case 6:
		settingFlag = 1;
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	90 93 62 09 	sts	0x0962, r25	; 0x800962 <settingFlag>
		return SERVO_SETTING;
     bda:	08 95       	ret
		break;
		
		default:
		BT_UART1_printf_string("Please, Press the Number from 1 to 4\n");
     bdc:	84 e3       	ldi	r24, 0x34	; 52
     bde:	93 e0       	ldi	r25, 0x03	; 3
		print_Menu();
     be0:	24 dd       	rcall	.-1464   	; 0x62a <BT_UART1_printf_string>
     be2:	a2 de       	rcall	.-700    	; 0x928 <print_Menu>
		return CLOCK;
     be4:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
}
     be6:	08 95       	ret

00000be8 <feeding>:

void feeding(uint8_t _quantity, uint8_t _servo_degree){
     be8:	ff 92       	push	r15
     bea:	0f 93       	push	r16
     bec:	1f 93       	push	r17
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
	for(int i = 0; i < _quantity; i++){
     bf2:	08 2f       	mov	r16, r24
     bf4:	10 e0       	ldi	r17, 0x00	; 0
     bf6:	10 16       	cp	r1, r16
     bf8:	11 06       	cpc	r1, r17
     bfa:	14 f5       	brge	.+68     	; 0xc40 <feeding+0x58>
     bfc:	f6 2e       	mov	r15, r22
     bfe:	c0 e0       	ldi	r28, 0x00	; 0
     c00:	d0 e0       	ldi	r29, 0x00	; 0
		// 서보모터 헌팅현상을 막기 위해 서보모터 동작 전/후 ON/OFF
		SERVO_DDR |= (1 << SERVO_SIG);
     c02:	bd 9a       	sbi	0x17, 5	; 23
		servo_Run(_servo_degree);
     c04:	8f 2d       	mov	r24, r15
     c06:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <servo_Run>
     c0a:	2f ef       	ldi	r18, 0xFF	; 255
     c0c:	8d e2       	ldi	r24, 0x2D	; 45
     c0e:	92 e2       	ldi	r25, 0x22	; 34
     c10:	21 50       	subi	r18, 0x01	; 1
     c12:	80 40       	sbci	r24, 0x00	; 0
     c14:	90 40       	sbci	r25, 0x00	; 0
     c16:	e1 f7       	brne	.-8      	; 0xc10 <feeding+0x28>
     c18:	00 c0       	rjmp	.+0      	; 0xc1a <feeding+0x32>
     c1a:	00 00       	nop
		_delay_ms(700);
		servo_Run(0);
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <servo_Run>
     c22:	2f ef       	ldi	r18, 0xFF	; 255
     c24:	8d e2       	ldi	r24, 0x2D	; 45
     c26:	92 e2       	ldi	r25, 0x22	; 34
     c28:	21 50       	subi	r18, 0x01	; 1
     c2a:	80 40       	sbci	r24, 0x00	; 0
     c2c:	90 40       	sbci	r25, 0x00	; 0
     c2e:	e1 f7       	brne	.-8      	; 0xc28 <feeding+0x40>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <feeding+0x4a>
     c32:	00 00       	nop
		_delay_ms(700);
		SERVO_DDR &= ~(1 << SERVO_SIG);
     c34:	bd 98       	cbi	0x17, 5	; 23
		buttonBuzzer();
     c36:	c9 da       	rcall	.-2670   	; 0x1ca <buttonBuzzer>
		break;
	}
}

void feeding(uint8_t _quantity, uint8_t _servo_degree){
	for(int i = 0; i < _quantity; i++){
     c38:	21 96       	adiw	r28, 0x01	; 1
     c3a:	c0 17       	cp	r28, r16
     c3c:	d1 07       	cpc	r29, r17
     c3e:	09 f7       	brne	.-62     	; 0xc02 <feeding+0x1a>
		servo_Run(0);
		_delay_ms(700);
		SERVO_DDR &= ~(1 << SERVO_SIG);
		buttonBuzzer();
	}
}
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	08 95       	ret

00000c4c <BT_transmit_TH>:

void BT_transmit_TH(){
	if(temp[0] == 0 || humi[0] == 0){
     c4c:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <temp>
     c50:	88 23       	and	r24, r24
     c52:	21 f0       	breq	.+8      	; 0xc5c <BT_transmit_TH+0x10>
     c54:	90 91 4b 09 	lds	r25, 0x094B	; 0x80094b <humi>
     c58:	91 11       	cpse	r25, r1
     c5a:	04 c0       	rjmp	.+8      	; 0xc64 <BT_transmit_TH+0x18>
		BT_UART1_printf_string("Please wait a moment for it to be measured.\n");
     c5c:	8a e5       	ldi	r24, 0x5A	; 90
     c5e:	93 e0       	ldi	r25, 0x03	; 3
     c60:	e4 cc       	rjmp	.-1592   	; 0x62a <BT_UART1_printf_string>
     c62:	08 95       	ret
	}
	else{
		sprintf(bt_buff,"Current Temp = %02d.%01d℃ , Humi = %02d.%01d", temp[0], temp[1], humi[0], humi[1]);
     c64:	20 91 4c 09 	lds	r18, 0x094C	; 0x80094c <humi+0x1>
     c68:	1f 92       	push	r1
     c6a:	2f 93       	push	r18
     c6c:	1f 92       	push	r1
     c6e:	9f 93       	push	r25
     c70:	90 91 4e 09 	lds	r25, 0x094E	; 0x80094e <temp+0x1>
     c74:	1f 92       	push	r1
     c76:	9f 93       	push	r25
     c78:	1f 92       	push	r1
     c7a:	8f 93       	push	r24
     c7c:	87 e8       	ldi	r24, 0x87	; 135
     c7e:	93 e0       	ldi	r25, 0x03	; 3
     c80:	9f 93       	push	r25
     c82:	8f 93       	push	r24
     c84:	88 eb       	ldi	r24, 0xB8	; 184
     c86:	99 e0       	ldi	r25, 0x09	; 9
     c88:	9f 93       	push	r25
     c8a:	8f 93       	push	r24
     c8c:	0e 94 1b 12 	call	0x2436	; 0x2436 <sprintf>
		BT_UART1_printf_string(bt_buff);
     c90:	88 eb       	ldi	r24, 0xB8	; 184
     c92:	99 e0       	ldi	r25, 0x09	; 9
     c94:	ca dc       	rcall	.-1644   	; 0x62a <BT_UART1_printf_string>
		BT_UART1_printf_string("%\n");
     c96:	86 eb       	ldi	r24, 0xB6	; 182
     c98:	93 e0       	ldi	r25, 0x03	; 3
     c9a:	c7 dc       	rcall	.-1650   	; 0x62a <BT_UART1_printf_string>
     c9c:	8d b7       	in	r24, 0x3d	; 61
     c9e:	9e b7       	in	r25, 0x3e	; 62
     ca0:	0c 96       	adiw	r24, 0x0c	; 12
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	f8 94       	cli
     ca6:	9e bf       	out	0x3e, r25	; 62
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	8d bf       	out	0x3d, r24	; 61
     cac:	08 95       	ret

00000cae <set_DS1302>:
	}
}

void set_DS1302(){
     cae:	0f 93       	push	r16
     cb0:	1f 93       	push	r17
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
	// DS1302 세팅
	switch (settingState){
     cb6:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <settingState>
     cba:	82 30       	cpi	r24, 0x02	; 2
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <set_DS1302+0x12>
     cbe:	ff c0       	rjmp	.+510    	; 0xebe <set_DS1302+0x210>
     cc0:	30 f4       	brcc	.+12     	; 0xcce <set_DS1302+0x20>
     cc2:	88 23       	and	r24, r24
     cc4:	69 f0       	breq	.+26     	; 0xce0 <set_DS1302+0x32>
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	09 f4       	brne	.+2      	; 0xccc <set_DS1302+0x1e>
     cca:	6d c0       	rjmp	.+218    	; 0xda6 <set_DS1302+0xf8>
     ccc:	41 c3       	rjmp	.+1666   	; 0x1350 <__stack+0x251>
     cce:	84 30       	cpi	r24, 0x04	; 4
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <set_DS1302+0x26>
     cd2:	f9 c1       	rjmp	.+1010   	; 0x10c6 <set_DS1302+0x418>
     cd4:	08 f4       	brcc	.+2      	; 0xcd8 <set_DS1302+0x2a>
     cd6:	95 c1       	rjmp	.+810    	; 0x1002 <set_DS1302+0x354>
     cd8:	85 30       	cpi	r24, 0x05	; 5
     cda:	09 f4       	brne	.+2      	; 0xcde <set_DS1302+0x30>
     cdc:	80 c2       	rjmp	.+1280   	; 0x11de <__stack+0xdf>
     cde:	38 c3       	rjmp	.+1648   	; 0x1350 <__stack+0x251>
		//---------- 날짜 설정 시작 ----------//
		case 0:
		if(input_flag == 0){
     ce0:	80 91 61 09 	lds	r24, 0x0961	; 0x800961 <input_flag>
     ce4:	81 11       	cpse	r24, r1
     ce6:	06 c0       	rjmp	.+12     	; 0xcf4 <set_DS1302+0x46>
			BT_UART1_printf_string("\nInput Current Year.\n>");
     ce8:	89 eb       	ldi	r24, 0xB9	; 185
     cea:	93 e0       	ldi	r25, 0x03	; 3
     cec:	9e dc       	rcall	.-1732   	; 0x62a <BT_UART1_printf_string>
			input_flag = 1;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	80 93 61 09 	sts	0x0961, r24	; 0x800961 <input_flag>
		}
		
		if(millis() - prevMillis > 500){
     cf4:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <millis>
     cf8:	00 91 8a 09 	lds	r16, 0x098A	; 0x80098a <prevMillis>
     cfc:	10 91 8b 09 	lds	r17, 0x098B	; 0x80098b <prevMillis+0x1>
     d00:	20 91 8c 09 	lds	r18, 0x098C	; 0x80098c <prevMillis+0x2>
     d04:	30 91 8d 09 	lds	r19, 0x098D	; 0x80098d <prevMillis+0x3>
     d08:	dc 01       	movw	r26, r24
     d0a:	cb 01       	movw	r24, r22
     d0c:	80 1b       	sub	r24, r16
     d0e:	91 0b       	sbc	r25, r17
     d10:	a2 0b       	sbc	r26, r18
     d12:	b3 0b       	sbc	r27, r19
     d14:	85 3f       	cpi	r24, 0xF5	; 245
     d16:	91 40       	sbci	r25, 0x01	; 1
     d18:	a1 05       	cpc	r26, r1
     d1a:	b1 05       	cpc	r27, r1
     d1c:	08 f1       	brcs	.+66     	; 0xd60 <set_DS1302+0xb2>
			if (blink_flag == 0){
     d1e:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <blink_flag>
     d22:	81 11       	cpse	r24, r1
     d24:	0d c0       	rjmp	.+26     	; 0xd40 <set_DS1302+0x92>
				I2C_LCD_write_string_XY(0, 0, "||DATE SETING|| ");
     d26:	40 ed       	ldi	r20, 0xD0	; 208
     d28:	53 e0       	ldi	r21, 0x03	; 3
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	95 dd       	rcall	.-1238   	; 0x858 <I2C_LCD_write_string_XY>
				I2C_LCD_write_string_XY(1, 0, "   20YY.MM.DD   ");
     d2e:	41 ee       	ldi	r20, 0xE1	; 225
     d30:	53 e0       	ldi	r21, 0x03	; 3
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 dd       	rcall	.-1248   	; 0x858 <I2C_LCD_write_string_XY>
				blink_flag = 1;
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	80 93 5f 09 	sts	0x095F, r24	; 0x80095f <blink_flag>
     d3e:	07 c0       	rjmp	.+14     	; 0xd4e <set_DS1302+0xa0>
			}
			else{
				I2C_LCD_write_string_XY(1, 0, "   20--.MM.DD   ");
     d40:	42 ef       	ldi	r20, 0xF2	; 242
     d42:	53 e0       	ldi	r21, 0x03	; 3
     d44:	60 e0       	ldi	r22, 0x00	; 0
     d46:	81 e0       	ldi	r24, 0x01	; 1
				blink_flag = 0;
     d48:	87 dd       	rcall	.-1266   	; 0x858 <I2C_LCD_write_string_XY>
     d4a:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <blink_flag>
			}
			prevMillis = millis();
     d4e:	fd d7       	rcall	.+4090   	; 0x1d4a <millis>
     d50:	60 93 8a 09 	sts	0x098A, r22	; 0x80098a <prevMillis>
     d54:	70 93 8b 09 	sts	0x098B, r23	; 0x80098b <prevMillis+0x1>
     d58:	80 93 8c 09 	sts	0x098C, r24	; 0x80098c <prevMillis+0x2>
     d5c:	90 93 8d 09 	sts	0x098D, r25	; 0x80098d <prevMillis+0x3>
		}
		
		if(BT_isRxString()){
     d60:	72 dc       	rcall	.-1820   	; 0x646 <BT_isRxString>
     d62:	88 23       	and	r24, r24
     d64:	09 f4       	brne	.+2      	; 0xd68 <set_DS1302+0xba>
			receiveData = BT_getRxString();
     d66:	f4 c2       	rjmp	.+1512   	; 0x1350 <__stack+0x251>
     d68:	71 dc       	rcall	.-1822   	; 0x64c <BT_getRxString>
     d6a:	90 93 a3 09 	sts	0x09A3, r25	; 0x8009a3 <receiveData+0x1>
			BT_UART1_printf_string(receiveData);
     d6e:	80 93 a2 09 	sts	0x09A2, r24	; 0x8009a2 <receiveData>
			BT_UART1_printf_string("\n");
     d72:	5b dc       	rcall	.-1866   	; 0x62a <BT_UART1_printf_string>
     d74:	81 e1       	ldi	r24, 0x11	; 17
     d76:	96 e0       	ldi	r25, 0x06	; 6
     d78:	58 dc       	rcall	.-1872   	; 0x62a <BT_UART1_printf_string>
			
			stTime.year = atoi(receiveData);
     d7a:	80 91 a2 09 	lds	r24, 0x09A2	; 0x8009a2 <receiveData>
     d7e:	90 91 a3 09 	lds	r25, 0x09A3	; 0x8009a3 <receiveData+0x1>
     d82:	0e 94 cc 11 	call	0x2398	; 0x2398 <atoi>
     d86:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <stTime+0x6>
			
			input_flag = 0;
     d8a:	10 92 61 09 	sts	0x0961, r1	; 0x800961 <input_flag>
			blink_flag = 0;
     d8e:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <blink_flag>
			settingState = 1;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <settingState>
     d98:	8f e3       	ldi	r24, 0x3F	; 63
     d9a:	9f e1       	ldi	r25, 0x1F	; 31
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	f1 f7       	brne	.-4      	; 0xd9c <set_DS1302+0xee>
     da0:	00 c0       	rjmp	.+0      	; 0xda2 <set_DS1302+0xf4>
     da2:	00 00       	nop
		}
		break;
		
		
		case 1:
		if(input_flag == 0){
     da4:	d5 c2       	rjmp	.+1450   	; 0x1350 <__stack+0x251>
     da6:	80 91 61 09 	lds	r24, 0x0961	; 0x800961 <input_flag>
			BT_UART1_printf_string("\nInput Current Month.\n>");
     daa:	81 11       	cpse	r24, r1
     dac:	06 c0       	rjmp	.+12     	; 0xdba <set_DS1302+0x10c>
     dae:	83 e0       	ldi	r24, 0x03	; 3
     db0:	94 e0       	ldi	r25, 0x04	; 4
			input_flag = 1;
     db2:	3b dc       	rcall	.-1930   	; 0x62a <BT_UART1_printf_string>
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	80 93 61 09 	sts	0x0961, r24	; 0x800961 <input_flag>
		}
		
		if(millis() - prevMillis > 500){
     dba:	c7 d7       	rcall	.+3982   	; 0x1d4a <millis>
     dbc:	00 91 8a 09 	lds	r16, 0x098A	; 0x80098a <prevMillis>
     dc0:	10 91 8b 09 	lds	r17, 0x098B	; 0x80098b <prevMillis+0x1>
     dc4:	20 91 8c 09 	lds	r18, 0x098C	; 0x80098c <prevMillis+0x2>
     dc8:	30 91 8d 09 	lds	r19, 0x098D	; 0x80098d <prevMillis+0x3>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	80 1b       	sub	r24, r16
     dd2:	91 0b       	sbc	r25, r17
     dd4:	a2 0b       	sbc	r26, r18
     dd6:	b3 0b       	sbc	r27, r19
     dd8:	85 3f       	cpi	r24, 0xF5	; 245
     dda:	91 40       	sbci	r25, 0x01	; 1
     ddc:	a1 05       	cpc	r26, r1
     dde:	b1 05       	cpc	r27, r1
     de0:	08 f4       	brcc	.+2      	; 0xde4 <set_DS1302+0x136>
     de2:	4a c0       	rjmp	.+148    	; 0xe78 <set_DS1302+0x1ca>
			if (blink_flag == 0){
     de4:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <blink_flag>
     de8:	81 11       	cpse	r24, r1
     dea:	22 c0       	rjmp	.+68     	; 0xe30 <set_DS1302+0x182>
				sprintf(buff, "   20%02d.MM.DD   ", stTime.year);
     dec:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <stTime+0x6>
     df0:	1f 92       	push	r1
     df2:	8f 93       	push	r24
     df4:	8b e1       	ldi	r24, 0x1B	; 27
     df6:	94 e0       	ldi	r25, 0x04	; 4
     df8:	9f 93       	push	r25
     dfa:	8f 93       	push	r24
     dfc:	8e e8       	ldi	r24, 0x8E	; 142
     dfe:	99 e0       	ldi	r25, 0x09	; 9
     e00:	9f 93       	push	r25
     e02:	8f 93       	push	r24
     e04:	0e 94 1b 12 	call	0x2436	; 0x2436 <sprintf>
				I2C_LCD_write_string_XY(0, 0, "||DATE SETING|| ");
     e08:	40 ed       	ldi	r20, 0xD0	; 208
     e0a:	53 e0       	ldi	r21, 0x03	; 3
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	80 e0       	ldi	r24, 0x00	; 0
				I2C_LCD_write_string_XY(1, 0, buff);
     e10:	23 dd       	rcall	.-1466   	; 0x858 <I2C_LCD_write_string_XY>
     e12:	4e e8       	ldi	r20, 0x8E	; 142
     e14:	59 e0       	ldi	r21, 0x09	; 9
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	1e dd       	rcall	.-1476   	; 0x858 <I2C_LCD_write_string_XY>
				blink_flag = 1;
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	80 93 5f 09 	sts	0x095F, r24	; 0x80095f <blink_flag>
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	1b c0       	rjmp	.+54     	; 0xe66 <set_DS1302+0x1b8>
			}
			else{
				sprintf(buff, "   20%02d.--.DD   ", stTime.year);
     e30:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <stTime+0x6>
     e34:	1f 92       	push	r1
     e36:	8f 93       	push	r24
     e38:	8e e2       	ldi	r24, 0x2E	; 46
     e3a:	94 e0       	ldi	r25, 0x04	; 4
     e3c:	9f 93       	push	r25
     e3e:	8f 93       	push	r24
     e40:	8e e8       	ldi	r24, 0x8E	; 142
     e42:	99 e0       	ldi	r25, 0x09	; 9
     e44:	9f 93       	push	r25
     e46:	8f 93       	push	r24
     e48:	0e 94 1b 12 	call	0x2436	; 0x2436 <sprintf>
				I2C_LCD_write_string_XY(1, 0, buff);
     e4c:	4e e8       	ldi	r20, 0x8E	; 142
     e4e:	59 e0       	ldi	r21, 0x09	; 9
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	81 e0       	ldi	r24, 0x01	; 1
				blink_flag = 0;
     e54:	01 dd       	rcall	.-1534   	; 0x858 <I2C_LCD_write_string_XY>
     e56:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <blink_flag>
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
			}
			prevMillis = millis();
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	71 d7       	rcall	.+3810   	; 0x1d4a <millis>
     e68:	60 93 8a 09 	sts	0x098A, r22	; 0x80098a <prevMillis>
     e6c:	70 93 8b 09 	sts	0x098B, r23	; 0x80098b <prevMillis+0x1>
     e70:	80 93 8c 09 	sts	0x098C, r24	; 0x80098c <prevMillis+0x2>
		}
		
		if(BT_isRxString()){
     e74:	90 93 8d 09 	sts	0x098D, r25	; 0x80098d <prevMillis+0x3>
     e78:	e6 db       	rcall	.-2100   	; 0x646 <BT_isRxString>
     e7a:	88 23       	and	r24, r24
			receiveData = BT_getRxString();
     e7c:	09 f4       	brne	.+2      	; 0xe80 <set_DS1302+0x1d2>
     e7e:	68 c2       	rjmp	.+1232   	; 0x1350 <__stack+0x251>
     e80:	e5 db       	rcall	.-2102   	; 0x64c <BT_getRxString>
     e82:	90 93 a3 09 	sts	0x09A3, r25	; 0x8009a3 <receiveData+0x1>
     e86:	80 93 a2 09 	sts	0x09A2, r24	; 0x8009a2 <receiveData>
			BT_UART1_printf_string(receiveData);
     e8a:	cf db       	rcall	.-2146   	; 0x62a <BT_UART1_printf_string>
			BT_UART1_printf_string("\n");
     e8c:	81 e1       	ldi	r24, 0x11	; 17
     e8e:	96 e0       	ldi	r25, 0x06	; 6
     e90:	cc db       	rcall	.-2152   	; 0x62a <BT_UART1_printf_string>
     e92:	80 91 a2 09 	lds	r24, 0x09A2	; 0x8009a2 <receiveData>
			
			stTime.month = atoi(receiveData);
     e96:	90 91 a3 09 	lds	r25, 0x09A3	; 0x8009a3 <receiveData+0x1>
     e9a:	0e 94 cc 11 	call	0x2398	; 0x2398 <atoi>
     e9e:	80 93 71 09 	sts	0x0971, r24	; 0x800971 <stTime+0x4>
     ea2:	10 92 61 09 	sts	0x0961, r1	; 0x800961 <input_flag>
			
			input_flag = 0;
     ea6:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <blink_flag>
			blink_flag = 0;
			settingState = 2;
     eaa:	82 e0       	ldi	r24, 0x02	; 2
     eac:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <settingState>
     eb0:	8f e3       	ldi	r24, 0x3F	; 63
     eb2:	9f e1       	ldi	r25, 0x1F	; 31
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	f1 f7       	brne	.-4      	; 0xeb4 <set_DS1302+0x206>
     eb8:	00 c0       	rjmp	.+0      	; 0xeba <set_DS1302+0x20c>
     eba:	00 00       	nop
		}
		break;
		
		
		case 2:
		if(input_flag == 0){
     ebc:	49 c2       	rjmp	.+1170   	; 0x1350 <__stack+0x251>
     ebe:	80 91 61 09 	lds	r24, 0x0961	; 0x800961 <input_flag>
     ec2:	81 11       	cpse	r24, r1
			BT_UART1_printf_string("\nInput Current Date.\n>");
     ec4:	06 c0       	rjmp	.+12     	; 0xed2 <set_DS1302+0x224>
     ec6:	81 e4       	ldi	r24, 0x41	; 65
     ec8:	94 e0       	ldi	r25, 0x04	; 4
     eca:	af db       	rcall	.-2210   	; 0x62a <BT_UART1_printf_string>
			input_flag = 1;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	80 93 61 09 	sts	0x0961, r24	; 0x800961 <input_flag>
		}
		
		if(millis() - prevMillis > 500){
     ed2:	3b d7       	rcall	.+3702   	; 0x1d4a <millis>
     ed4:	00 91 8a 09 	lds	r16, 0x098A	; 0x80098a <prevMillis>
     ed8:	10 91 8b 09 	lds	r17, 0x098B	; 0x80098b <prevMillis+0x1>
     edc:	20 91 8c 09 	lds	r18, 0x098C	; 0x80098c <prevMillis+0x2>
     ee0:	30 91 8d 09 	lds	r19, 0x098D	; 0x80098d <prevMillis+0x3>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	80 1b       	sub	r24, r16
     eea:	91 0b       	sbc	r25, r17
     eec:	a2 0b       	sbc	r26, r18
     eee:	b3 0b       	sbc	r27, r19
     ef0:	85 3f       	cpi	r24, 0xF5	; 245
     ef2:	91 40       	sbci	r25, 0x01	; 1
     ef4:	a1 05       	cpc	r26, r1
     ef6:	b1 05       	cpc	r27, r1
     ef8:	08 f4       	brcc	.+2      	; 0xefc <set_DS1302+0x24e>
     efa:	56 c0       	rjmp	.+172    	; 0xfa8 <set_DS1302+0x2fa>
     efc:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <blink_flag>
			if (blink_flag == 0){
     f00:	81 11       	cpse	r24, r1
     f02:	28 c0       	rjmp	.+80     	; 0xf54 <set_DS1302+0x2a6>
     f04:	ed e6       	ldi	r30, 0x6D	; 109
				sprintf(buff, "   20%02d.%02d.DD   ", stTime.year, stTime.month);
     f06:	f9 e0       	ldi	r31, 0x09	; 9
     f08:	84 81       	ldd	r24, Z+4	; 0x04
     f0a:	1f 92       	push	r1
     f0c:	8f 93       	push	r24
     f0e:	86 81       	ldd	r24, Z+6	; 0x06
     f10:	1f 92       	push	r1
     f12:	8f 93       	push	r24
     f14:	88 e5       	ldi	r24, 0x58	; 88
     f16:	94 e0       	ldi	r25, 0x04	; 4
     f18:	9f 93       	push	r25
     f1a:	8f 93       	push	r24
     f1c:	8e e8       	ldi	r24, 0x8E	; 142
     f1e:	99 e0       	ldi	r25, 0x09	; 9
     f20:	9f 93       	push	r25
     f22:	8f 93       	push	r24
     f24:	0e 94 1b 12 	call	0x2436	; 0x2436 <sprintf>
				I2C_LCD_write_string_XY(0, 0, "||DATE SETING|| ");
     f28:	40 ed       	ldi	r20, 0xD0	; 208
     f2a:	53 e0       	ldi	r21, 0x03	; 3
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	93 dc       	rcall	.-1754   	; 0x858 <I2C_LCD_write_string_XY>
				I2C_LCD_write_string_XY(1, 0, buff);
     f32:	4e e8       	ldi	r20, 0x8E	; 142
     f34:	59 e0       	ldi	r21, 0x09	; 9
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	8e dc       	rcall	.-1764   	; 0x858 <I2C_LCD_write_string_XY>
     f3c:	81 e0       	ldi	r24, 0x01	; 1
				blink_flag = 1;
     f3e:	80 93 5f 09 	sts	0x095F, r24	; 0x80095f <blink_flag>
     f42:	8d b7       	in	r24, 0x3d	; 61
     f44:	9e b7       	in	r25, 0x3e	; 62
     f46:	08 96       	adiw	r24, 0x08	; 8
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	f8 94       	cli
     f4c:	9e bf       	out	0x3e, r25	; 62
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	8d bf       	out	0x3d, r24	; 61
     f52:	21 c0       	rjmp	.+66     	; 0xf96 <set_DS1302+0x2e8>
     f54:	ed e6       	ldi	r30, 0x6D	; 109
			}
			else{
				sprintf(buff, "   20%02d.%02d.--   ", stTime.year, stTime.month);
     f56:	f9 e0       	ldi	r31, 0x09	; 9
     f58:	84 81       	ldd	r24, Z+4	; 0x04
     f5a:	1f 92       	push	r1
     f5c:	8f 93       	push	r24
     f5e:	86 81       	ldd	r24, Z+6	; 0x06
     f60:	1f 92       	push	r1
     f62:	8f 93       	push	r24
     f64:	8d e6       	ldi	r24, 0x6D	; 109
     f66:	94 e0       	ldi	r25, 0x04	; 4
     f68:	9f 93       	push	r25
     f6a:	8f 93       	push	r24
     f6c:	8e e8       	ldi	r24, 0x8E	; 142
     f6e:	99 e0       	ldi	r25, 0x09	; 9
     f70:	9f 93       	push	r25
     f72:	8f 93       	push	r24
     f74:	0e 94 1b 12 	call	0x2436	; 0x2436 <sprintf>
				I2C_LCD_write_string_XY(1, 0, buff);
     f78:	4e e8       	ldi	r20, 0x8E	; 142
     f7a:	59 e0       	ldi	r21, 0x09	; 9
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
				blink_flag = 0;
     f80:	6b dc       	rcall	.-1834   	; 0x858 <I2C_LCD_write_string_XY>
     f82:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <blink_flag>
     f86:	8d b7       	in	r24, 0x3d	; 61
     f88:	9e b7       	in	r25, 0x3e	; 62
     f8a:	08 96       	adiw	r24, 0x08	; 8
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
			}
			prevMillis = millis();
     f90:	9e bf       	out	0x3e, r25	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	8d bf       	out	0x3d, r24	; 61
     f96:	d9 d6       	rcall	.+3506   	; 0x1d4a <millis>
     f98:	60 93 8a 09 	sts	0x098A, r22	; 0x80098a <prevMillis>
     f9c:	70 93 8b 09 	sts	0x098B, r23	; 0x80098b <prevMillis+0x1>
     fa0:	80 93 8c 09 	sts	0x098C, r24	; 0x80098c <prevMillis+0x2>
		}
		
		if(BT_isRxString()){
     fa4:	90 93 8d 09 	sts	0x098D, r25	; 0x80098d <prevMillis+0x3>
     fa8:	4e db       	rcall	.-2404   	; 0x646 <BT_isRxString>
     faa:	88 23       	and	r24, r24
     fac:	09 f4       	brne	.+2      	; 0xfb0 <set_DS1302+0x302>
			receiveData = BT_getRxString();
     fae:	d0 c1       	rjmp	.+928    	; 0x1350 <__stack+0x251>
     fb0:	4d db       	rcall	.-2406   	; 0x64c <BT_getRxString>
     fb2:	90 93 a3 09 	sts	0x09A3, r25	; 0x8009a3 <receiveData+0x1>
     fb6:	80 93 a2 09 	sts	0x09A2, r24	; 0x8009a2 <receiveData>
			BT_UART1_printf_string(receiveData);
     fba:	37 db       	rcall	.-2450   	; 0x62a <BT_UART1_printf_string>
			BT_UART1_printf_string("\n");
     fbc:	81 e1       	ldi	r24, 0x11	; 17
     fbe:	96 e0       	ldi	r25, 0x06	; 6
     fc0:	34 db       	rcall	.-2456   	; 0x62a <BT_UART1_printf_string>
     fc2:	80 91 a2 09 	lds	r24, 0x09A2	; 0x8009a2 <receiveData>
			
			stTime.date = atoi(receiveData);
     fc6:	90 91 a3 09 	lds	r25, 0x09A3	; 0x8009a3 <receiveData+0x1>
     fca:	0e 94 cc 11 	call	0x2398	; 0x2398 <atoi>
     fce:	cd e6       	ldi	r28, 0x6D	; 109
     fd0:	d9 e0       	ldi	r29, 0x09	; 9
     fd2:	8b 83       	std	Y+3, r24	; 0x03
     fd4:	2e 81       	ldd	r18, Y+6	; 0x06
			// 요일 계산
			stTime.dayofweek = getDayofWeek((2000+stTime.year), stTime.month, stTime.date);
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	48 2f       	mov	r20, r24
     fda:	6c 81       	ldd	r22, Y+4	; 0x04
     fdc:	c9 01       	movw	r24, r18
     fde:	80 53       	subi	r24, 0x30	; 48
     fe0:	98 4f       	sbci	r25, 0xF8	; 248
     fe2:	24 d7       	rcall	.+3656   	; 0x1e2c <getDayofWeek>
     fe4:	8d 83       	std	Y+5, r24	; 0x05
			
			input_flag = 0;
     fe6:	10 92 61 09 	sts	0x0961, r1	; 0x800961 <input_flag>
			blink_flag = 0;
     fea:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <blink_flag>
			settingState = 3;
     fee:	83 e0       	ldi	r24, 0x03	; 3
     ff0:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <settingState>
     ff4:	8f e3       	ldi	r24, 0x3F	; 63
     ff6:	9f e1       	ldi	r25, 0x1F	; 31
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <set_DS1302+0x34a>
     ffc:	00 c0       	rjmp	.+0      	; 0xffe <set_DS1302+0x350>
     ffe:	00 00       	nop
    1000:	a7 c1       	rjmp	.+846    	; 0x1350 <__stack+0x251>
		}
		break;
		//---------- 날짜 설정 끝 ----------//
		//---------- 시간 설정 시작 ----------//
		case 3:
		if(input_flag == 0){
    1002:	80 91 61 09 	lds	r24, 0x0961	; 0x800961 <input_flag>
    1006:	81 11       	cpse	r24, r1
    1008:	06 c0       	rjmp	.+12     	; 0x1016 <set_DS1302+0x368>
			BT_UART1_printf_string("\nInput Current Hour.\n>");
    100a:	82 e8       	ldi	r24, 0x82	; 130
    100c:	94 e0       	ldi	r25, 0x04	; 4
    100e:	0d db       	rcall	.-2534   	; 0x62a <BT_UART1_printf_string>
    1010:	81 e0       	ldi	r24, 0x01	; 1
			input_flag = 1;
    1012:	80 93 61 09 	sts	0x0961, r24	; 0x800961 <input_flag>
		}
		
		if(millis() - prevMillis > 500){
    1016:	99 d6       	rcall	.+3378   	; 0x1d4a <millis>
    1018:	00 91 8a 09 	lds	r16, 0x098A	; 0x80098a <prevMillis>
    101c:	10 91 8b 09 	lds	r17, 0x098B	; 0x80098b <prevMillis+0x1>
    1020:	20 91 8c 09 	lds	r18, 0x098C	; 0x80098c <prevMillis+0x2>
    1024:	30 91 8d 09 	lds	r19, 0x098D	; 0x80098d <prevMillis+0x3>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	80 1b       	sub	r24, r16
    102e:	91 0b       	sbc	r25, r17
    1030:	a2 0b       	sbc	r26, r18
    1032:	b3 0b       	sbc	r27, r19
    1034:	85 3f       	cpi	r24, 0xF5	; 245
    1036:	91 40       	sbci	r25, 0x01	; 1
    1038:	a1 05       	cpc	r26, r1
			if (blink_flag == 0){
    103a:	b1 05       	cpc	r27, r1
    103c:	08 f1       	brcs	.+66     	; 0x1080 <set_DS1302+0x3d2>
    103e:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <blink_flag>
				I2C_LCD_write_string_XY(0, 0, "<<TIME SETING>> ");
    1042:	81 11       	cpse	r24, r1
    1044:	0d c0       	rjmp	.+26     	; 0x1060 <set_DS1302+0x3b2>
    1046:	49 e9       	ldi	r20, 0x99	; 153
				I2C_LCD_write_string_XY(1, 0, "    HH:MM:SS    ");
    1048:	54 e0       	ldi	r21, 0x04	; 4
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	05 dc       	rcall	.-2038   	; 0x858 <I2C_LCD_write_string_XY>
    104e:	4a ea       	ldi	r20, 0xAA	; 170
    1050:	54 e0       	ldi	r21, 0x04	; 4
				blink_flag = 1;
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	00 dc       	rcall	.-2048   	; 0x858 <I2C_LCD_write_string_XY>
			}
			else{
				I2C_LCD_write_string_XY(1, 0, "    --:MM:SS    ");
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	80 93 5f 09 	sts	0x095F, r24	; 0x80095f <blink_flag>
    105e:	07 c0       	rjmp	.+14     	; 0x106e <set_DS1302+0x3c0>
    1060:	4b eb       	ldi	r20, 0xBB	; 187
    1062:	54 e0       	ldi	r21, 0x04	; 4
				blink_flag = 0;
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	81 e0       	ldi	r24, 0x01	; 1
			}
			prevMillis = millis();
    1068:	f7 db       	rcall	.-2066   	; 0x858 <I2C_LCD_write_string_XY>
    106a:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <blink_flag>
    106e:	6d d6       	rcall	.+3290   	; 0x1d4a <millis>
    1070:	60 93 8a 09 	sts	0x098A, r22	; 0x80098a <prevMillis>
    1074:	70 93 8b 09 	sts	0x098B, r23	; 0x80098b <prevMillis+0x1>
    1078:	80 93 8c 09 	sts	0x098C, r24	; 0x80098c <prevMillis+0x2>
		}
		
		if(BT_isRxString()){
    107c:	90 93 8d 09 	sts	0x098D, r25	; 0x80098d <prevMillis+0x3>
    1080:	e2 da       	rcall	.-2620   	; 0x646 <BT_isRxString>
    1082:	88 23       	and	r24, r24
    1084:	09 f4       	brne	.+2      	; 0x1088 <set_DS1302+0x3da>
			receiveData = BT_getRxString();
    1086:	64 c1       	rjmp	.+712    	; 0x1350 <__stack+0x251>
    1088:	e1 da       	rcall	.-2622   	; 0x64c <BT_getRxString>
    108a:	90 93 a3 09 	sts	0x09A3, r25	; 0x8009a3 <receiveData+0x1>
    108e:	80 93 a2 09 	sts	0x09A2, r24	; 0x8009a2 <receiveData>
			BT_UART1_printf_string(receiveData);
			BT_UART1_printf_string("\n");
    1092:	cb da       	rcall	.-2666   	; 0x62a <BT_UART1_printf_string>
    1094:	81 e1       	ldi	r24, 0x11	; 17
    1096:	96 e0       	ldi	r25, 0x06	; 6
    1098:	c8 da       	rcall	.-2672   	; 0x62a <BT_UART1_printf_string>
			
			stTime.hour = atoi(receiveData);
    109a:	80 91 a2 09 	lds	r24, 0x09A2	; 0x8009a2 <receiveData>
    109e:	90 91 a3 09 	lds	r25, 0x09A3	; 0x8009a3 <receiveData+0x1>
    10a2:	0e 94 cc 11 	call	0x2398	; 0x2398 <atoi>
    10a6:	80 93 6f 09 	sts	0x096F, r24	; 0x80096f <stTime+0x2>
			
			input_flag = 0;
    10aa:	10 92 61 09 	sts	0x0961, r1	; 0x800961 <input_flag>
			blink_flag = 0;
    10ae:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <blink_flag>
			settingState = 4;
    10b2:	84 e0       	ldi	r24, 0x04	; 4
    10b4:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <settingState>
    10b8:	8f e3       	ldi	r24, 0x3F	; 63
    10ba:	9f e1       	ldi	r25, 0x1F	; 31
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	f1 f7       	brne	.-4      	; 0x10bc <set_DS1302+0x40e>
    10c0:	00 c0       	rjmp	.+0      	; 0x10c2 <set_DS1302+0x414>
    10c2:	00 00       	nop
    10c4:	45 c1       	rjmp	.+650    	; 0x1350 <__stack+0x251>
		}
		break;
		
		
		case 4:
		if(input_flag == 0){
    10c6:	80 91 61 09 	lds	r24, 0x0961	; 0x800961 <input_flag>
    10ca:	81 11       	cpse	r24, r1
    10cc:	06 c0       	rjmp	.+12     	; 0x10da <set_DS1302+0x42c>
			BT_UART1_printf_string("\nInput Current Minute.\n>");
    10ce:	8c ec       	ldi	r24, 0xCC	; 204
    10d0:	94 e0       	ldi	r25, 0x04	; 4
    10d2:	ab da       	rcall	.-2730   	; 0x62a <BT_UART1_printf_string>
    10d4:	81 e0       	ldi	r24, 0x01	; 1
			input_flag = 1;
    10d6:	80 93 61 09 	sts	0x0961, r24	; 0x800961 <input_flag>
    10da:	37 d6       	rcall	.+3182   	; 0x1d4a <millis>
		}
		
		if(millis() - prevMillis > 500){
    10dc:	00 91 8a 09 	lds	r16, 0x098A	; 0x80098a <prevMillis>
    10e0:	10 91 8b 09 	lds	r17, 0x098B	; 0x80098b <prevMillis+0x1>
    10e4:	20 91 8c 09 	lds	r18, 0x098C	; 0x80098c <prevMillis+0x2>
    10e8:	30 91 8d 09 	lds	r19, 0x098D	; 0x80098d <prevMillis+0x3>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	80 1b       	sub	r24, r16
    10f2:	91 0b       	sbc	r25, r17
    10f4:	a2 0b       	sbc	r26, r18
    10f6:	b3 0b       	sbc	r27, r19
    10f8:	85 3f       	cpi	r24, 0xF5	; 245
    10fa:	91 40       	sbci	r25, 0x01	; 1
    10fc:	a1 05       	cpc	r26, r1
    10fe:	b1 05       	cpc	r27, r1
    1100:	08 f4       	brcc	.+2      	; 0x1104 <__stack+0x5>
    1102:	4a c0       	rjmp	.+148    	; 0x1198 <__stack+0x99>
			if (blink_flag == 0){
    1104:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <blink_flag>
    1108:	81 11       	cpse	r24, r1
    110a:	22 c0       	rjmp	.+68     	; 0x1150 <__stack+0x51>
				sprintf(buff, "    %02d:MM:SS    ", stTime.hour);
    110c:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <stTime+0x2>
    1110:	1f 92       	push	r1
    1112:	8f 93       	push	r24
    1114:	85 ee       	ldi	r24, 0xE5	; 229
    1116:	94 e0       	ldi	r25, 0x04	; 4
    1118:	9f 93       	push	r25
    111a:	8f 93       	push	r24
    111c:	8e e8       	ldi	r24, 0x8E	; 142
    111e:	99 e0       	ldi	r25, 0x09	; 9
    1120:	9f 93       	push	r25
    1122:	8f 93       	push	r24
    1124:	0e 94 1b 12 	call	0x2436	; 0x2436 <sprintf>
				I2C_LCD_write_string_XY(0, 0, "<<TIME SETING>> ");
    1128:	49 e9       	ldi	r20, 0x99	; 153
    112a:	54 e0       	ldi	r21, 0x04	; 4
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	93 db       	rcall	.-2266   	; 0x858 <I2C_LCD_write_string_XY>
				I2C_LCD_write_string_XY(1, 0, buff);
    1132:	4e e8       	ldi	r20, 0x8E	; 142
    1134:	59 e0       	ldi	r21, 0x09	; 9
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	8e db       	rcall	.-2276   	; 0x858 <I2C_LCD_write_string_XY>
				blink_flag = 1;
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	80 93 5f 09 	sts	0x095F, r24	; 0x80095f <blink_flag>
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
			}
			else{
				sprintf(buff, "    %02d:--:SS    ", stTime.hour);
    114c:	0f 90       	pop	r0
    114e:	1b c0       	rjmp	.+54     	; 0x1186 <__stack+0x87>
    1150:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <stTime+0x2>
    1154:	1f 92       	push	r1
    1156:	8f 93       	push	r24
    1158:	88 ef       	ldi	r24, 0xF8	; 248
    115a:	94 e0       	ldi	r25, 0x04	; 4
    115c:	9f 93       	push	r25
    115e:	8f 93       	push	r24
    1160:	8e e8       	ldi	r24, 0x8E	; 142
    1162:	99 e0       	ldi	r25, 0x09	; 9
				I2C_LCD_write_string_XY(1, 0, buff);
    1164:	9f 93       	push	r25
    1166:	8f 93       	push	r24
    1168:	0e 94 1b 12 	call	0x2436	; 0x2436 <sprintf>
    116c:	4e e8       	ldi	r20, 0x8E	; 142
    116e:	59 e0       	ldi	r21, 0x09	; 9
				blink_flag = 0;
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	71 db       	rcall	.-2334   	; 0x858 <I2C_LCD_write_string_XY>
    1176:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <blink_flag>
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
			}
			prevMillis = millis();
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	e1 d5       	rcall	.+3010   	; 0x1d4a <millis>
    1188:	60 93 8a 09 	sts	0x098A, r22	; 0x80098a <prevMillis>
    118c:	70 93 8b 09 	sts	0x098B, r23	; 0x80098b <prevMillis+0x1>
    1190:	80 93 8c 09 	sts	0x098C, r24	; 0x80098c <prevMillis+0x2>
		}
		
		if(BT_isRxString()){
    1194:	90 93 8d 09 	sts	0x098D, r25	; 0x80098d <prevMillis+0x3>
    1198:	56 da       	rcall	.-2900   	; 0x646 <BT_isRxString>
			receiveData = BT_getRxString();
    119a:	88 23       	and	r24, r24
    119c:	09 f4       	brne	.+2      	; 0x11a0 <__stack+0xa1>
    119e:	d8 c0       	rjmp	.+432    	; 0x1350 <__stack+0x251>
    11a0:	55 da       	rcall	.-2902   	; 0x64c <BT_getRxString>
    11a2:	90 93 a3 09 	sts	0x09A3, r25	; 0x8009a3 <receiveData+0x1>
			BT_UART1_printf_string(receiveData);
    11a6:	80 93 a2 09 	sts	0x09A2, r24	; 0x8009a2 <receiveData>
			BT_UART1_printf_string("\n");
    11aa:	3f da       	rcall	.-2946   	; 0x62a <BT_UART1_printf_string>
    11ac:	81 e1       	ldi	r24, 0x11	; 17
    11ae:	96 e0       	ldi	r25, 0x06	; 6
    11b0:	3c da       	rcall	.-2952   	; 0x62a <BT_UART1_printf_string>
			
			stTime.minutes = atoi(receiveData);
    11b2:	80 91 a2 09 	lds	r24, 0x09A2	; 0x8009a2 <receiveData>
    11b6:	90 91 a3 09 	lds	r25, 0x09A3	; 0x8009a3 <receiveData+0x1>
    11ba:	0e 94 cc 11 	call	0x2398	; 0x2398 <atoi>
    11be:	80 93 6e 09 	sts	0x096E, r24	; 0x80096e <stTime+0x1>
			
			input_flag = 0;
    11c2:	10 92 61 09 	sts	0x0961, r1	; 0x800961 <input_flag>
			blink_flag = 0;
    11c6:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <blink_flag>
			settingState = 5;
    11ca:	85 e0       	ldi	r24, 0x05	; 5
    11cc:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <settingState>
    11d0:	8f e3       	ldi	r24, 0x3F	; 63
    11d2:	9f e1       	ldi	r25, 0x1F	; 31
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	f1 f7       	brne	.-4      	; 0x11d4 <__stack+0xd5>
    11d8:	00 c0       	rjmp	.+0      	; 0x11da <__stack+0xdb>
    11da:	00 00       	nop
    11dc:	b9 c0       	rjmp	.+370    	; 0x1350 <__stack+0x251>
		}
		break;
		
		
		case 5:
		if(input_flag == 0){
    11de:	80 91 61 09 	lds	r24, 0x0961	; 0x800961 <input_flag>
    11e2:	81 11       	cpse	r24, r1
    11e4:	06 c0       	rjmp	.+12     	; 0x11f2 <__stack+0xf3>
			BT_UART1_printf_string("\nInput Current Second.\n>");
    11e6:	8b e0       	ldi	r24, 0x0B	; 11
    11e8:	95 e0       	ldi	r25, 0x05	; 5
    11ea:	1f da       	rcall	.-3010   	; 0x62a <BT_UART1_printf_string>
    11ec:	81 e0       	ldi	r24, 0x01	; 1
			input_flag = 1;
    11ee:	80 93 61 09 	sts	0x0961, r24	; 0x800961 <input_flag>
		}
		
		if(millis() - prevMillis > 500){
    11f2:	ab d5       	rcall	.+2902   	; 0x1d4a <millis>
    11f4:	00 91 8a 09 	lds	r16, 0x098A	; 0x80098a <prevMillis>
    11f8:	10 91 8b 09 	lds	r17, 0x098B	; 0x80098b <prevMillis+0x1>
    11fc:	20 91 8c 09 	lds	r18, 0x098C	; 0x80098c <prevMillis+0x2>
    1200:	30 91 8d 09 	lds	r19, 0x098D	; 0x80098d <prevMillis+0x3>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	80 1b       	sub	r24, r16
    120a:	91 0b       	sbc	r25, r17
    120c:	a2 0b       	sbc	r26, r18
    120e:	b3 0b       	sbc	r27, r19
    1210:	85 3f       	cpi	r24, 0xF5	; 245
    1212:	91 40       	sbci	r25, 0x01	; 1
    1214:	a1 05       	cpc	r26, r1
    1216:	b1 05       	cpc	r27, r1
    1218:	08 f4       	brcc	.+2      	; 0x121c <__stack+0x11d>
    121a:	56 c0       	rjmp	.+172    	; 0x12c8 <__stack+0x1c9>
			if (blink_flag == 0){
    121c:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <blink_flag>
    1220:	81 11       	cpse	r24, r1
    1222:	28 c0       	rjmp	.+80     	; 0x1274 <__stack+0x175>
				sprintf(buff, "    %02d:%02d:SS    ", stTime.hour, stTime.minutes);
    1224:	ed e6       	ldi	r30, 0x6D	; 109
    1226:	f9 e0       	ldi	r31, 0x09	; 9
    1228:	81 81       	ldd	r24, Z+1	; 0x01
    122a:	1f 92       	push	r1
    122c:	8f 93       	push	r24
    122e:	82 81       	ldd	r24, Z+2	; 0x02
    1230:	1f 92       	push	r1
    1232:	8f 93       	push	r24
    1234:	84 e2       	ldi	r24, 0x24	; 36
    1236:	95 e0       	ldi	r25, 0x05	; 5
    1238:	9f 93       	push	r25
    123a:	8f 93       	push	r24
    123c:	8e e8       	ldi	r24, 0x8E	; 142
    123e:	99 e0       	ldi	r25, 0x09	; 9
    1240:	9f 93       	push	r25
    1242:	8f 93       	push	r24
    1244:	0e 94 1b 12 	call	0x2436	; 0x2436 <sprintf>
				I2C_LCD_write_string_XY(0, 0, "<<TIME SETING>> ");
    1248:	49 e9       	ldi	r20, 0x99	; 153
    124a:	54 e0       	ldi	r21, 0x04	; 4
    124c:	60 e0       	ldi	r22, 0x00	; 0
    124e:	80 e0       	ldi	r24, 0x00	; 0
				I2C_LCD_write_string_XY(1, 0, buff);
    1250:	03 db       	rcall	.-2554   	; 0x858 <I2C_LCD_write_string_XY>
    1252:	4e e8       	ldi	r20, 0x8E	; 142
    1254:	59 e0       	ldi	r21, 0x09	; 9
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	fe da       	rcall	.-2564   	; 0x858 <I2C_LCD_write_string_XY>
				blink_flag = 1;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	80 93 5f 09 	sts	0x095F, r24	; 0x80095f <blink_flag>
    1262:	8d b7       	in	r24, 0x3d	; 61
    1264:	9e b7       	in	r25, 0x3e	; 62
    1266:	08 96       	adiw	r24, 0x08	; 8
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	9e bf       	out	0x3e, r25	; 62
    126e:	0f be       	out	0x3f, r0	; 63
			}
			else{
				sprintf(buff, "    %02d:%02d:--    ", stTime.hour, stTime.minutes);
    1270:	8d bf       	out	0x3d, r24	; 61
    1272:	21 c0       	rjmp	.+66     	; 0x12b6 <__stack+0x1b7>
    1274:	ed e6       	ldi	r30, 0x6D	; 109
    1276:	f9 e0       	ldi	r31, 0x09	; 9
    1278:	81 81       	ldd	r24, Z+1	; 0x01
    127a:	1f 92       	push	r1
    127c:	8f 93       	push	r24
    127e:	82 81       	ldd	r24, Z+2	; 0x02
    1280:	1f 92       	push	r1
    1282:	8f 93       	push	r24
    1284:	89 e3       	ldi	r24, 0x39	; 57
    1286:	95 e0       	ldi	r25, 0x05	; 5
    1288:	9f 93       	push	r25
    128a:	8f 93       	push	r24
    128c:	8e e8       	ldi	r24, 0x8E	; 142
    128e:	99 e0       	ldi	r25, 0x09	; 9
    1290:	9f 93       	push	r25
				I2C_LCD_write_string_XY(1, 0, buff);
    1292:	8f 93       	push	r24
    1294:	0e 94 1b 12 	call	0x2436	; 0x2436 <sprintf>
    1298:	4e e8       	ldi	r20, 0x8E	; 142
    129a:	59 e0       	ldi	r21, 0x09	; 9
    129c:	60 e0       	ldi	r22, 0x00	; 0
				blink_flag = 0;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	db da       	rcall	.-2634   	; 0x858 <I2C_LCD_write_string_XY>
    12a2:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <blink_flag>
    12a6:	8d b7       	in	r24, 0x3d	; 61
    12a8:	9e b7       	in	r25, 0x3e	; 62
    12aa:	08 96       	adiw	r24, 0x08	; 8
    12ac:	0f b6       	in	r0, 0x3f	; 63
			}
			prevMillis = millis();
    12ae:	f8 94       	cli
    12b0:	9e bf       	out	0x3e, r25	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	8d bf       	out	0x3d, r24	; 61
    12b6:	49 d5       	rcall	.+2706   	; 0x1d4a <millis>
    12b8:	60 93 8a 09 	sts	0x098A, r22	; 0x80098a <prevMillis>
    12bc:	70 93 8b 09 	sts	0x098B, r23	; 0x80098b <prevMillis+0x1>
		}
		
		if(BT_isRxString()){
    12c0:	80 93 8c 09 	sts	0x098C, r24	; 0x80098c <prevMillis+0x2>
    12c4:	90 93 8d 09 	sts	0x098D, r25	; 0x80098d <prevMillis+0x3>
    12c8:	be d9       	rcall	.-3204   	; 0x646 <BT_isRxString>
			receiveData = BT_getRxString();
    12ca:	88 23       	and	r24, r24
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <__stack+0x1d1>
    12ce:	40 c0       	rjmp	.+128    	; 0x1350 <__stack+0x251>
    12d0:	bd d9       	rcall	.-3206   	; 0x64c <BT_getRxString>
    12d2:	90 93 a3 09 	sts	0x09A3, r25	; 0x8009a3 <receiveData+0x1>
			BT_UART1_printf_string(receiveData);
    12d6:	80 93 a2 09 	sts	0x09A2, r24	; 0x8009a2 <receiveData>
			BT_UART1_printf_string("\n");
    12da:	a7 d9       	rcall	.-3250   	; 0x62a <BT_UART1_printf_string>
    12dc:	81 e1       	ldi	r24, 0x11	; 17
    12de:	96 e0       	ldi	r25, 0x06	; 6
			
			stTime.seconds = atoi(receiveData);
    12e0:	a4 d9       	rcall	.-3256   	; 0x62a <BT_UART1_printf_string>
    12e2:	80 91 a2 09 	lds	r24, 0x09A2	; 0x8009a2 <receiveData>
    12e6:	90 91 a3 09 	lds	r25, 0x09A3	; 0x8009a3 <receiveData+0x1>
    12ea:	0e 94 cc 11 	call	0x2398	; 0x2398 <atoi>
    12ee:	08 2f       	mov	r16, r24
    12f0:	80 93 6d 09 	sts	0x096D, r24	; 0x80096d <stTime>
			DS1302_SetTimeDates(stTime);
    12f4:	10 91 6e 09 	lds	r17, 0x096E	; 0x80096e <stTime+0x1>
    12f8:	20 91 6f 09 	lds	r18, 0x096F	; 0x80096f <stTime+0x2>
    12fc:	30 91 70 09 	lds	r19, 0x0970	; 0x800970 <stTime+0x3>
    1300:	40 91 71 09 	lds	r20, 0x0971	; 0x800971 <stTime+0x4>
    1304:	50 91 72 09 	lds	r21, 0x0972	; 0x800972 <stTime+0x5>
    1308:	60 91 73 09 	lds	r22, 0x0973	; 0x800973 <stTime+0x6>
    130c:	70 91 74 09 	lds	r23, 0x0974	; 0x800974 <stTime+0x7>
    1310:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <stTime+0x8>
    1314:	40 d9       	rcall	.-3456   	; 0x596 <DS1302_SetTimeDates>
			
			I2C_LCD_clear();
    1316:	59 da       	rcall	.-2894   	; 0x7ca <I2C_LCD_clear>
    1318:	8e e4       	ldi	r24, 0x4E	; 78
			BT_UART1_printf_string("SETTING COMPLETE\n\n");
    131a:	95 e0       	ldi	r25, 0x05	; 5
    131c:	86 d9       	rcall	.-3316   	; 0x62a <BT_UART1_printf_string>
    131e:	41 e6       	ldi	r20, 0x61	; 97
    1320:	55 e0       	ldi	r21, 0x05	; 5
			I2C_LCD_write_string_XY(0, 0, "SETTING COMPLETE");
    1322:	60 e0       	ldi	r22, 0x00	; 0
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	98 da       	rcall	.-2768   	; 0x858 <I2C_LCD_write_string_XY>
    1328:	9f ef       	ldi	r25, 0xFF	; 255
    132a:	23 ed       	ldi	r18, 0xD3	; 211
    132c:	80 e3       	ldi	r24, 0x30	; 48
    132e:	91 50       	subi	r25, 0x01	; 1
    1330:	20 40       	sbci	r18, 0x00	; 0
    1332:	80 40       	sbci	r24, 0x00	; 0
    1334:	e1 f7       	brne	.-8      	; 0x132e <__stack+0x22f>
    1336:	00 c0       	rjmp	.+0      	; 0x1338 <__stack+0x239>
    1338:	00 00       	nop
    133a:	10 92 60 09 	sts	0x0960, r1	; 0x800960 <settingState>
    133e:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <blink_flag>
			_delay_ms(1000);
			
			// 전역 변수 초기화 및 시간 표시 상태 이동
			settingState = 0;
    1342:	10 92 62 09 	sts	0x0962, r1	; 0x800962 <settingFlag>
			blink_flag = 0;
    1346:	10 92 61 09 	sts	0x0961, r1	; 0x800961 <input_flag>
			settingFlag = 0;
    134a:	10 92 e0 09 	sts	0x09E0, r1	; 0x8009e0 <RUN_STATE>
			input_flag = 0;
    134e:	ec da       	rcall	.-2600   	; 0x928 <print_Menu>
			RUN_STATE = CLOCK;
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
			print_Menu();
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
		}
		break;
		//---------- 시간 설정 끝 ----------//
	}
}
    1358:	08 95       	ret

0000135a <feeding_at_time>:
    135a:	7f 92       	push	r7
    135c:	8f 92       	push	r8
    135e:	9f 92       	push	r9
    1360:	af 92       	push	r10
		}
		break;
	}
}

void feeding_at_time(){
    1362:	bf 92       	push	r11
    1364:	cf 92       	push	r12
    1366:	df 92       	push	r13
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
	for(int i = 0; i < times; i++){
    1374:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <times>
    1378:	88 23       	and	r24, r24
    137a:	09 f4       	brne	.+2      	; 0x137e <feeding_at_time+0x24>
    137c:	77 c0       	rjmp	.+238    	; 0x146c <feeding_at_time+0x112>
    137e:	c0 e5       	ldi	r28, 0x50	; 80
    1380:	d9 e0       	ldi	r29, 0x09	; 9
    1382:	00 e0       	ldi	r16, 0x00	; 0
    1384:	10 e0       	ldi	r17, 0x00	; 0
		if( (feed_time[i][0] == stTime.hour) && (feed_time[i][1] == stTime.minutes)
    1386:	0f 2e       	mov	r0, r31
    1388:	fd e6       	ldi	r31, 0x6D	; 109
    138a:	ef 2e       	mov	r14, r31
    138c:	f9 e0       	ldi	r31, 0x09	; 9
    138e:	ff 2e       	mov	r15, r31
    1390:	f0 2d       	mov	r31, r0
		    && (feeding_flag == 0) ){
			feeding(quantity, servo_degree);
			sprintf(bt_buff, "TIME : %02d:%02d\n", stTime.hour, stTime.minutes);
    1392:	0f 2e       	mov	r0, r31
    1394:	f2 e7       	ldi	r31, 0x72	; 114
    1396:	8f 2e       	mov	r8, r31
    1398:	f5 e0       	ldi	r31, 0x05	; 5
    139a:	9f 2e       	mov	r9, r31
    139c:	f0 2d       	mov	r31, r0
    139e:	0f 2e       	mov	r0, r31
    13a0:	f8 eb       	ldi	r31, 0xB8	; 184
    13a2:	cf 2e       	mov	r12, r31
    13a4:	f9 e0       	ldi	r31, 0x09	; 9
    13a6:	df 2e       	mov	r13, r31
    13a8:	f0 2d       	mov	r31, r0
			BT_UART1_printf_string(bt_buff);
			sprintf(bt_buff, "Feed : %dg\n", (quantity * UNIT));
    13aa:	0f 2e       	mov	r0, r31
    13ac:	f4 e8       	ldi	r31, 0x84	; 132
    13ae:	af 2e       	mov	r10, r31
    13b0:	f5 e0       	ldi	r31, 0x05	; 5
    13b2:	bf 2e       	mov	r11, r31
    13b4:	f0 2d       	mov	r31, r0
			BT_UART1_printf_string(bt_buff);
			BT_UART1_printf_string("Auto Feeding Complete!\n");
			feeding_flag = 1;
    13b6:	77 24       	eor	r7, r7
    13b8:	73 94       	inc	r7
	}
}

void feeding_at_time(){
	for(int i = 0; i < times; i++){
		if( (feed_time[i][0] == stTime.hour) && (feed_time[i][1] == stTime.minutes)
    13ba:	98 81       	ld	r25, Y
    13bc:	f7 01       	movw	r30, r14
    13be:	82 81       	ldd	r24, Z+2	; 0x02
    13c0:	98 13       	cpse	r25, r24
    13c2:	4a c0       	rjmp	.+148    	; 0x1458 <feeding_at_time+0xfe>
    13c4:	29 81       	ldd	r18, Y+1	; 0x01
    13c6:	81 81       	ldd	r24, Z+1	; 0x01
    13c8:	28 13       	cpse	r18, r24
    13ca:	3a c0       	rjmp	.+116    	; 0x1440 <feeding_at_time+0xe6>
		    && (feeding_flag == 0) ){
    13cc:	90 91 5d 09 	lds	r25, 0x095D	; 0x80095d <feeding_flag>
    13d0:	91 11       	cpse	r25, r1
    13d2:	36 c0       	rjmp	.+108    	; 0x1440 <feeding_at_time+0xe6>
			feeding(quantity, servo_degree);
    13d4:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <servo_degree>
    13d8:	80 91 63 09 	lds	r24, 0x0963	; 0x800963 <quantity>
    13dc:	05 dc       	rcall	.-2038   	; 0xbe8 <feeding>
			sprintf(bt_buff, "TIME : %02d:%02d\n", stTime.hour, stTime.minutes);
    13de:	f7 01       	movw	r30, r14
    13e0:	81 81       	ldd	r24, Z+1	; 0x01
    13e2:	1f 92       	push	r1
    13e4:	8f 93       	push	r24
    13e6:	82 81       	ldd	r24, Z+2	; 0x02
    13e8:	1f 92       	push	r1
    13ea:	8f 93       	push	r24
    13ec:	9f 92       	push	r9
    13ee:	8f 92       	push	r8
    13f0:	df 92       	push	r13
    13f2:	cf 92       	push	r12
    13f4:	0e 94 1b 12 	call	0x2436	; 0x2436 <sprintf>
			BT_UART1_printf_string(bt_buff);
    13f8:	c6 01       	movw	r24, r12
    13fa:	17 d9       	rcall	.-3538   	; 0x62a <BT_UART1_printf_string>
			sprintf(bt_buff, "Feed : %dg\n", (quantity * UNIT));
    13fc:	80 91 63 09 	lds	r24, 0x0963	; 0x800963 <quantity>
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	9c 01       	movw	r18, r24
    1404:	22 0f       	add	r18, r18
    1406:	33 1f       	adc	r19, r19
    1408:	22 0f       	add	r18, r18
    140a:	33 1f       	adc	r19, r19
    140c:	82 0f       	add	r24, r18
    140e:	93 1f       	adc	r25, r19
    1410:	9f 93       	push	r25
    1412:	8f 93       	push	r24
    1414:	bf 92       	push	r11
    1416:	af 92       	push	r10
    1418:	df 92       	push	r13
    141a:	cf 92       	push	r12
    141c:	0e 94 1b 12 	call	0x2436	; 0x2436 <sprintf>
			BT_UART1_printf_string(bt_buff);
    1420:	c6 01       	movw	r24, r12
			BT_UART1_printf_string("Auto Feeding Complete!\n");
    1422:	03 d9       	rcall	.-3578   	; 0x62a <BT_UART1_printf_string>
    1424:	80 e9       	ldi	r24, 0x90	; 144
    1426:	95 e0       	ldi	r25, 0x05	; 5
    1428:	00 d9       	rcall	.-3584   	; 0x62a <BT_UART1_printf_string>
			feeding_flag = 1;
    142a:	70 92 5d 09 	sts	0x095D, r7	; 0x80095d <feeding_flag>
    142e:	8d b7       	in	r24, 0x3d	; 61
    1430:	9e b7       	in	r25, 0x3e	; 62
    1432:	0e 96       	adiw	r24, 0x0e	; 14
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	9e bf       	out	0x3e, r25	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	8d bf       	out	0x3d, r24	; 61
    143e:	0c c0       	rjmp	.+24     	; 0x1458 <feeding_at_time+0xfe>
		}
		// 1분 뒤 flag 초기화
		else if( (feed_time[i][0] == stTime.hour) && (feed_time[i][1] == (stTime.minutes + 1))
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	01 96       	adiw	r24, 0x01	; 1
    1446:	28 17       	cp	r18, r24
    1448:	39 07       	cpc	r19, r25
    144a:	31 f4       	brne	.+12     	; 0x1458 <feeding_at_time+0xfe>
		         && (feeding_flag == 1) ){
    144c:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <feeding_flag>
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	11 f4       	brne	.+4      	; 0x1458 <feeding_at_time+0xfe>
			feeding_flag = 0;
    1454:	10 92 5d 09 	sts	0x095D, r1	; 0x80095d <feeding_flag>
		break;
	}
}

void feeding_at_time(){
	for(int i = 0; i < times; i++){
    1458:	0f 5f       	subi	r16, 0xFF	; 255
    145a:	1f 4f       	sbci	r17, 0xFF	; 255
    145c:	22 96       	adiw	r28, 0x02	; 2
    145e:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <times>
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	08 17       	cp	r16, r24
    1466:	19 07       	cpc	r17, r25
    1468:	0c f4       	brge	.+2      	; 0x146c <feeding_at_time+0x112>
    146a:	a7 cf       	rjmp	.-178    	; 0x13ba <feeding_at_time+0x60>
		else if( (feed_time[i][0] == stTime.hour) && (feed_time[i][1] == (stTime.minutes + 1))
		         && (feeding_flag == 1) ){
			feeding_flag = 0;
		}
	}
}
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	1f 91       	pop	r17
    1472:	0f 91       	pop	r16
    1474:	ff 90       	pop	r15
    1476:	ef 90       	pop	r14
    1478:	df 90       	pop	r13
    147a:	cf 90       	pop	r12
    147c:	bf 90       	pop	r11
    147e:	af 90       	pop	r10
    1480:	9f 90       	pop	r9
    1482:	8f 90       	pop	r8
    1484:	7f 90       	pop	r7
    1486:	08 95       	ret

00001488 <show_Set>:

void show_Set(){
    1488:	cf 92       	push	r12
    148a:	df 92       	push	r13
    148c:	ef 92       	push	r14
    148e:	ff 92       	push	r15
    1490:	0f 93       	push	r16
    1492:	1f 93       	push	r17
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
	BT_UART1_printf_string("\n\n----------SETTING----------\n");
    1498:	88 ea       	ldi	r24, 0xA8	; 168
    149a:	95 e0       	ldi	r25, 0x05	; 5
    149c:	c6 d8       	rcall	.-3700   	; 0x62a <BT_UART1_printf_string>
	sprintf(bt_buff, "  ○ %d times a day\n  ○ ", times);
    149e:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <times>
    14a2:	1f 92       	push	r1
    14a4:	8f 93       	push	r24
    14a6:	87 ec       	ldi	r24, 0xC7	; 199
    14a8:	95 e0       	ldi	r25, 0x05	; 5
    14aa:	9f 93       	push	r25
    14ac:	8f 93       	push	r24
    14ae:	88 eb       	ldi	r24, 0xB8	; 184
    14b0:	99 e0       	ldi	r25, 0x09	; 9
    14b2:	9f 93       	push	r25
    14b4:	8f 93       	push	r24
    14b6:	bf d7       	rcall	.+3966   	; 0x2436 <sprintf>
	BT_UART1_printf_string(bt_buff);
    14b8:	88 eb       	ldi	r24, 0xB8	; 184
    14ba:	99 e0       	ldi	r25, 0x09	; 9
    14bc:	b6 d8       	rcall	.-3732   	; 0x62a <BT_UART1_printf_string>
	for(int i = 0; i < times; i++){
    14be:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <times>
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	88 23       	and	r24, r24
    14d0:	b9 f1       	breq	.+110    	; 0x1540 <show_Set+0xb8>
    14d2:	00 e5       	ldi	r16, 0x50	; 80
    14d4:	19 e0       	ldi	r17, 0x09	; 9
    14d6:	c0 e0       	ldi	r28, 0x00	; 0
    14d8:	d0 e0       	ldi	r29, 0x00	; 0
		if(i == 3) BT_UART1_printf_string("\n       ");
		sprintf(bt_buff, "[%02d:%02d] ", feed_time[i][0], feed_time[i][1]);
    14da:	0f 2e       	mov	r0, r31
    14dc:	fc ee       	ldi	r31, 0xEC	; 236
    14de:	cf 2e       	mov	r12, r31
    14e0:	f5 e0       	ldi	r31, 0x05	; 5
    14e2:	df 2e       	mov	r13, r31
    14e4:	f0 2d       	mov	r31, r0
    14e6:	0f 2e       	mov	r0, r31
    14e8:	f8 eb       	ldi	r31, 0xB8	; 184
    14ea:	ef 2e       	mov	r14, r31
    14ec:	f9 e0       	ldi	r31, 0x09	; 9
    14ee:	ff 2e       	mov	r15, r31
    14f0:	f0 2d       	mov	r31, r0
    14f2:	08 c0       	rjmp	.+16     	; 0x1504 <show_Set+0x7c>
void show_Set(){
	BT_UART1_printf_string("\n\n----------SETTING----------\n");
	sprintf(bt_buff, "  ○ %d times a day\n  ○ ", times);
	BT_UART1_printf_string(bt_buff);
	for(int i = 0; i < times; i++){
		if(i == 3) BT_UART1_printf_string("\n       ");
    14f4:	c3 30       	cpi	r28, 0x03	; 3
    14f6:	d1 05       	cpc	r29, r1
    14f8:	19 f4       	brne	.+6      	; 0x1500 <show_Set+0x78>
    14fa:	83 ee       	ldi	r24, 0xE3	; 227
    14fc:	95 e0       	ldi	r25, 0x05	; 5
    14fe:	95 d8       	rcall	.-3798   	; 0x62a <BT_UART1_printf_string>
    1500:	0e 5f       	subi	r16, 0xFE	; 254
    1502:	1f 4f       	sbci	r17, 0xFF	; 255
		sprintf(bt_buff, "[%02d:%02d] ", feed_time[i][0], feed_time[i][1]);
    1504:	f8 01       	movw	r30, r16
    1506:	81 81       	ldd	r24, Z+1	; 0x01
    1508:	1f 92       	push	r1
    150a:	8f 93       	push	r24
    150c:	80 81       	ld	r24, Z
    150e:	1f 92       	push	r1
    1510:	8f 93       	push	r24
    1512:	df 92       	push	r13
    1514:	cf 92       	push	r12
    1516:	ff 92       	push	r15
    1518:	ef 92       	push	r14
		BT_UART1_printf_string(bt_buff);
    151a:	8d d7       	rcall	.+3866   	; 0x2436 <sprintf>
    151c:	c7 01       	movw	r24, r14
    151e:	85 d8       	rcall	.-3830   	; 0x62a <BT_UART1_printf_string>

void show_Set(){
	BT_UART1_printf_string("\n\n----------SETTING----------\n");
	sprintf(bt_buff, "  ○ %d times a day\n  ○ ", times);
	BT_UART1_printf_string(bt_buff);
	for(int i = 0; i < times; i++){
    1520:	21 96       	adiw	r28, 0x01	; 1
    1522:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <times>
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	2d b7       	in	r18, 0x3d	; 61
    152a:	3e b7       	in	r19, 0x3e	; 62
    152c:	28 5f       	subi	r18, 0xF8	; 248
    152e:	3f 4f       	sbci	r19, 0xFF	; 255
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	3e bf       	out	0x3e, r19	; 62
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	2d bf       	out	0x3d, r18	; 61
    153a:	c8 17       	cp	r28, r24
    153c:	d9 07       	cpc	r29, r25
    153e:	d4 f2       	brlt	.-76     	; 0x14f4 <show_Set+0x6c>
		if(i == 3) BT_UART1_printf_string("\n       ");
		sprintf(bt_buff, "[%02d:%02d] ", feed_time[i][0], feed_time[i][1]);
		BT_UART1_printf_string(bt_buff);
	}
	sprintf(bt_buff, "\n  ○ %dg per a time\n\n\n\n", quantity * UNIT);
    1540:	80 91 63 09 	lds	r24, 0x0963	; 0x800963 <quantity>
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	9c 01       	movw	r18, r24
    1548:	22 0f       	add	r18, r18
    154a:	33 1f       	adc	r19, r19
    154c:	22 0f       	add	r18, r18
    154e:	33 1f       	adc	r19, r19
    1550:	82 0f       	add	r24, r18
    1552:	93 1f       	adc	r25, r19
    1554:	9f 93       	push	r25
    1556:	8f 93       	push	r24
    1558:	89 ef       	ldi	r24, 0xF9	; 249
    155a:	95 e0       	ldi	r25, 0x05	; 5
    155c:	9f 93       	push	r25
    155e:	8f 93       	push	r24
    1560:	88 eb       	ldi	r24, 0xB8	; 184
    1562:	99 e0       	ldi	r25, 0x09	; 9
    1564:	9f 93       	push	r25
    1566:	8f 93       	push	r24
	BT_UART1_printf_string(bt_buff);
    1568:	66 d7       	rcall	.+3788   	; 0x2436 <sprintf>
    156a:	88 eb       	ldi	r24, 0xB8	; 184
    156c:	99 e0       	ldi	r25, 0x09	; 9
    156e:	5d d8       	rcall	.-3910   	; 0x62a <BT_UART1_printf_string>
}
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	df 91       	pop	r29
    157e:	cf 91       	pop	r28
    1580:	1f 91       	pop	r17
    1582:	0f 91       	pop	r16
    1584:	ff 90       	pop	r15
    1586:	ef 90       	pop	r14
    1588:	df 90       	pop	r13
    158a:	cf 90       	pop	r12
    158c:	08 95       	ret

0000158e <set_Feeding>:
	}
}



void set_Feeding(){
    158e:	cf 92       	push	r12
    1590:	df 92       	push	r13
    1592:	ef 92       	push	r14
    1594:	ff 92       	push	r15
    1596:	0f 93       	push	r16
    1598:	1f 93       	push	r17
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
	static uint8_t duplicate_flag = 0;
	
	switch(settingState){
    159e:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <settingState>
    15a2:	81 30       	cpi	r24, 0x01	; 1
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <set_Feeding+0x1a>
    15a6:	ae c0       	rjmp	.+348    	; 0x1704 <set_Feeding+0x176>
    15a8:	20 f0       	brcs	.+8      	; 0x15b2 <set_Feeding+0x24>
    15aa:	82 30       	cpi	r24, 0x02	; 2
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <set_Feeding+0x22>
    15ae:	fc c1       	rjmp	.+1016   	; 0x19a8 <set_Feeding+0x41a>
    15b0:	c7 c2       	rjmp	.+1422   	; 0x1b40 <set_Feeding+0x5b2>
		case 0:
		if(input_flag == 0){
    15b2:	80 91 61 09 	lds	r24, 0x0961	; 0x800961 <input_flag>
    15b6:	81 11       	cpse	r24, r1
    15b8:	09 c0       	rjmp	.+18     	; 0x15cc <set_Feeding+0x3e>
			BT_UART1_printf_string("---------- Set Feeding Period ----------\n\n");
    15ba:	83 e1       	ldi	r24, 0x13	; 19
    15bc:	96 e0       	ldi	r25, 0x06	; 6
    15be:	35 d8       	rcall	.-3990   	; 0x62a <BT_UART1_printf_string>
			BT_UART1_printf_string("Step 1. How many times a day?\n");
    15c0:	8e e3       	ldi	r24, 0x3E	; 62
    15c2:	96 e0       	ldi	r25, 0x06	; 6
    15c4:	32 d8       	rcall	.-3996   	; 0x62a <BT_UART1_printf_string>
			input_flag = 1;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	80 93 61 09 	sts	0x0961, r24	; 0x800961 <input_flag>
		}
		
		if(millis() - prevMillis > 500){
    15cc:	be d3       	rcall	.+1916   	; 0x1d4a <millis>
    15ce:	00 91 8a 09 	lds	r16, 0x098A	; 0x80098a <prevMillis>
    15d2:	10 91 8b 09 	lds	r17, 0x098B	; 0x80098b <prevMillis+0x1>
    15d6:	20 91 8c 09 	lds	r18, 0x098C	; 0x80098c <prevMillis+0x2>
    15da:	30 91 8d 09 	lds	r19, 0x098D	; 0x80098d <prevMillis+0x3>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	80 1b       	sub	r24, r16
    15e4:	91 0b       	sbc	r25, r17
    15e6:	a2 0b       	sbc	r26, r18
    15e8:	b3 0b       	sbc	r27, r19
    15ea:	85 3f       	cpi	r24, 0xF5	; 245
    15ec:	91 40       	sbci	r25, 0x01	; 1
    15ee:	a1 05       	cpc	r26, r1
    15f0:	b1 05       	cpc	r27, r1
    15f2:	c0 f1       	brcs	.+112    	; 0x1664 <set_Feeding+0xd6>
			if (blink_flag == 0){
    15f4:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <blink_flag>
    15f8:	81 11       	cpse	r24, r1
    15fa:	16 c0       	rjmp	.+44     	; 0x1628 <set_Feeding+0x9a>
				I2C_LCD_write_string_XY(0, 0, "How many times  ");
    15fc:	4d e5       	ldi	r20, 0x5D	; 93
    15fe:	56 e0       	ldi	r21, 0x06	; 6
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	2a d9       	rcall	.-3500   	; 0x858 <I2C_LCD_write_string_XY>
				sprintf(buff, "a day?   0 times");
    1604:	81 e1       	ldi	r24, 0x11	; 17
    1606:	ee e6       	ldi	r30, 0x6E	; 110
    1608:	f6 e0       	ldi	r31, 0x06	; 6
    160a:	ae e8       	ldi	r26, 0x8E	; 142
    160c:	b9 e0       	ldi	r27, 0x09	; 9
    160e:	01 90       	ld	r0, Z+
    1610:	0d 92       	st	X+, r0
    1612:	8a 95       	dec	r24
    1614:	e1 f7       	brne	.-8      	; 0x160e <set_Feeding+0x80>
				I2C_LCD_write_string_XY(1, 0, buff);
    1616:	4e e8       	ldi	r20, 0x8E	; 142
    1618:	59 e0       	ldi	r21, 0x09	; 9
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	1c d9       	rcall	.-3528   	; 0x858 <I2C_LCD_write_string_XY>
				blink_flag = 1;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	80 93 5f 09 	sts	0x095F, r24	; 0x80095f <blink_flag>
    1626:	15 c0       	rjmp	.+42     	; 0x1652 <set_Feeding+0xc4>
			}
			else{
				I2C_LCD_write_string_XY(0, 0, "How many times  ");
    1628:	4d e5       	ldi	r20, 0x5D	; 93
    162a:	56 e0       	ldi	r21, 0x06	; 6
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	13 d9       	rcall	.-3546   	; 0x858 <I2C_LCD_write_string_XY>
				sprintf(buff, "a day?   - times");
    1632:	81 e1       	ldi	r24, 0x11	; 17
    1634:	ef e7       	ldi	r30, 0x7F	; 127
    1636:	f6 e0       	ldi	r31, 0x06	; 6
    1638:	ae e8       	ldi	r26, 0x8E	; 142
    163a:	b9 e0       	ldi	r27, 0x09	; 9
    163c:	01 90       	ld	r0, Z+
    163e:	0d 92       	st	X+, r0
    1640:	8a 95       	dec	r24
    1642:	e1 f7       	brne	.-8      	; 0x163c <set_Feeding+0xae>
				I2C_LCD_write_string_XY(1, 0, buff);
    1644:	4e e8       	ldi	r20, 0x8E	; 142
    1646:	59 e0       	ldi	r21, 0x09	; 9
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	81 e0       	ldi	r24, 0x01	; 1
				blink_flag = 0;
    164c:	05 d9       	rcall	.-3574   	; 0x858 <I2C_LCD_write_string_XY>
    164e:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <blink_flag>
			}
			prevMillis = millis();
    1652:	7b d3       	rcall	.+1782   	; 0x1d4a <millis>
    1654:	60 93 8a 09 	sts	0x098A, r22	; 0x80098a <prevMillis>
    1658:	70 93 8b 09 	sts	0x098B, r23	; 0x80098b <prevMillis+0x1>
    165c:	80 93 8c 09 	sts	0x098C, r24	; 0x80098c <prevMillis+0x2>
    1660:	90 93 8d 09 	sts	0x098D, r25	; 0x80098d <prevMillis+0x3>
		}
		
		if(BT_isRxString()){
    1664:	0e 94 23 03 	call	0x646	; 0x646 <BT_isRxString>
    1668:	88 23       	and	r24, r24
    166a:	09 f4       	brne	.+2      	; 0x166e <set_Feeding+0xe0>
    166c:	69 c2       	rjmp	.+1234   	; 0x1b40 <set_Feeding+0x5b2>
			receiveData = BT_getRxString();
    166e:	0e 94 26 03 	call	0x64c	; 0x64c <BT_getRxString>
    1672:	90 93 a3 09 	sts	0x09A3, r25	; 0x8009a3 <receiveData+0x1>
    1676:	80 93 a2 09 	sts	0x09A2, r24	; 0x8009a2 <receiveData>
			
			times = atoi(receiveData);
    167a:	8e d6       	rcall	.+3356   	; 0x2398 <atoi>
    167c:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <times>
			
			// 하루에 6회 초과는 못하게 설정(2차원 메모리 동적할당 위험)
			// 새끼 강아지가 하루에 최대 6회정도,
			if(times > 6 || times <= 0){
    1680:	2f ef       	ldi	r18, 0xFF	; 255
    1682:	28 0f       	add	r18, r24
    1684:	26 30       	cpi	r18, 0x06	; 6
    1686:	38 f0       	brcs	.+14     	; 0x1696 <set_Feeding+0x108>
				BT_UART1_printf_string("It is possible to insert times from 1 to 6.\n");
    1688:	80 e9       	ldi	r24, 0x90	; 144
    168a:	96 e0       	ldi	r25, 0x06	; 6
    168c:	0e 94 15 03 	call	0x62a	; 0x62a <BT_UART1_printf_string>
				input_flag = 0;
    1690:	10 92 61 09 	sts	0x0961, r1	; 0x800961 <input_flag>
				break;
    1694:	55 c2       	rjmp	.+1194   	; 0x1b40 <set_Feeding+0x5b2>
			for(int i=0; i < times; i++){
			feed_time[i] = (uint8_t*)malloc(sizeof(uint8_t) * 2);
			}
			*/
			
			sprintf(buff, "a day?   %01d times", times);
    1696:	99 27       	eor	r25, r25
    1698:	9f 93       	push	r25
    169a:	8f 93       	push	r24
    169c:	8d eb       	ldi	r24, 0xBD	; 189
    169e:	96 e0       	ldi	r25, 0x06	; 6
    16a0:	9f 93       	push	r25
    16a2:	8f 93       	push	r24
    16a4:	ce e8       	ldi	r28, 0x8E	; 142
    16a6:	d9 e0       	ldi	r29, 0x09	; 9
    16a8:	df 93       	push	r29
    16aa:	cf 93       	push	r28
			I2C_LCD_write_string_XY(1, 0, buff);
    16ac:	c4 d6       	rcall	.+3464   	; 0x2436 <sprintf>
    16ae:	ae 01       	movw	r20, r28
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	d1 d8       	rcall	.-3678   	; 0x858 <I2C_LCD_write_string_XY>
			sprintf(buff, "%01d times a day\n\n", times);
    16b6:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <times>
    16ba:	1f 92       	push	r1
    16bc:	8f 93       	push	r24
    16be:	81 ed       	ldi	r24, 0xD1	; 209
    16c0:	96 e0       	ldi	r25, 0x06	; 6
    16c2:	9f 93       	push	r25
    16c4:	8f 93       	push	r24
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	b5 d6       	rcall	.+3434   	; 0x2436 <sprintf>
			BT_UART1_printf_string(buff);
    16cc:	ce 01       	movw	r24, r28
    16ce:	0e 94 15 03 	call	0x62a	; 0x62a <BT_UART1_printf_string>
    16d2:	ff ef       	ldi	r31, 0xFF	; 255
    16d4:	29 e6       	ldi	r18, 0x69	; 105
    16d6:	38 e1       	ldi	r19, 0x18	; 24
    16d8:	f1 50       	subi	r31, 0x01	; 1
    16da:	20 40       	sbci	r18, 0x00	; 0
    16dc:	30 40       	sbci	r19, 0x00	; 0
    16de:	e1 f7       	brne	.-8      	; 0x16d8 <set_Feeding+0x14a>
    16e0:	00 c0       	rjmp	.+0      	; 0x16e2 <set_Feeding+0x154>
    16e2:	00 00       	nop
			_delay_ms(500);
			
			blink_flag = 0;
    16e4:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <blink_flag>
			input_flag = 0;
    16e8:	10 92 61 09 	sts	0x0961, r1	; 0x800961 <input_flag>
			settingState = 1;
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <settingState>
    16f2:	8d b7       	in	r24, 0x3d	; 61
    16f4:	9e b7       	in	r25, 0x3e	; 62
    16f6:	0c 96       	adiw	r24, 0x0c	; 12
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	9e bf       	out	0x3e, r25	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	8d bf       	out	0x3d, r24	; 61
    1702:	1e c2       	rjmp	.+1084   	; 0x1b40 <set_Feeding+0x5b2>
		}
		break;
		
		
		case 1:
		if(input_flag == 0){
    1704:	80 91 61 09 	lds	r24, 0x0961	; 0x800961 <input_flag>
    1708:	81 11       	cpse	r24, r1
    170a:	0b c0       	rjmp	.+22     	; 0x1722 <set_Feeding+0x194>
			BT_UART1_printf_string("Step 2. What time should I feed?\n");
    170c:	84 ee       	ldi	r24, 0xE4	; 228
    170e:	96 e0       	ldi	r25, 0x06	; 6
    1710:	0e 94 15 03 	call	0x62a	; 0x62a <BT_UART1_printf_string>
			BT_UART1_printf_string("Please, Enter the time sequentially.(ex: 08:30)\n");
    1714:	86 e0       	ldi	r24, 0x06	; 6
    1716:	97 e0       	ldi	r25, 0x07	; 7
    1718:	0e 94 15 03 	call	0x62a	; 0x62a <BT_UART1_printf_string>
			input_flag = 1;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	80 93 61 09 	sts	0x0961, r24	; 0x800961 <input_flag>
		}
		
		if(millis() - prevMillis > 500){
    1722:	13 d3       	rcall	.+1574   	; 0x1d4a <millis>
    1724:	00 91 8a 09 	lds	r16, 0x098A	; 0x80098a <prevMillis>
    1728:	10 91 8b 09 	lds	r17, 0x098B	; 0x80098b <prevMillis+0x1>
    172c:	20 91 8c 09 	lds	r18, 0x098C	; 0x80098c <prevMillis+0x2>
    1730:	30 91 8d 09 	lds	r19, 0x098D	; 0x80098d <prevMillis+0x3>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	80 1b       	sub	r24, r16
    173a:	91 0b       	sbc	r25, r17
    173c:	a2 0b       	sbc	r26, r18
    173e:	b3 0b       	sbc	r27, r19
    1740:	85 3f       	cpi	r24, 0xF5	; 245
    1742:	91 40       	sbci	r25, 0x01	; 1
    1744:	a1 05       	cpc	r26, r1
    1746:	b1 05       	cpc	r27, r1
    1748:	08 f4       	brcc	.+2      	; 0x174c <set_Feeding+0x1be>
			if (blink_flag == 0){
    174a:	44 c0       	rjmp	.+136    	; 0x17d4 <set_Feeding+0x246>
    174c:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <blink_flag>
    1750:	81 11       	cpse	r24, r1
				I2C_LCD_write_string_XY(0, 0, "What time should");
    1752:	22 c0       	rjmp	.+68     	; 0x1798 <set_Feeding+0x20a>
    1754:	47 e3       	ldi	r20, 0x37	; 55
    1756:	57 e0       	ldi	r21, 0x07	; 7
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	7e d8       	rcall	.-3844   	; 0x858 <I2C_LCD_write_string_XY>
				sprintf(buff, "I feed? %02d times", (set_count+1));
    175c:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <set_count>
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	01 96       	adiw	r24, 0x01	; 1
    1764:	9f 93       	push	r25
    1766:	8f 93       	push	r24
    1768:	88 e4       	ldi	r24, 0x48	; 72
    176a:	97 e0       	ldi	r25, 0x07	; 7
    176c:	9f 93       	push	r25
    176e:	8f 93       	push	r24
    1770:	8e e8       	ldi	r24, 0x8E	; 142
    1772:	99 e0       	ldi	r25, 0x09	; 9
    1774:	9f 93       	push	r25
    1776:	8f 93       	push	r24
				I2C_LCD_write_string_XY(1, 0, buff);
    1778:	5e d6       	rcall	.+3260   	; 0x2436 <sprintf>
    177a:	4e e8       	ldi	r20, 0x8E	; 142
    177c:	59 e0       	ldi	r21, 0x09	; 9
    177e:	60 e0       	ldi	r22, 0x00	; 0
    1780:	81 e0       	ldi	r24, 0x01	; 1
				blink_flag = 1;
    1782:	6a d8       	rcall	.-3884   	; 0x858 <I2C_LCD_write_string_XY>
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	80 93 5f 09 	sts	0x095F, r24	; 0x80095f <blink_flag>
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
			}
			else{
				I2C_LCD_write_string_XY(0, 0, "What time should");
    1796:	15 c0       	rjmp	.+42     	; 0x17c2 <set_Feeding+0x234>
    1798:	47 e3       	ldi	r20, 0x37	; 55
    179a:	57 e0       	ldi	r21, 0x07	; 7
    179c:	60 e0       	ldi	r22, 0x00	; 0
    179e:	80 e0       	ldi	r24, 0x00	; 0
				sprintf(buff, "I feed? -- times");
    17a0:	5b d8       	rcall	.-3914   	; 0x858 <I2C_LCD_write_string_XY>
    17a2:	81 e1       	ldi	r24, 0x11	; 17
    17a4:	eb e5       	ldi	r30, 0x5B	; 91
    17a6:	f7 e0       	ldi	r31, 0x07	; 7
    17a8:	ae e8       	ldi	r26, 0x8E	; 142
    17aa:	b9 e0       	ldi	r27, 0x09	; 9
    17ac:	01 90       	ld	r0, Z+
    17ae:	0d 92       	st	X+, r0
				I2C_LCD_write_string_XY(1, 0, buff);
    17b0:	8a 95       	dec	r24
    17b2:	e1 f7       	brne	.-8      	; 0x17ac <set_Feeding+0x21e>
    17b4:	4e e8       	ldi	r20, 0x8E	; 142
    17b6:	59 e0       	ldi	r21, 0x09	; 9
    17b8:	60 e0       	ldi	r22, 0x00	; 0
    17ba:	81 e0       	ldi	r24, 0x01	; 1
				blink_flag = 0;
    17bc:	4d d8       	rcall	.-3942   	; 0x858 <I2C_LCD_write_string_XY>
    17be:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <blink_flag>
			}
			prevMillis = millis();
    17c2:	c3 d2       	rcall	.+1414   	; 0x1d4a <millis>
    17c4:	60 93 8a 09 	sts	0x098A, r22	; 0x80098a <prevMillis>
    17c8:	70 93 8b 09 	sts	0x098B, r23	; 0x80098b <prevMillis+0x1>
    17cc:	80 93 8c 09 	sts	0x098C, r24	; 0x80098c <prevMillis+0x2>
    17d0:	90 93 8d 09 	sts	0x098D, r25	; 0x80098d <prevMillis+0x3>
		}
		
		if(BT_isRxString()){
    17d4:	0e 94 23 03 	call	0x646	; 0x646 <BT_isRxString>
    17d8:	88 23       	and	r24, r24
    17da:	09 f4       	brne	.+2      	; 0x17de <set_Feeding+0x250>
    17dc:	91 c0       	rjmp	.+290    	; 0x1900 <set_Feeding+0x372>
			receiveData = BT_getRxString();
    17de:	0e 94 26 03 	call	0x64c	; 0x64c <BT_getRxString>
    17e2:	90 93 a3 09 	sts	0x09A3, r25	; 0x8009a3 <receiveData+0x1>
    17e6:	80 93 a2 09 	sts	0x09A2, r24	; 0x8009a2 <receiveData>
			BT_UART1_printf_string("Set ");
    17ea:	8c e6       	ldi	r24, 0x6C	; 108
    17ec:	97 e0       	ldi	r25, 0x07	; 7
    17ee:	0e 94 15 03 	call	0x62a	; 0x62a <BT_UART1_printf_string>
			BT_UART1_printf_string(receiveData);
    17f2:	80 91 a2 09 	lds	r24, 0x09A2	; 0x8009a2 <receiveData>
    17f6:	90 91 a3 09 	lds	r25, 0x09A3	; 0x8009a3 <receiveData+0x1>
    17fa:	0e 94 15 03 	call	0x62a	; 0x62a <BT_UART1_printf_string>
			BT_UART1_printf_string("\n");
    17fe:	81 e1       	ldi	r24, 0x11	; 17
    1800:	96 e0       	ldi	r25, 0x06	; 6
    1802:	0e 94 15 03 	call	0x62a	; 0x62a <BT_UART1_printf_string>
			
			uint8_t j = 0;
			
			// times만큼 동적할당한 2차원 배열 feed_time[times][2]에 시간, 분 값을 넣어야함
			// 08:30 과 같이 정해진 양식으로 값을 받아서
			time_Tokken = strtok(receiveData, ":");
    1806:	61 e7       	ldi	r22, 0x71	; 113
    1808:	77 e0       	ldi	r23, 0x07	; 7
    180a:	80 91 a2 09 	lds	r24, 0x09A2	; 0x8009a2 <receiveData>
    180e:	90 91 a3 09 	lds	r25, 0x09A3	; 0x8009a3 <receiveData+0x1>
    1812:	df d5       	rcall	.+3006   	; 0x23d2 <strtok>
    1814:	90 93 e2 09 	sts	0x09E2, r25	; 0x8009e2 <time_Tokken+0x1>
    1818:	80 93 e1 09 	sts	0x09E1, r24	; 0x8009e1 <time_Tokken>
			while(time_Tokken != NULL){
    181c:	00 97       	sbiw	r24, 0x00	; 0
    181e:	09 f0       	breq	.+2      	; 0x1822 <set_Feeding+0x294>
    1820:	84 c1       	rjmp	.+776    	; 0x1b2a <set_Feeding+0x59c>
				feed_time[set_count][j] = atoi(time_Tokken);
    1822:	1a c0       	rjmp	.+52     	; 0x1858 <set_Feeding+0x2ca>
    1824:	b9 d5       	rcall	.+2930   	; 0x2398 <atoi>
    1826:	e0 91 5c 09 	lds	r30, 0x095C	; 0x80095c <set_count>
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	ee 0f       	add	r30, r30
    182e:	ff 1f       	adc	r31, r31
    1830:	e0 5b       	subi	r30, 0xB0	; 176
    1832:	f6 4f       	sbci	r31, 0xF6	; 246
    1834:	ec 0f       	add	r30, r28
    1836:	f1 1d       	adc	r31, r1
				j++;
    1838:	80 83       	st	Z, r24
				if(j >= 2) j = 0;
    183a:	cf 5f       	subi	r28, 0xFF	; 255
    183c:	c2 30       	cpi	r28, 0x02	; 2
    183e:	08 f0       	brcs	.+2      	; 0x1842 <set_Feeding+0x2b4>
				time_Tokken = strtok(NULL, ":");
    1840:	c0 e0       	ldi	r28, 0x00	; 0
    1842:	61 e7       	ldi	r22, 0x71	; 113
    1844:	77 e0       	ldi	r23, 0x07	; 7
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	c3 d5       	rcall	.+2950   	; 0x23d2 <strtok>
    184c:	90 93 e2 09 	sts	0x09E2, r25	; 0x8009e2 <time_Tokken+0x1>
    1850:	80 93 e1 09 	sts	0x09E1, r24	; 0x8009e1 <time_Tokken>
			uint8_t j = 0;
			
			// times만큼 동적할당한 2차원 배열 feed_time[times][2]에 시간, 분 값을 넣어야함
			// 08:30 과 같이 정해진 양식으로 값을 받아서
			time_Tokken = strtok(receiveData, ":");
			while(time_Tokken != NULL){
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	31 f7       	brne	.-52     	; 0x1824 <set_Feeding+0x296>
				if(j >= 2) j = 0;
				time_Tokken = strtok(NULL, ":");
			}
			
			// 예외처리, 시간값에 맞게 입력하게끔
			if(feed_time[set_count][0] > 23 || feed_time[set_count][0] < 0 ){
    1858:	20 91 5c 09 	lds	r18, 0x095C	; 0x80095c <set_count>
    185c:	82 2f       	mov	r24, r18
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	fc 01       	movw	r30, r24
    1862:	ee 0f       	add	r30, r30
    1864:	ff 1f       	adc	r31, r31
    1866:	e0 5b       	subi	r30, 0xB0	; 176
    1868:	f6 4f       	sbci	r31, 0xF6	; 246
    186a:	30 81       	ld	r19, Z
    186c:	38 31       	cpi	r19, 0x18	; 24
    186e:	28 f0       	brcs	.+10     	; 0x187a <set_Feeding+0x2ec>
				BT_UART1_printf_string("Please, Insert the hour from 0 to 23\n");
    1870:	83 e7       	ldi	r24, 0x73	; 115
    1872:	97 e0       	ldi	r25, 0x07	; 7
    1874:	0e 94 15 03 	call	0x62a	; 0x62a <BT_UART1_printf_string>
				break;
    1878:	63 c1       	rjmp	.+710    	; 0x1b40 <set_Feeding+0x5b2>
				}else if(feed_time[set_count][1] > 59 || feed_time[set_count][0] < 0 ){
    187a:	fc 01       	movw	r30, r24
    187c:	ee 0f       	add	r30, r30
    187e:	ff 1f       	adc	r31, r31
    1880:	e0 5b       	subi	r30, 0xB0	; 176
    1882:	f6 4f       	sbci	r31, 0xF6	; 246
    1884:	31 81       	ldd	r19, Z+1	; 0x01
    1886:	3c 33       	cpi	r19, 0x3C	; 60
    1888:	20 f4       	brcc	.+8      	; 0x1892 <set_Feeding+0x304>
				BT_UART1_printf_string("Please, Insert the minute from 0 to 59\n");
				break;
			}
			
			// 예외처리, 중복된 값 재입력
			for(int i = 0; i < set_count; i++){
    188a:	18 16       	cp	r1, r24
    188c:	19 06       	cpc	r1, r25
    188e:	34 f0       	brlt	.+12     	; 0x189c <set_Feeding+0x30e>
    1890:	2d c0       	rjmp	.+90     	; 0x18ec <set_Feeding+0x35e>
			// 예외처리, 시간값에 맞게 입력하게끔
			if(feed_time[set_count][0] > 23 || feed_time[set_count][0] < 0 ){
				BT_UART1_printf_string("Please, Insert the hour from 0 to 23\n");
				break;
				}else if(feed_time[set_count][1] > 59 || feed_time[set_count][0] < 0 ){
				BT_UART1_printf_string("Please, Insert the minute from 0 to 59\n");
    1892:	89 e9       	ldi	r24, 0x99	; 153
    1894:	97 e0       	ldi	r25, 0x07	; 7
    1896:	0e 94 15 03 	call	0x62a	; 0x62a <BT_UART1_printf_string>
				break;
    189a:	52 c1       	rjmp	.+676    	; 0x1b40 <set_Feeding+0x5b2>
    189c:	c0 e5       	ldi	r28, 0x50	; 80
    189e:	d9 e0       	ldi	r29, 0x09	; 9
			}
			
			// 예외처리, 중복된 값 재입력
			for(int i = 0; i < set_count; i++){
    18a0:	00 e0       	ldi	r16, 0x00	; 0
    18a2:	10 e0       	ldi	r17, 0x00	; 0
				if(   feed_time[set_count][0] == feed_time[i][0]
				&& feed_time[set_count][1] == feed_time[i][1] )
				{
					BT_UART1_printf_string("Duplicate value found.\n");
					duplicate_flag = 1;
    18a4:	ff 24       	eor	r15, r15
    18a6:	f3 94       	inc	r15
				break;
			}
			
			// 예외처리, 중복된 값 재입력
			for(int i = 0; i < set_count; i++){
				if(   feed_time[set_count][0] == feed_time[i][0]
    18a8:	fc 01       	movw	r30, r24
    18aa:	ee 0f       	add	r30, r30
    18ac:	ff 1f       	adc	r31, r31
    18ae:	e0 5b       	subi	r30, 0xB0	; 176
    18b0:	f6 4f       	sbci	r31, 0xF6	; 246
    18b2:	30 81       	ld	r19, Z
    18b4:	28 81       	ld	r18, Y
    18b6:	32 13       	cpse	r19, r18
    18b8:	0f c0       	rjmp	.+30     	; 0x18d8 <set_Feeding+0x34a>
				&& feed_time[set_count][1] == feed_time[i][1] )
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	fc 01       	movw	r30, r24
    18c0:	e0 5b       	subi	r30, 0xB0	; 176
    18c2:	f6 4f       	sbci	r31, 0xF6	; 246
    18c4:	91 81       	ldd	r25, Z+1	; 0x01
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	98 13       	cpse	r25, r24
    18ca:	06 c0       	rjmp	.+12     	; 0x18d8 <set_Feeding+0x34a>
				{
					BT_UART1_printf_string("Duplicate value found.\n");
    18cc:	81 ec       	ldi	r24, 0xC1	; 193
    18ce:	97 e0       	ldi	r25, 0x07	; 7
    18d0:	0e 94 15 03 	call	0x62a	; 0x62a <BT_UART1_printf_string>
					duplicate_flag = 1;
    18d4:	f0 92 4a 09 	sts	0x094A, r15	; 0x80094a <duplicate_flag.2441>
				BT_UART1_printf_string("Please, Insert the minute from 0 to 59\n");
				break;
			}
			
			// 예외처리, 중복된 값 재입력
			for(int i = 0; i < set_count; i++){
    18d8:	0f 5f       	subi	r16, 0xFF	; 255
    18da:	1f 4f       	sbci	r17, 0xFF	; 255
    18dc:	20 91 5c 09 	lds	r18, 0x095C	; 0x80095c <set_count>
    18e0:	82 2f       	mov	r24, r18
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	22 96       	adiw	r28, 0x02	; 2
    18e6:	08 17       	cp	r16, r24
    18e8:	19 07       	cpc	r17, r25
    18ea:	f4 f2       	brlt	.-68     	; 0x18a8 <set_Feeding+0x31a>
				{
					BT_UART1_printf_string("Duplicate value found.\n");
					duplicate_flag = 1;
				}
			}
			if(duplicate_flag == 1){
    18ec:	80 91 4a 09 	lds	r24, 0x094A	; 0x80094a <duplicate_flag.2441>
    18f0:	81 30       	cpi	r24, 0x01	; 1
    18f2:	19 f4       	brne	.+6      	; 0x18fa <set_Feeding+0x36c>
				duplicate_flag = 0;
    18f4:	10 92 4a 09 	sts	0x094A, r1	; 0x80094a <duplicate_flag.2441>
				break;
    18f8:	23 c1       	rjmp	.+582    	; 0x1b40 <set_Feeding+0x5b2>
			}
			set_count++;
    18fa:	2f 5f       	subi	r18, 0xFF	; 255
    18fc:	20 93 5c 09 	sts	0x095C, r18	; 0x80095c <set_count>
		}
		
		// times만큼 시간값을 설정해준다면 전역변수 초기화 후 완료
		if(set_count >= times){
    1900:	90 91 5c 09 	lds	r25, 0x095C	; 0x80095c <set_count>
    1904:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <times>
    1908:	98 17       	cp	r25, r24
    190a:	08 f4       	brcc	.+2      	; 0x190e <set_Feeding+0x380>
    190c:	19 c1       	rjmp	.+562    	; 0x1b40 <set_Feeding+0x5b2>
			// 설정 값 보여주기
			BT_UART1_printf_string("\n       --Setting Time--\n");
    190e:	89 ed       	ldi	r24, 0xD9	; 217
    1910:	97 e0       	ldi	r25, 0x07	; 7
    1912:	0e 94 15 03 	call	0x62a	; 0x62a <BT_UART1_printf_string>
			for(int i = 0; i < set_count; i++){
    1916:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <set_count>
    191a:	88 23       	and	r24, r24
    191c:	c9 f1       	breq	.+114    	; 0x1990 <set_Feeding+0x402>
    191e:	00 e5       	ldi	r16, 0x50	; 80
    1920:	19 e0       	ldi	r17, 0x09	; 9
    1922:	c0 e0       	ldi	r28, 0x00	; 0
    1924:	d0 e0       	ldi	r29, 0x00	; 0
				if(i == 3) BT_UART1_printf_string("\n");
				sprintf(bt_buff, "[%02d:%02d] ", feed_time[i][0], feed_time[i][1]);
    1926:	0f 2e       	mov	r0, r31
    1928:	fc ee       	ldi	r31, 0xEC	; 236
    192a:	cf 2e       	mov	r12, r31
    192c:	f5 e0       	ldi	r31, 0x05	; 5
    192e:	df 2e       	mov	r13, r31
    1930:	f0 2d       	mov	r31, r0
    1932:	0f 2e       	mov	r0, r31
    1934:	f8 eb       	ldi	r31, 0xB8	; 184
    1936:	ef 2e       	mov	r14, r31
    1938:	f9 e0       	ldi	r31, 0x09	; 9
    193a:	ff 2e       	mov	r15, r31
    193c:	f0 2d       	mov	r31, r0
    193e:	09 c0       	rjmp	.+18     	; 0x1952 <set_Feeding+0x3c4>
		// times만큼 시간값을 설정해준다면 전역변수 초기화 후 완료
		if(set_count >= times){
			// 설정 값 보여주기
			BT_UART1_printf_string("\n       --Setting Time--\n");
			for(int i = 0; i < set_count; i++){
				if(i == 3) BT_UART1_printf_string("\n");
    1940:	c3 30       	cpi	r28, 0x03	; 3
    1942:	d1 05       	cpc	r29, r1
    1944:	21 f4       	brne	.+8      	; 0x194e <set_Feeding+0x3c0>
    1946:	81 e1       	ldi	r24, 0x11	; 17
    1948:	96 e0       	ldi	r25, 0x06	; 6
    194a:	0e 94 15 03 	call	0x62a	; 0x62a <BT_UART1_printf_string>
    194e:	0e 5f       	subi	r16, 0xFE	; 254
				sprintf(bt_buff, "[%02d:%02d] ", feed_time[i][0], feed_time[i][1]);
    1950:	1f 4f       	sbci	r17, 0xFF	; 255
    1952:	f8 01       	movw	r30, r16
    1954:	81 81       	ldd	r24, Z+1	; 0x01
    1956:	1f 92       	push	r1
    1958:	8f 93       	push	r24
    195a:	80 81       	ld	r24, Z
    195c:	1f 92       	push	r1
    195e:	8f 93       	push	r24
    1960:	df 92       	push	r13
    1962:	cf 92       	push	r12
    1964:	ff 92       	push	r15
    1966:	ef 92       	push	r14
    1968:	66 d5       	rcall	.+2764   	; 0x2436 <sprintf>
				BT_UART1_printf_string(bt_buff);
    196a:	c7 01       	movw	r24, r14
    196c:	0e 94 15 03 	call	0x62a	; 0x62a <BT_UART1_printf_string>
		
		// times만큼 시간값을 설정해준다면 전역변수 초기화 후 완료
		if(set_count >= times){
			// 설정 값 보여주기
			BT_UART1_printf_string("\n       --Setting Time--\n");
			for(int i = 0; i < set_count; i++){
    1970:	21 96       	adiw	r28, 0x01	; 1
    1972:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <set_count>
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	2d b7       	in	r18, 0x3d	; 61
    197a:	3e b7       	in	r19, 0x3e	; 62
    197c:	28 5f       	subi	r18, 0xF8	; 248
    197e:	3f 4f       	sbci	r19, 0xFF	; 255
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	f8 94       	cli
    1984:	3e bf       	out	0x3e, r19	; 62
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	2d bf       	out	0x3d, r18	; 61
    198a:	c8 17       	cp	r28, r24
    198c:	d9 07       	cpc	r29, r25
    198e:	c4 f2       	brlt	.-80     	; 0x1940 <set_Feeding+0x3b2>
				if(i == 3) BT_UART1_printf_string("\n");
				sprintf(bt_buff, "[%02d:%02d] ", feed_time[i][0], feed_time[i][1]);
				BT_UART1_printf_string(bt_buff);
			}
			BT_UART1_printf_string("\n\n");
    1990:	80 e1       	ldi	r24, 0x10	; 16
    1992:	96 e0       	ldi	r25, 0x06	; 6
    1994:	0e 94 15 03 	call	0x62a	; 0x62a <BT_UART1_printf_string>
			
			blink_flag = 0;
    1998:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <blink_flag>
			input_flag = 0;
    199c:	10 92 61 09 	sts	0x0961, r1	; 0x800961 <input_flag>
			settingState = 2;
    19a0:	82 e0       	ldi	r24, 0x02	; 2
    19a2:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <settingState>
			break;
    19a6:	cc c0       	rjmp	.+408    	; 0x1b40 <set_Feeding+0x5b2>
		}
		break;
		
		case 2:
		if(input_flag == 0){
    19a8:	80 91 61 09 	lds	r24, 0x0961	; 0x800961 <input_flag>
    19ac:	81 11       	cpse	r24, r1
    19ae:	24 c0       	rjmp	.+72     	; 0x19f8 <set_Feeding+0x46a>
			BT_UART1_printf_string("Step 3. How many feed do you give at a time?\n");
    19b0:	83 ef       	ldi	r24, 0xF3	; 243
    19b2:	97 e0       	ldi	r25, 0x07	; 7
    19b4:	0e 94 15 03 	call	0x62a	; 0x62a <BT_UART1_printf_string>
			sprintf(bt_buff, "unit : %dg , ex) '1' = %dg, '3' = %dg\n", UNIT, UNIT, UNIT * 3);
    19b8:	1f 92       	push	r1
    19ba:	8f e0       	ldi	r24, 0x0F	; 15
    19bc:	8f 93       	push	r24
    19be:	1f 92       	push	r1
    19c0:	85 e0       	ldi	r24, 0x05	; 5
    19c2:	8f 93       	push	r24
    19c4:	1f 92       	push	r1
    19c6:	8f 93       	push	r24
    19c8:	81 e2       	ldi	r24, 0x21	; 33
    19ca:	98 e0       	ldi	r25, 0x08	; 8
    19cc:	9f 93       	push	r25
    19ce:	8f 93       	push	r24
    19d0:	88 eb       	ldi	r24, 0xB8	; 184
    19d2:	99 e0       	ldi	r25, 0x09	; 9
    19d4:	9f 93       	push	r25
    19d6:	8f 93       	push	r24
			BT_UART1_printf_string(bt_buff);
    19d8:	2e d5       	rcall	.+2652   	; 0x2436 <sprintf>
    19da:	88 eb       	ldi	r24, 0xB8	; 184
    19dc:	99 e0       	ldi	r25, 0x09	; 9
    19de:	0e 94 15 03 	call	0x62a	; 0x62a <BT_UART1_printf_string>
			input_flag = 1;
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	80 93 61 09 	sts	0x0961, r24	; 0x800961 <input_flag>
    19e8:	8d b7       	in	r24, 0x3d	; 61
    19ea:	9e b7       	in	r25, 0x3e	; 62
    19ec:	0a 96       	adiw	r24, 0x0a	; 10
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	9e bf       	out	0x3e, r25	; 62
    19f4:	0f be       	out	0x3f, r0	; 63
		}
		
		if(millis() - prevMillis > 500){
    19f6:	8d bf       	out	0x3d, r24	; 61
    19f8:	a8 d1       	rcall	.+848    	; 0x1d4a <millis>
    19fa:	00 91 8a 09 	lds	r16, 0x098A	; 0x80098a <prevMillis>
    19fe:	10 91 8b 09 	lds	r17, 0x098B	; 0x80098b <prevMillis+0x1>
    1a02:	20 91 8c 09 	lds	r18, 0x098C	; 0x80098c <prevMillis+0x2>
    1a06:	30 91 8d 09 	lds	r19, 0x098D	; 0x80098d <prevMillis+0x3>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	80 1b       	sub	r24, r16
    1a10:	91 0b       	sbc	r25, r17
    1a12:	a2 0b       	sbc	r26, r18
    1a14:	b3 0b       	sbc	r27, r19
    1a16:	85 3f       	cpi	r24, 0xF5	; 245
    1a18:	91 40       	sbci	r25, 0x01	; 1
    1a1a:	a1 05       	cpc	r26, r1
    1a1c:	b1 05       	cpc	r27, r1
    1a1e:	50 f1       	brcs	.+84     	; 0x1a74 <set_Feeding+0x4e6>
			if (blink_flag == 0){
    1a20:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <blink_flag>
    1a24:	81 11       	cpse	r24, r1
    1a26:	0f c0       	rjmp	.+30     	; 0x1a46 <set_Feeding+0x4b8>
				I2C_LCD_write_string_XY(0, 0, "How many feed do");
    1a28:	48 e4       	ldi	r20, 0x48	; 72
    1a2a:	58 e0       	ldi	r21, 0x08	; 8
    1a2c:	60 e0       	ldi	r22, 0x00	; 0
    1a2e:	0e 94 2c 04 	call	0x858	; 0x858 <I2C_LCD_write_string_XY>
				I2C_LCD_write_string_XY(1, 0, "you give?       ");
    1a32:	49 e5       	ldi	r20, 0x59	; 89
    1a34:	58 e0       	ldi	r21, 0x08	; 8
    1a36:	60 e0       	ldi	r22, 0x00	; 0
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	0e 94 2c 04 	call	0x858	; 0x858 <I2C_LCD_write_string_XY>
				blink_flag = 1;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	80 93 5f 09 	sts	0x095F, r24	; 0x80095f <blink_flag>
			}
			else{
				I2C_LCD_write_string_XY(0, 0, "How many feed do");
    1a44:	0e c0       	rjmp	.+28     	; 0x1a62 <set_Feeding+0x4d4>
    1a46:	48 e4       	ldi	r20, 0x48	; 72
    1a48:	58 e0       	ldi	r21, 0x08	; 8
    1a4a:	60 e0       	ldi	r22, 0x00	; 0
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	0e 94 2c 04 	call	0x858	; 0x858 <I2C_LCD_write_string_XY>
				I2C_LCD_write_string_XY(1, 0, "you give? ----- ");
    1a52:	4a e6       	ldi	r20, 0x6A	; 106
    1a54:	58 e0       	ldi	r21, 0x08	; 8
    1a56:	60 e0       	ldi	r22, 0x00	; 0
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	0e 94 2c 04 	call	0x858	; 0x858 <I2C_LCD_write_string_XY>
				blink_flag = 0;
    1a5e:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <blink_flag>
			}
			prevMillis = millis();
    1a62:	73 d1       	rcall	.+742    	; 0x1d4a <millis>
    1a64:	60 93 8a 09 	sts	0x098A, r22	; 0x80098a <prevMillis>
    1a68:	70 93 8b 09 	sts	0x098B, r23	; 0x80098b <prevMillis+0x1>
    1a6c:	80 93 8c 09 	sts	0x098C, r24	; 0x80098c <prevMillis+0x2>
    1a70:	90 93 8d 09 	sts	0x098D, r25	; 0x80098d <prevMillis+0x3>
		}
		
		if(BT_isRxString()){
    1a74:	0e 94 23 03 	call	0x646	; 0x646 <BT_isRxString>
    1a78:	88 23       	and	r24, r24
    1a7a:	09 f4       	brne	.+2      	; 0x1a7e <set_Feeding+0x4f0>
			receiveData = BT_getRxString();
    1a7c:	61 c0       	rjmp	.+194    	; 0x1b40 <set_Feeding+0x5b2>
    1a7e:	0e 94 26 03 	call	0x64c	; 0x64c <BT_getRxString>
    1a82:	90 93 a3 09 	sts	0x09A3, r25	; 0x8009a3 <receiveData+0x1>
    1a86:	80 93 a2 09 	sts	0x09A2, r24	; 0x8009a2 <receiveData>
			quantity = atoi(receiveData);
    1a8a:	86 d4       	rcall	.+2316   	; 0x2398 <atoi>
    1a8c:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <quantity>
			if(quantity <= 0){
    1a90:	81 11       	cpse	r24, r1
    1a92:	05 c0       	rjmp	.+10     	; 0x1a9e <set_Feeding+0x510>
				BT_UART1_printf_string("Please, Enter a number above 0\n");
    1a94:	8b e7       	ldi	r24, 0x7B	; 123
    1a96:	98 e0       	ldi	r25, 0x08	; 8
    1a98:	0e 94 15 03 	call	0x62a	; 0x62a <BT_UART1_printf_string>
				break;
			}
			sprintf(bt_buff, "Set %dg\n", (quantity*UNIT));
    1a9c:	51 c0       	rjmp	.+162    	; 0x1b40 <set_Feeding+0x5b2>
    1a9e:	99 27       	eor	r25, r25
    1aa0:	9c 01       	movw	r18, r24
    1aa2:	22 0f       	add	r18, r18
    1aa4:	33 1f       	adc	r19, r19
    1aa6:	22 0f       	add	r18, r18
    1aa8:	33 1f       	adc	r19, r19
    1aaa:	82 0f       	add	r24, r18
    1aac:	93 1f       	adc	r25, r19
    1aae:	9f 93       	push	r25
    1ab0:	8f 93       	push	r24
    1ab2:	8b e9       	ldi	r24, 0x9B	; 155
    1ab4:	98 e0       	ldi	r25, 0x08	; 8
    1ab6:	9f 93       	push	r25
    1ab8:	8f 93       	push	r24
    1aba:	88 eb       	ldi	r24, 0xB8	; 184
    1abc:	99 e0       	ldi	r25, 0x09	; 9
    1abe:	9f 93       	push	r25
    1ac0:	8f 93       	push	r24
			BT_UART1_printf_string(bt_buff);
    1ac2:	b9 d4       	rcall	.+2418   	; 0x2436 <sprintf>
    1ac4:	88 eb       	ldi	r24, 0xB8	; 184
    1ac6:	99 e0       	ldi	r25, 0x09	; 9
    1ac8:	0e 94 15 03 	call	0x62a	; 0x62a <BT_UART1_printf_string>
			
			// 설정값 출력 및 전역변수 초기화 후 완료
			BT_UART1_printf_string("\nSetting Complete!\n");
    1acc:	84 ea       	ldi	r24, 0xA4	; 164
    1ace:	98 e0       	ldi	r25, 0x08	; 8
    1ad0:	0e 94 15 03 	call	0x62a	; 0x62a <BT_UART1_printf_string>
			show_Set();
    1ad4:	d9 dc       	rcall	.-1614   	; 0x1488 <show_Set>
			
			I2C_LCD_write_string_XY(0, 0, "Setting Complete");
    1ad6:	48 eb       	ldi	r20, 0xB8	; 184
    1ad8:	58 e0       	ldi	r21, 0x08	; 8
    1ada:	60 e0       	ldi	r22, 0x00	; 0
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	0e 94 2c 04 	call	0x858	; 0x858 <I2C_LCD_write_string_XY>
			I2C_LCD_write_string_XY(1, 0, "      ---       ");
    1ae2:	49 ec       	ldi	r20, 0xC9	; 201
    1ae4:	58 e0       	ldi	r21, 0x08	; 8
    1ae6:	60 e0       	ldi	r22, 0x00	; 0
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	0e 94 2c 04 	call	0x858	; 0x858 <I2C_LCD_write_string_XY>
    1aee:	ff ef       	ldi	r31, 0xFF	; 255
    1af0:	23 ed       	ldi	r18, 0xD3	; 211
    1af2:	30 e3       	ldi	r19, 0x30	; 48
    1af4:	f1 50       	subi	r31, 0x01	; 1
    1af6:	20 40       	sbci	r18, 0x00	; 0
    1af8:	30 40       	sbci	r19, 0x00	; 0
    1afa:	e1 f7       	brne	.-8      	; 0x1af4 <set_Feeding+0x566>
    1afc:	00 c0       	rjmp	.+0      	; 0x1afe <set_Feeding+0x570>
			_delay_ms(1000);
			
			blink_flag = 0;
    1afe:	00 00       	nop
    1b00:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <blink_flag>
			input_flag = 0;
    1b04:	10 92 61 09 	sts	0x0961, r1	; 0x800961 <input_flag>
			set_count = 0;
    1b08:	10 92 5c 09 	sts	0x095C, r1	; 0x80095c <set_count>
			settingState = 0;
    1b0c:	10 92 60 09 	sts	0x0960, r1	; 0x800960 <settingState>
			settingFlag = 0;
    1b10:	10 92 62 09 	sts	0x0962, r1	; 0x800962 <settingFlag>
			RUN_STATE = CLOCK;
    1b14:	10 92 e0 09 	sts	0x09E0, r1	; 0x8009e0 <RUN_STATE>
			
			print_Menu();
    1b18:	0e 94 94 04 	call	0x928	; 0x928 <print_Menu>
			break;
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
		}
		break;
	}
}
    1b26:	0f 90       	pop	r0
			
			// times만큼 동적할당한 2차원 배열 feed_time[times][2]에 시간, 분 값을 넣어야함
			// 08:30 과 같이 정해진 양식으로 값을 받아서
			time_Tokken = strtok(receiveData, ":");
			while(time_Tokken != NULL){
				feed_time[set_count][j] = atoi(time_Tokken);
    1b28:	0b c0       	rjmp	.+22     	; 0x1b40 <set_Feeding+0x5b2>
    1b2a:	36 d4       	rcall	.+2156   	; 0x2398 <atoi>
    1b2c:	e0 91 5c 09 	lds	r30, 0x095C	; 0x80095c <set_count>
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	ee 0f       	add	r30, r30
    1b34:	ff 1f       	adc	r31, r31
    1b36:	e0 5b       	subi	r30, 0xB0	; 176
    1b38:	f6 4f       	sbci	r31, 0xF6	; 246
    1b3a:	80 83       	st	Z, r24
				j++;
    1b3c:	c1 e0       	ldi	r28, 0x01	; 1
    1b3e:	81 ce       	rjmp	.-766    	; 0x1842 <set_Feeding+0x2b4>
			print_Menu();
			break;
		}
		break;
	}
}
    1b40:	df 91       	pop	r29
    1b42:	cf 91       	pop	r28
    1b44:	1f 91       	pop	r17
    1b46:	0f 91       	pop	r16
    1b48:	ff 90       	pop	r15
    1b4a:	ef 90       	pop	r14
    1b4c:	df 90       	pop	r13
    1b4e:	cf 90       	pop	r12
    1b50:	08 95       	ret

00001b52 <main>:
////////////////////////////////////////
//---------- main 함수 시작 ----------//
int main(void)
{
	// HC-06 STATE 입력
	STATE_DDR &= ~(1 << HC06_STATE);
    1b52:	e4 e6       	ldi	r30, 0x64	; 100
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	8f 7e       	andi	r24, 0xEF	; 239
    1b5a:	80 83       	st	Z, r24
	// 절전모드 위한 릴레이
	RELAY_DDR |= (1 << RELAY_SIG);
    1b5c:	80 81       	ld	r24, Z
    1b5e:	82 60       	ori	r24, 0x02	; 2
    1b60:	80 83       	st	Z, r24
	
	// 외부 9전원 ON
	RELAY_PORT |= (1 << RELAY_SIG);
    1b62:	e5 e6       	ldi	r30, 0x65	; 101
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	82 60       	ori	r24, 0x02	; 2
    1b6a:	80 83       	st	Z, r24
	
	I2C_LCD_init();
    1b6c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <I2C_LCD_init>
	I2C_LCD_write_string_XY(0, 0, "INITIALIZING....");
    1b70:	4a ed       	ldi	r20, 0xDA	; 218
    1b72:	58 e0       	ldi	r21, 0x08	; 8
    1b74:	60 e0       	ldi	r22, 0x00	; 0
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	0e 94 2c 04 	call	0x858	; 0x858 <I2C_LCD_write_string_XY>
	
	DHT_Setup();
    1b7c:	0e 94 04 01 	call	0x208	; 0x208 <DHT_Setup>
	
	BT_UART1_Init();
    1b80:	0e 94 fd 02 	call	0x5fa	; 0x5fa <BT_UART1_Init>
	
	DS1302_Init();
    1b84:	0e 94 14 02 	call	0x428	; 0x428 <DS1302_Init>
	timer0_Init();
    1b88:	c0 d0       	rcall	.+384    	; 0x1d0a <timer0_Init>
	
	servo_Init();
    1b8a:	94 d0       	rcall	.+296    	; 0x1cb4 <servo_Init>
	servo_Run(0);
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	a3 d0       	rcall	.+326    	; 0x1cd6 <servo_Run>
    1b90:	0e 94 6d 00 	call	0xda	; 0xda <button_Init>
	
	button_Init();
    1b94:	78 94       	sei
	
	sei();
    1b96:	81 e1       	ldi	r24, 0x11	; 17
	stdout = &OUTPUT;
    1b98:	91 e0       	ldi	r25, 0x01	; 1
    1b9a:	90 93 e6 09 	sts	0x09E6, r25	; 0x8009e6 <__iob+0x3>
    1b9e:	80 93 e5 09 	sts	0x09E5, r24	; 0x8009e5 <__iob+0x2>
	
	prevMillis = millis();
    1ba2:	d3 d0       	rcall	.+422    	; 0x1d4a <millis>
    1ba4:	60 93 8a 09 	sts	0x098A, r22	; 0x80098a <prevMillis>
    1ba8:	70 93 8b 09 	sts	0x098B, r23	; 0x80098b <prevMillis+0x1>
    1bac:	80 93 8c 09 	sts	0x098C, r24	; 0x80098c <prevMillis+0x2>
    1bb0:	90 93 8d 09 	sts	0x098D, r25	; 0x80098d <prevMillis+0x3>
    1bb4:	0e 94 96 00 	call	0x12c	; 0x12c <buzzer_Init>
	
	buzzer_Init();
    1bb8:	0e 94 b9 00 	call	0x172	; 0x172 <powerOnBuzzer>
	powerOnBuzzer();
    1bbc:	6b e4       	ldi	r22, 0x4B	; 75
	
	DHT_Read(temp, humi);
    1bbe:	79 e0       	ldi	r23, 0x09	; 9
    1bc0:	8d e4       	ldi	r24, 0x4D	; 77
    1bc2:	99 e0       	ldi	r25, 0x09	; 9
    1bc4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DHT_Read>
    1bc8:	10 92 e0 09 	sts	0x09E0, r1	; 0x8009e0 <RUN_STATE>
	
	RUN_STATE = CLOCK;
    1bcc:	0e 94 e5 03 	call	0x7ca	; 0x7ca <I2C_LCD_clear>
	
	I2C_LCD_clear();
    1bd0:	c3 e6       	ldi	r28, 0x63	; 99
	
	//---------- 루프 시작 ----------//
	while (1)
	{
		// 블루투스와 스마트폰 연결되었을 때 메뉴 출력
		if( ( (STATE_PIN & (0x01 << HC06_STATE)) == (0x01 << HC06_STATE)) && (connect_state == 0) ){
    1bd2:	d0 e0       	ldi	r29, 0x00	; 0
    1bd4:	01 e0       	ldi	r16, 0x01	; 1
			print_Menu();
			buttonBuzzer();
			connect_state = 1;
    1bd6:	14 e0       	ldi	r17, 0x04	; 4
			_delay_ms(2);
		}
		
		// 버튼 1번 눌리면 1회 수동 급여
		if(button1_State()){
			RUN_STATE = FEEDING;
    1bd8:	88 81       	ld	r24, Y
	
	//---------- 루프 시작 ----------//
	while (1)
	{
		// 블루투스와 스마트폰 연결되었을 때 메뉴 출력
		if( ( (STATE_PIN & (0x01 << HC06_STATE)) == (0x01 << HC06_STATE)) && (connect_state == 0) ){
    1bda:	84 ff       	sbrs	r24, 4
    1bdc:	0b c0       	rjmp	.+22     	; 0x1bf4 <main+0xa2>
    1bde:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <connect_state>
    1be2:	81 11       	cpse	r24, r1
    1be4:	07 c0       	rjmp	.+14     	; 0x1bf4 <main+0xa2>
    1be6:	0e 94 94 04 	call	0x928	; 0x928 <print_Menu>
			print_Menu();
    1bea:	0e 94 e5 00 	call	0x1ca	; 0x1ca <buttonBuzzer>
			buttonBuzzer();
    1bee:	00 93 5e 09 	sts	0x095E, r16	; 0x80095e <connect_state>
			connect_state = 1;
    1bf2:	04 c0       	rjmp	.+8      	; 0x1bfc <main+0xaa>
    1bf4:	88 81       	ld	r24, Y
			}else if( ( (STATE_PIN & (0x01 << HC06_STATE)) == 0) ){
    1bf6:	84 ff       	sbrs	r24, 4
    1bf8:	10 92 5e 09 	sts	0x095E, r1	; 0x80095e <connect_state>
			connect_state = 0;
    1bfc:	0e 94 23 03 	call	0x646	; 0x646 <BT_isRxString>
		}
		
		if(BT_isRxString() && (settingFlag == 0)){
    1c00:	88 23       	and	r24, r24
    1c02:	b9 f0       	breq	.+46     	; 0x1c32 <main+0xe0>
    1c04:	80 91 62 09 	lds	r24, 0x0962	; 0x800962 <settingFlag>
    1c08:	81 11       	cpse	r24, r1
    1c0a:	13 c0       	rjmp	.+38     	; 0x1c32 <main+0xe0>
    1c0c:	0e 94 26 03 	call	0x64c	; 0x64c <BT_getRxString>
			receiveData = BT_getRxString();
    1c10:	90 93 a3 09 	sts	0x09A3, r25	; 0x8009a3 <receiveData+0x1>
    1c14:	80 93 a2 09 	sts	0x09A2, r24	; 0x8009a2 <receiveData>
			
			num = atoi(receiveData);
    1c18:	bf d3       	rcall	.+1918   	; 0x2398 <atoi>
    1c1a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <num>
    1c1e:	0e 94 cd 05 	call	0xb9a	; 0xb9a <set_State>
			RUN_STATE = set_State();
    1c22:	80 93 e0 09 	sts	0x09E0, r24	; 0x8009e0 <RUN_STATE>
    1c26:	8f e3       	ldi	r24, 0x3F	; 63
    1c28:	9f e1       	ldi	r25, 0x1F	; 31
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <main+0xd8>
    1c2e:	00 c0       	rjmp	.+0      	; 0x1c30 <main+0xde>
    1c30:	00 00       	nop
    1c32:	0e 94 73 00 	call	0xe6	; 0xe6 <button1_State>
			// 딜레이를 주지 않으면 블루투스가 잘 안됨
			_delay_ms(2);
		}
		
		// 버튼 1번 눌리면 1회 수동 급여
		if(button1_State()){
    1c36:	88 23       	and	r24, r24
    1c38:	19 f0       	breq	.+6      	; 0x1c40 <main+0xee>
    1c3a:	10 93 e0 09 	sts	0x09E0, r17	; 0x8009e0 <RUN_STATE>
			RUN_STATE = FEEDING;
    1c3e:	2e c0       	rjmp	.+92     	; 0x1c9c <main+0x14a>
    1c40:	e0 91 e0 09 	lds	r30, 0x09E0	; 0x8009e0 <RUN_STATE>
		}
		
		switch(RUN_STATE){
    1c44:	8e 2f       	mov	r24, r30
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	87 30       	cpi	r24, 0x07	; 7
    1c4a:	91 05       	cpc	r25, r1
    1c4c:	28 f6       	brcc	.-118    	; 0x1bd8 <main+0x86>
    1c4e:	fc 01       	movw	r30, r24
    1c50:	ea 5b       	subi	r30, 0xBA	; 186
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	89 c3       	rjmp	.+1810   	; 0x2368 <__tablejump2__>
			case CLOCK:
			show_Clock();
    1c56:	0e 94 32 05 	call	0xa64	; 0xa64 <show_Clock>
			feeding_at_time();
    1c5a:	7f db       	rcall	.-2306   	; 0x135a <feeding_at_time>
    1c5c:	bd cf       	rjmp	.-134    	; 0x1bd8 <main+0x86>
			break;
    1c5e:	0e 94 26 06 	call	0xc4c	; 0xc4c <BT_transmit_TH>
			
			case SHOW_TH:
			BT_transmit_TH();
    1c62:	10 92 e0 09 	sts	0x09E0, r1	; 0x8009e0 <RUN_STATE>
			RUN_STATE = CLOCK;
			break;
    1c66:	b8 cf       	rjmp	.-144    	; 0x1bd8 <main+0x86>
			
			case TIME_SETTING:
			if(settingFlag == 1) set_DS1302();
    1c68:	80 91 62 09 	lds	r24, 0x0962	; 0x800962 <settingFlag>
    1c6c:	81 30       	cpi	r24, 0x01	; 1
    1c6e:	09 f0       	breq	.+2      	; 0x1c72 <main+0x120>
    1c70:	b3 cf       	rjmp	.-154    	; 0x1bd8 <main+0x86>
    1c72:	1d d8       	rcall	.-4038   	; 0xcae <set_DS1302>
    1c74:	b1 cf       	rjmp	.-158    	; 0x1bd8 <main+0x86>
			break;
			
			case FEEDING_SETTING:
			if(settingFlag == 1) set_Feeding();
    1c76:	80 91 62 09 	lds	r24, 0x0962	; 0x800962 <settingFlag>
    1c7a:	81 30       	cpi	r24, 0x01	; 1
    1c7c:	09 f0       	breq	.+2      	; 0x1c80 <main+0x12e>
    1c7e:	ac cf       	rjmp	.-168    	; 0x1bd8 <main+0x86>
    1c80:	86 dc       	rcall	.-1780   	; 0x158e <set_Feeding>
    1c82:	aa cf       	rjmp	.-172    	; 0x1bd8 <main+0x86>
			break;
			
			case SHOW_SETTING:
			show_Set();
    1c84:	01 dc       	rcall	.-2046   	; 0x1488 <show_Set>
    1c86:	10 92 e0 09 	sts	0x09E0, r1	; 0x8009e0 <RUN_STATE>
			RUN_STATE = CLOCK;
    1c8a:	a6 cf       	rjmp	.-180    	; 0x1bd8 <main+0x86>
			break;
    1c8c:	80 91 62 09 	lds	r24, 0x0962	; 0x800962 <settingFlag>
			
			case SERVO_SETTING:
			if(settingFlag == 1) servo_Set();
    1c90:	81 30       	cpi	r24, 0x01	; 1
    1c92:	09 f0       	breq	.+2      	; 0x1c96 <main+0x144>
    1c94:	a1 cf       	rjmp	.-190    	; 0x1bd8 <main+0x86>
    1c96:	0e 94 b0 04 	call	0x960	; 0x960 <servo_Set>
    1c9a:	9e cf       	rjmp	.-196    	; 0x1bd8 <main+0x86>
    1c9c:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <servo_degree>
			break;
			
			case FEEDING:
			feeding(1, servo_degree);
    1ca0:	80 2f       	mov	r24, r16
    1ca2:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <feeding>
    1ca6:	8b ee       	ldi	r24, 0xEB	; 235
			BT_UART1_printf_string("Manual Feeding Complete!\n");
    1ca8:	98 e0       	ldi	r25, 0x08	; 8
    1caa:	0e 94 15 03 	call	0x62a	; 0x62a <BT_UART1_printf_string>
    1cae:	10 92 e0 09 	sts	0x09E0, r1	; 0x8009e0 <RUN_STATE>
			RUN_STATE = CLOCK;
    1cb2:	92 cf       	rjmp	.-220    	; 0x1bd8 <main+0x86>

00001cb4 <servo_Init>:
	// PE 3번핀에 Servo모터 제어핀 연결
	//SERVO_DDR |= (1 << SERVO_SIG);
	// 서보모터 헌팅현상을 막기 위해 서보모터 동작 전/후 ON/OFF
	
	// 20ms 주기를 만들기 위해 분주비 64, TOP 5000의 고속 PWM 설정
	TCCR1A |= (1 << WGM11) | (0 << WGM10);
    1cb4:	8f b5       	in	r24, 0x2f	; 47
    1cb6:	82 60       	ori	r24, 0x02	; 2
    1cb8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13) | (1 << WGM12);	// 모드 14, 고속 PWM
    1cba:	8e b5       	in	r24, 0x2e	; 46
    1cbc:	88 61       	ori	r24, 0x18	; 24
    1cbe:	8e bd       	out	0x2e, r24	; 46
	
	// TOP : ICR1, 비교일치값: OCR1A 레지스터
	TCCR1A |= (1 << COM1A1) | (0 << COM1A0);	// 비반전모드
    1cc0:	8f b5       	in	r24, 0x2f	; 47
    1cc2:	80 68       	ori	r24, 0x80	; 128
    1cc4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << CS11) | (1 << CS10);		// 분주율 64
    1cc6:	8e b5       	in	r24, 0x2e	; 46
    1cc8:	83 60       	ori	r24, 0x03	; 3
    1cca:	8e bd       	out	0x2e, r24	; 46
	
	ICR1 = 5000 - 1;	// 20ms (20ms / 1/(F_CPU/분주율) = 5000)
    1ccc:	87 e8       	ldi	r24, 0x87	; 135
    1cce:	93 e1       	ldi	r25, 0x13	; 19
    1cd0:	97 bd       	out	0x27, r25	; 39
    1cd2:	86 bd       	out	0x26, r24	; 38
    1cd4:	08 95       	ret

00001cd6 <servo_Run>:
	// SERVO 모터마다 값이 다름.
	//OCR3A = 125 - 1; // 0도
	//OCR3A = 375 - 1; // 90도
	//OCR3A = 625 - 1; // 180도
	
	OCR1A = degValue - 1;
    1cd6:	68 2f       	mov	r22, r24
    1cd8:	70 e0       	ldi	r23, 0x00	; 0
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	33 d2       	rcall	.+1126   	; 0x2146 <__floatsisf>
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	44 e3       	ldi	r20, 0x34	; 52
    1ce6:	53 e4       	ldi	r21, 0x43	; 67
    1ce8:	98 d1       	rcall	.+816    	; 0x201a <__divsf3>
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e8       	ldi	r19, 0x80	; 128
    1cee:	4d ee       	ldi	r20, 0xED	; 237
    1cf0:	53 e4       	ldi	r21, 0x43	; 67
    1cf2:	b5 d2       	rcall	.+1386   	; 0x225e <__mulsf3>
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	4a ef       	ldi	r20, 0xFA	; 250
    1cfa:	52 e4       	ldi	r21, 0x42	; 66
    1cfc:	2a d1       	rcall	.+596    	; 0x1f52 <__addsf3>
    1cfe:	f5 d1       	rcall	.+1002   	; 0x20ea <__fixunssfsi>
    1d00:	61 50       	subi	r22, 0x01	; 1
    1d02:	71 09       	sbc	r23, r1
    1d04:	7b bd       	out	0x2b, r23	; 43
    1d06:	6a bd       	out	0x2a, r22	; 42
    1d08:	08 95       	ret

00001d0a <timer0_Init>:
// static => time.c에서만 사용하게끔 하겠다. 안정성을 위해 외부에서 건드리지 못하게 하겠다.
// 함수 내에서의 static의 역할과 혼동하면 안된다.

void timer0_Init(void){
	// CS0n 분주비 0/1/0(8), 0/1/1(32), 1/0/0(64), 1/0/1(128), 1/1/0(256), 1/1/1(1024)
	TCCR0 |= (1<<CS02) | (0<<CS01) | (0<<CS00);
    1d0a:	83 b7       	in	r24, 0x33	; 51
    1d0c:	84 60       	ori	r24, 0x04	; 4
    1d0e:	83 bf       	out	0x33, r24	; 51
	// CTC Mode 사용
	TCCR0 |= (1<<WGM01) | (0<WGM00);
    1d10:	83 b7       	in	r24, 0x33	; 51
    1d12:	89 60       	ori	r24, 0x09	; 9
    1d14:	83 bf       	out	0x33, r24	; 51
	// Timer/Counter0 Compare Interrupt Enable
	// 비교일치 인터럽트 활성화
	TIMSK |= (1<<OCIE0);
    1d16:	87 b7       	in	r24, 0x37	; 55
    1d18:	82 60       	ori	r24, 0x02	; 2
    1d1a:	87 bf       	out	0x37, r24	; 55
	// CTC Mode 이므로  TCNT가 OCR값과 같아지면 인터럽트 발생
	OCR0 = 250 - 1;
    1d1c:	89 ef       	ldi	r24, 0xF9	; 249
    1d1e:	81 bf       	out	0x31, r24	; 49
    1d20:	08 95       	ret

00001d22 <incMilliSec>:
	// 오버플로우 인터럽트에서 TCNT0 = 256 - 250;과 같은 의미
}

// milliSec를 증가시키는 함수
void incMilliSec(void){
	milliSec++;
    1d22:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <milliSec>
    1d26:	90 91 69 09 	lds	r25, 0x0969	; 0x800969 <milliSec+0x1>
    1d2a:	a0 91 6a 09 	lds	r26, 0x096A	; 0x80096a <milliSec+0x2>
    1d2e:	b0 91 6b 09 	lds	r27, 0x096B	; 0x80096b <milliSec+0x3>
    1d32:	01 96       	adiw	r24, 0x01	; 1
    1d34:	a1 1d       	adc	r26, r1
    1d36:	b1 1d       	adc	r27, r1
    1d38:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <milliSec>
    1d3c:	90 93 69 09 	sts	0x0969, r25	; 0x800969 <milliSec+0x1>
    1d40:	a0 93 6a 09 	sts	0x096A, r26	; 0x80096a <milliSec+0x2>
    1d44:	b0 93 6b 09 	sts	0x096B, r27	; 0x80096b <milliSec+0x3>
    1d48:	08 95       	ret

00001d4a <millis>:
}

// milliSec를 반환하는 함수
uint32_t millis(void){
	return milliSec;
    1d4a:	60 91 68 09 	lds	r22, 0x0968	; 0x800968 <milliSec>
    1d4e:	70 91 69 09 	lds	r23, 0x0969	; 0x800969 <milliSec+0x1>
    1d52:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <milliSec+0x2>
    1d56:	90 91 6b 09 	lds	r25, 0x096B	; 0x80096b <milliSec+0x3>
}
    1d5a:	08 95       	ret

00001d5c <incTime>:

// 1초 단위로 증가하는 시간 함수
void incTime(void){
	if(milliSec % 1000 == 0){ // 왜 500으로 해야 1초가 나오지?!?!!?
    1d5c:	60 91 68 09 	lds	r22, 0x0968	; 0x800968 <milliSec>
    1d60:	70 91 69 09 	lds	r23, 0x0969	; 0x800969 <milliSec+0x1>
    1d64:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <milliSec+0x2>
    1d68:	90 91 6b 09 	lds	r25, 0x096B	; 0x80096b <milliSec+0x3>
    1d6c:	28 ee       	ldi	r18, 0xE8	; 232
    1d6e:	33 e0       	ldi	r19, 0x03	; 3
    1d70:	40 e0       	ldi	r20, 0x00	; 0
    1d72:	50 e0       	ldi	r21, 0x00	; 0
    1d74:	d7 d2       	rcall	.+1454   	; 0x2324 <__udivmodsi4>
    1d76:	67 2b       	or	r22, r23
    1d78:	68 2b       	or	r22, r24
    1d7a:	69 2b       	or	r22, r25
    1d7c:	f1 f4       	brne	.+60     	; 0x1dba <incTime+0x5e>
		ss++;
    1d7e:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <ss>
    1d82:	8f 5f       	subi	r24, 0xFF	; 255
		if(ss >= 60){
    1d84:	8c 33       	cpi	r24, 0x3C	; 60
    1d86:	18 f4       	brcc	.+6      	; 0x1d8e <incTime+0x32>
}

// 1초 단위로 증가하는 시간 함수
void incTime(void){
	if(milliSec % 1000 == 0){ // 왜 500으로 해야 1초가 나오지?!?!!?
		ss++;
    1d88:	80 93 65 09 	sts	0x0965, r24	; 0x800965 <ss>
    1d8c:	08 95       	ret
		if(ss >= 60){
			ss = 0;
    1d8e:	10 92 65 09 	sts	0x0965, r1	; 0x800965 <ss>
			mm++;
    1d92:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <mm>
    1d96:	8f 5f       	subi	r24, 0xFF	; 255
			if(mm >= 60){
    1d98:	8c 33       	cpi	r24, 0x3C	; 60
    1d9a:	18 f4       	brcc	.+6      	; 0x1da2 <incTime+0x46>
void incTime(void){
	if(milliSec % 1000 == 0){ // 왜 500으로 해야 1초가 나오지?!?!!?
		ss++;
		if(ss >= 60){
			ss = 0;
			mm++;
    1d9c:	80 93 66 09 	sts	0x0966, r24	; 0x800966 <mm>
    1da0:	08 95       	ret
			if(mm >= 60){
				mm = 0;
    1da2:	10 92 66 09 	sts	0x0966, r1	; 0x800966 <mm>
				hh++;
    1da6:	80 91 67 09 	lds	r24, 0x0967	; 0x800967 <hh>
    1daa:	8f 5f       	subi	r24, 0xFF	; 255
				if (hh>=24) hh = 0;
    1dac:	88 31       	cpi	r24, 0x18	; 24
    1dae:	18 f4       	brcc	.+6      	; 0x1db6 <incTime+0x5a>
		if(ss >= 60){
			ss = 0;
			mm++;
			if(mm >= 60){
				mm = 0;
				hh++;
    1db0:	80 93 67 09 	sts	0x0967, r24	; 0x800967 <hh>
    1db4:	08 95       	ret
				if (hh>=24) hh = 0;
    1db6:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <hh>
    1dba:	08 95       	ret

00001dbc <leapYear>:
	// 요일 구하기
	return sum % 7;
}

// 윤년 구하는 함수
uint16_t leapYear(uint16_t year){
    1dbc:	ac 01       	movw	r20, r24
	if (year % 4 == 0)
    1dbe:	83 70       	andi	r24, 0x03	; 3
    1dc0:	99 27       	eor	r25, r25
    1dc2:	89 2b       	or	r24, r25
    1dc4:	69 f5       	brne	.+90     	; 0x1e20 <leapYear+0x64>
	{
		if (year % 100 == 0)
    1dc6:	9a 01       	movw	r18, r20
    1dc8:	36 95       	lsr	r19
    1dca:	27 95       	ror	r18
    1dcc:	36 95       	lsr	r19
    1dce:	27 95       	ror	r18
    1dd0:	ab e7       	ldi	r26, 0x7B	; 123
    1dd2:	b4 e1       	ldi	r27, 0x14	; 20
    1dd4:	d2 d2       	rcall	.+1444   	; 0x237a <__umulhisi3>
    1dd6:	96 95       	lsr	r25
    1dd8:	87 95       	ror	r24
    1dda:	64 e6       	ldi	r22, 0x64	; 100
    1ddc:	68 9f       	mul	r22, r24
    1dde:	90 01       	movw	r18, r0
    1de0:	69 9f       	mul	r22, r25
    1de2:	30 0d       	add	r19, r0
    1de4:	11 24       	eor	r1, r1
    1de6:	42 17       	cp	r20, r18
    1de8:	53 07       	cpc	r21, r19
    1dea:	e9 f4       	brne	.+58     	; 0x1e26 <leapYear+0x6a>
		{
			if (year % 400 == 0)
			return 1;
    1dec:	9a 01       	movw	r18, r20
    1dee:	32 95       	swap	r19
    1df0:	22 95       	swap	r18
    1df2:	2f 70       	andi	r18, 0x0F	; 15
    1df4:	23 27       	eor	r18, r19
    1df6:	3f 70       	andi	r19, 0x0F	; 15
    1df8:	23 27       	eor	r18, r19
    1dfa:	ae e3       	ldi	r26, 0x3E	; 62
    1dfc:	ba e0       	ldi	r27, 0x0A	; 10
    1dfe:	bd d2       	rcall	.+1402   	; 0x237a <__umulhisi3>
    1e00:	60 e9       	ldi	r22, 0x90	; 144
    1e02:	71 e0       	ldi	r23, 0x01	; 1
    1e04:	86 9f       	mul	r24, r22
    1e06:	90 01       	movw	r18, r0
    1e08:	87 9f       	mul	r24, r23
    1e0a:	30 0d       	add	r19, r0
    1e0c:	96 9f       	mul	r25, r22
    1e0e:	30 0d       	add	r19, r0
    1e10:	11 24       	eor	r1, r1
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	42 17       	cp	r20, r18
    1e18:	53 07       	cpc	r21, r19
    1e1a:	39 f0       	breq	.+14     	; 0x1e2a <leapYear+0x6e>
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	08 95       	ret
		}
		else
		return 1;
	}
	else
	return 0;
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	08 95       	ret
			return 1;
			else
			return 0;
		}
		else
		return 1;
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	return 0;
    1e2a:	08 95       	ret

00001e2c <getDayofWeek>:
		}
	}
}

// 년,월,일 입력받아서 요일 구하는 함수
uint8_t getDayofWeek(uint16_t year, uint8_t month, uint8_t day){
    1e2c:	2f 92       	push	r2
    1e2e:	3f 92       	push	r3
    1e30:	4f 92       	push	r4
    1e32:	5f 92       	push	r5
    1e34:	6f 92       	push	r6
    1e36:	7f 92       	push	r7
    1e38:	8f 92       	push	r8
    1e3a:	9f 92       	push	r9
    1e3c:	af 92       	push	r10
    1e3e:	bf 92       	push	r11
    1e40:	cf 92       	push	r12
    1e42:	df 92       	push	r13
    1e44:	ef 92       	push	r14
    1e46:	ff 92       	push	r15
    1e48:	0f 93       	push	r16
    1e4a:	1f 93       	push	r17
    1e4c:	cf 93       	push	r28
    1e4e:	df 93       	push	r29
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	e0 97       	sbiw	r28, 0x30	; 48
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	8c 01       	movw	r16, r24
    1e62:	36 2e       	mov	r3, r22
    1e64:	24 2e       	mov	r2, r20
	uint32_t sum = 0, num, months[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
    1e66:	80 e3       	ldi	r24, 0x30	; 48
    1e68:	ef e1       	ldi	r30, 0x1F	; 31
    1e6a:	f1 e0       	ldi	r31, 0x01	; 1
    1e6c:	de 01       	movw	r26, r28
    1e6e:	11 96       	adiw	r26, 0x01	; 1
    1e70:	01 90       	ld	r0, Z+
    1e72:	0d 92       	st	X+, r0
    1e74:	8a 95       	dec	r24
    1e76:	e1 f7       	brne	.-8      	; 0x1e70 <getDayofWeek+0x44>
	
	// 총 일수 구하기
	for (num = 1; num < year; num++)
    1e78:	48 01       	movw	r8, r16
    1e7a:	a1 2c       	mov	r10, r1
    1e7c:	b1 2c       	mov	r11, r1
    1e7e:	82 e0       	ldi	r24, 0x02	; 2
    1e80:	88 16       	cp	r8, r24
    1e82:	91 04       	cpc	r9, r1
    1e84:	a1 04       	cpc	r10, r1
    1e86:	b1 04       	cpc	r11, r1
    1e88:	d0 f0       	brcs	.+52     	; 0x1ebe <getDayofWeek+0x92>
    1e8a:	41 2c       	mov	r4, r1
    1e8c:	51 2c       	mov	r5, r1
    1e8e:	32 01       	movw	r6, r4
    1e90:	43 94       	inc	r4
    1e92:	c1 2c       	mov	r12, r1
    1e94:	d1 2c       	mov	r13, r1
    1e96:	76 01       	movw	r14, r12
	sum += (365 + leapYear(num));
    1e98:	c2 01       	movw	r24, r4
    1e9a:	90 df       	rcall	.-224    	; 0x1dbc <leapYear>
    1e9c:	83 59       	subi	r24, 0x93	; 147
    1e9e:	9e 4f       	sbci	r25, 0xFE	; 254
    1ea0:	c8 0e       	add	r12, r24
    1ea2:	d9 1e       	adc	r13, r25
    1ea4:	e1 1c       	adc	r14, r1
    1ea6:	f1 1c       	adc	r15, r1
// 년,월,일 입력받아서 요일 구하는 함수
uint8_t getDayofWeek(uint16_t year, uint8_t month, uint8_t day){
	uint32_t sum = 0, num, months[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
	
	// 총 일수 구하기
	for (num = 1; num < year; num++)
    1ea8:	8f ef       	ldi	r24, 0xFF	; 255
    1eaa:	48 1a       	sub	r4, r24
    1eac:	58 0a       	sbc	r5, r24
    1eae:	68 0a       	sbc	r6, r24
    1eb0:	78 0a       	sbc	r7, r24
    1eb2:	48 14       	cp	r4, r8
    1eb4:	59 04       	cpc	r5, r9
    1eb6:	6a 04       	cpc	r6, r10
    1eb8:	7b 04       	cpc	r7, r11
    1eba:	70 f3       	brcs	.-36     	; 0x1e98 <getDayofWeek+0x6c>
    1ebc:	03 c0       	rjmp	.+6      	; 0x1ec4 <getDayofWeek+0x98>
	}
}

// 년,월,일 입력받아서 요일 구하는 함수
uint8_t getDayofWeek(uint16_t year, uint8_t month, uint8_t day){
	uint32_t sum = 0, num, months[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
    1ebe:	c1 2c       	mov	r12, r1
    1ec0:	d1 2c       	mov	r13, r1
    1ec2:	76 01       	movw	r14, r12
	
	// 총 일수 구하기
	for (num = 1; num < year; num++)
	sum += (365 + leapYear(num));

	for (num = 0; num < month - 1; num++)
    1ec4:	23 2d       	mov	r18, r3
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	21 50       	subi	r18, 0x01	; 1
    1eca:	31 09       	sbc	r19, r1
    1ecc:	99 f0       	breq	.+38     	; 0x1ef4 <getDayofWeek+0xc8>
    1ece:	fe 01       	movw	r30, r28
    1ed0:	31 96       	adiw	r30, 0x01	; 1
    1ed2:	22 0f       	add	r18, r18
    1ed4:	33 1f       	adc	r19, r19
    1ed6:	22 0f       	add	r18, r18
    1ed8:	33 1f       	adc	r19, r19
    1eda:	2e 0f       	add	r18, r30
    1edc:	3f 1f       	adc	r19, r31
	{
		sum += months[num];
    1ede:	81 91       	ld	r24, Z+
    1ee0:	91 91       	ld	r25, Z+
    1ee2:	a1 91       	ld	r26, Z+
    1ee4:	b1 91       	ld	r27, Z+
    1ee6:	c8 0e       	add	r12, r24
    1ee8:	d9 1e       	adc	r13, r25
    1eea:	ea 1e       	adc	r14, r26
    1eec:	fb 1e       	adc	r15, r27
	
	// 총 일수 구하기
	for (num = 1; num < year; num++)
	sum += (365 + leapYear(num));

	for (num = 0; num < month - 1; num++)
    1eee:	2e 17       	cp	r18, r30
    1ef0:	3f 07       	cpc	r19, r31
    1ef2:	a9 f7       	brne	.-22     	; 0x1ede <getDayofWeek+0xb2>
	{
		sum += months[num];
	}
	if (month > 2)
    1ef4:	82 e0       	ldi	r24, 0x02	; 2
    1ef6:	83 15       	cp	r24, r3
    1ef8:	30 f4       	brcc	.+12     	; 0x1f06 <getDayofWeek+0xda>
	sum += leapYear(year);
    1efa:	c8 01       	movw	r24, r16
    1efc:	5f df       	rcall	.-322    	; 0x1dbc <leapYear>
    1efe:	c8 0e       	add	r12, r24
    1f00:	d9 1e       	adc	r13, r25
    1f02:	e1 1c       	adc	r14, r1
    1f04:	f1 1c       	adc	r15, r1
	sum += day;
	
	// 요일 구하기
	return sum % 7;
    1f06:	c7 01       	movw	r24, r14
    1f08:	b6 01       	movw	r22, r12
    1f0a:	62 0d       	add	r22, r2
    1f0c:	71 1d       	adc	r23, r1
    1f0e:	81 1d       	adc	r24, r1
    1f10:	91 1d       	adc	r25, r1
    1f12:	27 e0       	ldi	r18, 0x07	; 7
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e0       	ldi	r20, 0x00	; 0
    1f18:	50 e0       	ldi	r21, 0x00	; 0
    1f1a:	04 d2       	rcall	.+1032   	; 0x2324 <__udivmodsi4>
    1f1c:	86 2f       	mov	r24, r22
}
    1f1e:	e0 96       	adiw	r28, 0x30	; 48
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	cd bf       	out	0x3d, r28	; 61
    1f2a:	df 91       	pop	r29
    1f2c:	cf 91       	pop	r28
    1f2e:	1f 91       	pop	r17
    1f30:	0f 91       	pop	r16
    1f32:	ff 90       	pop	r15
    1f34:	ef 90       	pop	r14
    1f36:	df 90       	pop	r13
    1f38:	cf 90       	pop	r12
    1f3a:	bf 90       	pop	r11
    1f3c:	af 90       	pop	r10
    1f3e:	9f 90       	pop	r9
    1f40:	8f 90       	pop	r8
    1f42:	7f 90       	pop	r7
    1f44:	6f 90       	pop	r6
    1f46:	5f 90       	pop	r5
    1f48:	4f 90       	pop	r4
    1f4a:	3f 90       	pop	r3
    1f4c:	2f 90       	pop	r2
    1f4e:	08 95       	ret

00001f50 <__subsf3>:
    1f50:	50 58       	subi	r21, 0x80	; 128

00001f52 <__addsf3>:
    1f52:	bb 27       	eor	r27, r27
    1f54:	aa 27       	eor	r26, r26
    1f56:	0e d0       	rcall	.+28     	; 0x1f74 <__addsf3x>
    1f58:	48 c1       	rjmp	.+656    	; 0x21ea <__fp_round>
    1f5a:	39 d1       	rcall	.+626    	; 0x21ce <__fp_pscA>
    1f5c:	30 f0       	brcs	.+12     	; 0x1f6a <__addsf3+0x18>
    1f5e:	3e d1       	rcall	.+636    	; 0x21dc <__fp_pscB>
    1f60:	20 f0       	brcs	.+8      	; 0x1f6a <__addsf3+0x18>
    1f62:	31 f4       	brne	.+12     	; 0x1f70 <__addsf3+0x1e>
    1f64:	9f 3f       	cpi	r25, 0xFF	; 255
    1f66:	11 f4       	brne	.+4      	; 0x1f6c <__addsf3+0x1a>
    1f68:	1e f4       	brtc	.+6      	; 0x1f70 <__addsf3+0x1e>
    1f6a:	2e c1       	rjmp	.+604    	; 0x21c8 <__fp_nan>
    1f6c:	0e f4       	brtc	.+2      	; 0x1f70 <__addsf3+0x1e>
    1f6e:	e0 95       	com	r30
    1f70:	e7 fb       	bst	r30, 7
    1f72:	24 c1       	rjmp	.+584    	; 0x21bc <__fp_inf>

00001f74 <__addsf3x>:
    1f74:	e9 2f       	mov	r30, r25
    1f76:	4a d1       	rcall	.+660    	; 0x220c <__fp_split3>
    1f78:	80 f3       	brcs	.-32     	; 0x1f5a <__addsf3+0x8>
    1f7a:	ba 17       	cp	r27, r26
    1f7c:	62 07       	cpc	r22, r18
    1f7e:	73 07       	cpc	r23, r19
    1f80:	84 07       	cpc	r24, r20
    1f82:	95 07       	cpc	r25, r21
    1f84:	18 f0       	brcs	.+6      	; 0x1f8c <__addsf3x+0x18>
    1f86:	71 f4       	brne	.+28     	; 0x1fa4 <__addsf3x+0x30>
    1f88:	9e f5       	brtc	.+102    	; 0x1ff0 <__addsf3x+0x7c>
    1f8a:	62 c1       	rjmp	.+708    	; 0x2250 <__fp_zero>
    1f8c:	0e f4       	brtc	.+2      	; 0x1f90 <__addsf3x+0x1c>
    1f8e:	e0 95       	com	r30
    1f90:	0b 2e       	mov	r0, r27
    1f92:	ba 2f       	mov	r27, r26
    1f94:	a0 2d       	mov	r26, r0
    1f96:	0b 01       	movw	r0, r22
    1f98:	b9 01       	movw	r22, r18
    1f9a:	90 01       	movw	r18, r0
    1f9c:	0c 01       	movw	r0, r24
    1f9e:	ca 01       	movw	r24, r20
    1fa0:	a0 01       	movw	r20, r0
    1fa2:	11 24       	eor	r1, r1
    1fa4:	ff 27       	eor	r31, r31
    1fa6:	59 1b       	sub	r21, r25
    1fa8:	99 f0       	breq	.+38     	; 0x1fd0 <__addsf3x+0x5c>
    1faa:	59 3f       	cpi	r21, 0xF9	; 249
    1fac:	50 f4       	brcc	.+20     	; 0x1fc2 <__addsf3x+0x4e>
    1fae:	50 3e       	cpi	r21, 0xE0	; 224
    1fb0:	68 f1       	brcs	.+90     	; 0x200c <__addsf3x+0x98>
    1fb2:	1a 16       	cp	r1, r26
    1fb4:	f0 40       	sbci	r31, 0x00	; 0
    1fb6:	a2 2f       	mov	r26, r18
    1fb8:	23 2f       	mov	r18, r19
    1fba:	34 2f       	mov	r19, r20
    1fbc:	44 27       	eor	r20, r20
    1fbe:	58 5f       	subi	r21, 0xF8	; 248
    1fc0:	f3 cf       	rjmp	.-26     	; 0x1fa8 <__addsf3x+0x34>
    1fc2:	46 95       	lsr	r20
    1fc4:	37 95       	ror	r19
    1fc6:	27 95       	ror	r18
    1fc8:	a7 95       	ror	r26
    1fca:	f0 40       	sbci	r31, 0x00	; 0
    1fcc:	53 95       	inc	r21
    1fce:	c9 f7       	brne	.-14     	; 0x1fc2 <__addsf3x+0x4e>
    1fd0:	7e f4       	brtc	.+30     	; 0x1ff0 <__addsf3x+0x7c>
    1fd2:	1f 16       	cp	r1, r31
    1fd4:	ba 0b       	sbc	r27, r26
    1fd6:	62 0b       	sbc	r22, r18
    1fd8:	73 0b       	sbc	r23, r19
    1fda:	84 0b       	sbc	r24, r20
    1fdc:	ba f0       	brmi	.+46     	; 0x200c <__addsf3x+0x98>
    1fde:	91 50       	subi	r25, 0x01	; 1
    1fe0:	a1 f0       	breq	.+40     	; 0x200a <__addsf3x+0x96>
    1fe2:	ff 0f       	add	r31, r31
    1fe4:	bb 1f       	adc	r27, r27
    1fe6:	66 1f       	adc	r22, r22
    1fe8:	77 1f       	adc	r23, r23
    1fea:	88 1f       	adc	r24, r24
    1fec:	c2 f7       	brpl	.-16     	; 0x1fde <__addsf3x+0x6a>
    1fee:	0e c0       	rjmp	.+28     	; 0x200c <__addsf3x+0x98>
    1ff0:	ba 0f       	add	r27, r26
    1ff2:	62 1f       	adc	r22, r18
    1ff4:	73 1f       	adc	r23, r19
    1ff6:	84 1f       	adc	r24, r20
    1ff8:	48 f4       	brcc	.+18     	; 0x200c <__addsf3x+0x98>
    1ffa:	87 95       	ror	r24
    1ffc:	77 95       	ror	r23
    1ffe:	67 95       	ror	r22
    2000:	b7 95       	ror	r27
    2002:	f7 95       	ror	r31
    2004:	9e 3f       	cpi	r25, 0xFE	; 254
    2006:	08 f0       	brcs	.+2      	; 0x200a <__addsf3x+0x96>
    2008:	b3 cf       	rjmp	.-154    	; 0x1f70 <__addsf3+0x1e>
    200a:	93 95       	inc	r25
    200c:	88 0f       	add	r24, r24
    200e:	08 f0       	brcs	.+2      	; 0x2012 <__addsf3x+0x9e>
    2010:	99 27       	eor	r25, r25
    2012:	ee 0f       	add	r30, r30
    2014:	97 95       	ror	r25
    2016:	87 95       	ror	r24
    2018:	08 95       	ret

0000201a <__divsf3>:
    201a:	0c d0       	rcall	.+24     	; 0x2034 <__divsf3x>
    201c:	e6 c0       	rjmp	.+460    	; 0x21ea <__fp_round>
    201e:	de d0       	rcall	.+444    	; 0x21dc <__fp_pscB>
    2020:	40 f0       	brcs	.+16     	; 0x2032 <__divsf3+0x18>
    2022:	d5 d0       	rcall	.+426    	; 0x21ce <__fp_pscA>
    2024:	30 f0       	brcs	.+12     	; 0x2032 <__divsf3+0x18>
    2026:	21 f4       	brne	.+8      	; 0x2030 <__divsf3+0x16>
    2028:	5f 3f       	cpi	r21, 0xFF	; 255
    202a:	19 f0       	breq	.+6      	; 0x2032 <__divsf3+0x18>
    202c:	c7 c0       	rjmp	.+398    	; 0x21bc <__fp_inf>
    202e:	51 11       	cpse	r21, r1
    2030:	10 c1       	rjmp	.+544    	; 0x2252 <__fp_szero>
    2032:	ca c0       	rjmp	.+404    	; 0x21c8 <__fp_nan>

00002034 <__divsf3x>:
    2034:	eb d0       	rcall	.+470    	; 0x220c <__fp_split3>
    2036:	98 f3       	brcs	.-26     	; 0x201e <__divsf3+0x4>

00002038 <__divsf3_pse>:
    2038:	99 23       	and	r25, r25
    203a:	c9 f3       	breq	.-14     	; 0x202e <__divsf3+0x14>
    203c:	55 23       	and	r21, r21
    203e:	b1 f3       	breq	.-20     	; 0x202c <__divsf3+0x12>
    2040:	95 1b       	sub	r25, r21
    2042:	55 0b       	sbc	r21, r21
    2044:	bb 27       	eor	r27, r27
    2046:	aa 27       	eor	r26, r26
    2048:	62 17       	cp	r22, r18
    204a:	73 07       	cpc	r23, r19
    204c:	84 07       	cpc	r24, r20
    204e:	38 f0       	brcs	.+14     	; 0x205e <__divsf3_pse+0x26>
    2050:	9f 5f       	subi	r25, 0xFF	; 255
    2052:	5f 4f       	sbci	r21, 0xFF	; 255
    2054:	22 0f       	add	r18, r18
    2056:	33 1f       	adc	r19, r19
    2058:	44 1f       	adc	r20, r20
    205a:	aa 1f       	adc	r26, r26
    205c:	a9 f3       	breq	.-22     	; 0x2048 <__divsf3_pse+0x10>
    205e:	33 d0       	rcall	.+102    	; 0x20c6 <__divsf3_pse+0x8e>
    2060:	0e 2e       	mov	r0, r30
    2062:	3a f0       	brmi	.+14     	; 0x2072 <__divsf3_pse+0x3a>
    2064:	e0 e8       	ldi	r30, 0x80	; 128
    2066:	30 d0       	rcall	.+96     	; 0x20c8 <__divsf3_pse+0x90>
    2068:	91 50       	subi	r25, 0x01	; 1
    206a:	50 40       	sbci	r21, 0x00	; 0
    206c:	e6 95       	lsr	r30
    206e:	00 1c       	adc	r0, r0
    2070:	ca f7       	brpl	.-14     	; 0x2064 <__divsf3_pse+0x2c>
    2072:	29 d0       	rcall	.+82     	; 0x20c6 <__divsf3_pse+0x8e>
    2074:	fe 2f       	mov	r31, r30
    2076:	27 d0       	rcall	.+78     	; 0x20c6 <__divsf3_pse+0x8e>
    2078:	66 0f       	add	r22, r22
    207a:	77 1f       	adc	r23, r23
    207c:	88 1f       	adc	r24, r24
    207e:	bb 1f       	adc	r27, r27
    2080:	26 17       	cp	r18, r22
    2082:	37 07       	cpc	r19, r23
    2084:	48 07       	cpc	r20, r24
    2086:	ab 07       	cpc	r26, r27
    2088:	b0 e8       	ldi	r27, 0x80	; 128
    208a:	09 f0       	breq	.+2      	; 0x208e <__divsf3_pse+0x56>
    208c:	bb 0b       	sbc	r27, r27
    208e:	80 2d       	mov	r24, r0
    2090:	bf 01       	movw	r22, r30
    2092:	ff 27       	eor	r31, r31
    2094:	93 58       	subi	r25, 0x83	; 131
    2096:	5f 4f       	sbci	r21, 0xFF	; 255
    2098:	2a f0       	brmi	.+10     	; 0x20a4 <__divsf3_pse+0x6c>
    209a:	9e 3f       	cpi	r25, 0xFE	; 254
    209c:	51 05       	cpc	r21, r1
    209e:	68 f0       	brcs	.+26     	; 0x20ba <__divsf3_pse+0x82>
    20a0:	8d c0       	rjmp	.+282    	; 0x21bc <__fp_inf>
    20a2:	d7 c0       	rjmp	.+430    	; 0x2252 <__fp_szero>
    20a4:	5f 3f       	cpi	r21, 0xFF	; 255
    20a6:	ec f3       	brlt	.-6      	; 0x20a2 <__divsf3_pse+0x6a>
    20a8:	98 3e       	cpi	r25, 0xE8	; 232
    20aa:	dc f3       	brlt	.-10     	; 0x20a2 <__divsf3_pse+0x6a>
    20ac:	86 95       	lsr	r24
    20ae:	77 95       	ror	r23
    20b0:	67 95       	ror	r22
    20b2:	b7 95       	ror	r27
    20b4:	f7 95       	ror	r31
    20b6:	9f 5f       	subi	r25, 0xFF	; 255
    20b8:	c9 f7       	brne	.-14     	; 0x20ac <__divsf3_pse+0x74>
    20ba:	88 0f       	add	r24, r24
    20bc:	91 1d       	adc	r25, r1
    20be:	96 95       	lsr	r25
    20c0:	87 95       	ror	r24
    20c2:	97 f9       	bld	r25, 7
    20c4:	08 95       	ret
    20c6:	e1 e0       	ldi	r30, 0x01	; 1
    20c8:	66 0f       	add	r22, r22
    20ca:	77 1f       	adc	r23, r23
    20cc:	88 1f       	adc	r24, r24
    20ce:	bb 1f       	adc	r27, r27
    20d0:	62 17       	cp	r22, r18
    20d2:	73 07       	cpc	r23, r19
    20d4:	84 07       	cpc	r24, r20
    20d6:	ba 07       	cpc	r27, r26
    20d8:	20 f0       	brcs	.+8      	; 0x20e2 <__divsf3_pse+0xaa>
    20da:	62 1b       	sub	r22, r18
    20dc:	73 0b       	sbc	r23, r19
    20de:	84 0b       	sbc	r24, r20
    20e0:	ba 0b       	sbc	r27, r26
    20e2:	ee 1f       	adc	r30, r30
    20e4:	88 f7       	brcc	.-30     	; 0x20c8 <__divsf3_pse+0x90>
    20e6:	e0 95       	com	r30
    20e8:	08 95       	ret

000020ea <__fixunssfsi>:
    20ea:	98 d0       	rcall	.+304    	; 0x221c <__fp_splitA>
    20ec:	88 f0       	brcs	.+34     	; 0x2110 <__fixunssfsi+0x26>
    20ee:	9f 57       	subi	r25, 0x7F	; 127
    20f0:	90 f0       	brcs	.+36     	; 0x2116 <__fixunssfsi+0x2c>
    20f2:	b9 2f       	mov	r27, r25
    20f4:	99 27       	eor	r25, r25
    20f6:	b7 51       	subi	r27, 0x17	; 23
    20f8:	a0 f0       	brcs	.+40     	; 0x2122 <__fixunssfsi+0x38>
    20fa:	d1 f0       	breq	.+52     	; 0x2130 <__fixunssfsi+0x46>
    20fc:	66 0f       	add	r22, r22
    20fe:	77 1f       	adc	r23, r23
    2100:	88 1f       	adc	r24, r24
    2102:	99 1f       	adc	r25, r25
    2104:	1a f0       	brmi	.+6      	; 0x210c <__fixunssfsi+0x22>
    2106:	ba 95       	dec	r27
    2108:	c9 f7       	brne	.-14     	; 0x20fc <__fixunssfsi+0x12>
    210a:	12 c0       	rjmp	.+36     	; 0x2130 <__fixunssfsi+0x46>
    210c:	b1 30       	cpi	r27, 0x01	; 1
    210e:	81 f0       	breq	.+32     	; 0x2130 <__fixunssfsi+0x46>
    2110:	9f d0       	rcall	.+318    	; 0x2250 <__fp_zero>
    2112:	b1 e0       	ldi	r27, 0x01	; 1
    2114:	08 95       	ret
    2116:	9c c0       	rjmp	.+312    	; 0x2250 <__fp_zero>
    2118:	67 2f       	mov	r22, r23
    211a:	78 2f       	mov	r23, r24
    211c:	88 27       	eor	r24, r24
    211e:	b8 5f       	subi	r27, 0xF8	; 248
    2120:	39 f0       	breq	.+14     	; 0x2130 <__fixunssfsi+0x46>
    2122:	b9 3f       	cpi	r27, 0xF9	; 249
    2124:	cc f3       	brlt	.-14     	; 0x2118 <__fixunssfsi+0x2e>
    2126:	86 95       	lsr	r24
    2128:	77 95       	ror	r23
    212a:	67 95       	ror	r22
    212c:	b3 95       	inc	r27
    212e:	d9 f7       	brne	.-10     	; 0x2126 <__fixunssfsi+0x3c>
    2130:	3e f4       	brtc	.+14     	; 0x2140 <__fixunssfsi+0x56>
    2132:	90 95       	com	r25
    2134:	80 95       	com	r24
    2136:	70 95       	com	r23
    2138:	61 95       	neg	r22
    213a:	7f 4f       	sbci	r23, 0xFF	; 255
    213c:	8f 4f       	sbci	r24, 0xFF	; 255
    213e:	9f 4f       	sbci	r25, 0xFF	; 255
    2140:	08 95       	ret

00002142 <__floatunsisf>:
    2142:	e8 94       	clt
    2144:	09 c0       	rjmp	.+18     	; 0x2158 <__floatsisf+0x12>

00002146 <__floatsisf>:
    2146:	97 fb       	bst	r25, 7
    2148:	3e f4       	brtc	.+14     	; 0x2158 <__floatsisf+0x12>
    214a:	90 95       	com	r25
    214c:	80 95       	com	r24
    214e:	70 95       	com	r23
    2150:	61 95       	neg	r22
    2152:	7f 4f       	sbci	r23, 0xFF	; 255
    2154:	8f 4f       	sbci	r24, 0xFF	; 255
    2156:	9f 4f       	sbci	r25, 0xFF	; 255
    2158:	99 23       	and	r25, r25
    215a:	a9 f0       	breq	.+42     	; 0x2186 <__floatsisf+0x40>
    215c:	f9 2f       	mov	r31, r25
    215e:	96 e9       	ldi	r25, 0x96	; 150
    2160:	bb 27       	eor	r27, r27
    2162:	93 95       	inc	r25
    2164:	f6 95       	lsr	r31
    2166:	87 95       	ror	r24
    2168:	77 95       	ror	r23
    216a:	67 95       	ror	r22
    216c:	b7 95       	ror	r27
    216e:	f1 11       	cpse	r31, r1
    2170:	f8 cf       	rjmp	.-16     	; 0x2162 <__floatsisf+0x1c>
    2172:	fa f4       	brpl	.+62     	; 0x21b2 <__floatsisf+0x6c>
    2174:	bb 0f       	add	r27, r27
    2176:	11 f4       	brne	.+4      	; 0x217c <__floatsisf+0x36>
    2178:	60 ff       	sbrs	r22, 0
    217a:	1b c0       	rjmp	.+54     	; 0x21b2 <__floatsisf+0x6c>
    217c:	6f 5f       	subi	r22, 0xFF	; 255
    217e:	7f 4f       	sbci	r23, 0xFF	; 255
    2180:	8f 4f       	sbci	r24, 0xFF	; 255
    2182:	9f 4f       	sbci	r25, 0xFF	; 255
    2184:	16 c0       	rjmp	.+44     	; 0x21b2 <__floatsisf+0x6c>
    2186:	88 23       	and	r24, r24
    2188:	11 f0       	breq	.+4      	; 0x218e <__floatsisf+0x48>
    218a:	96 e9       	ldi	r25, 0x96	; 150
    218c:	11 c0       	rjmp	.+34     	; 0x21b0 <__floatsisf+0x6a>
    218e:	77 23       	and	r23, r23
    2190:	21 f0       	breq	.+8      	; 0x219a <__floatsisf+0x54>
    2192:	9e e8       	ldi	r25, 0x8E	; 142
    2194:	87 2f       	mov	r24, r23
    2196:	76 2f       	mov	r23, r22
    2198:	05 c0       	rjmp	.+10     	; 0x21a4 <__floatsisf+0x5e>
    219a:	66 23       	and	r22, r22
    219c:	71 f0       	breq	.+28     	; 0x21ba <__floatsisf+0x74>
    219e:	96 e8       	ldi	r25, 0x86	; 134
    21a0:	86 2f       	mov	r24, r22
    21a2:	70 e0       	ldi	r23, 0x00	; 0
    21a4:	60 e0       	ldi	r22, 0x00	; 0
    21a6:	2a f0       	brmi	.+10     	; 0x21b2 <__floatsisf+0x6c>
    21a8:	9a 95       	dec	r25
    21aa:	66 0f       	add	r22, r22
    21ac:	77 1f       	adc	r23, r23
    21ae:	88 1f       	adc	r24, r24
    21b0:	da f7       	brpl	.-10     	; 0x21a8 <__floatsisf+0x62>
    21b2:	88 0f       	add	r24, r24
    21b4:	96 95       	lsr	r25
    21b6:	87 95       	ror	r24
    21b8:	97 f9       	bld	r25, 7
    21ba:	08 95       	ret

000021bc <__fp_inf>:
    21bc:	97 f9       	bld	r25, 7
    21be:	9f 67       	ori	r25, 0x7F	; 127
    21c0:	80 e8       	ldi	r24, 0x80	; 128
    21c2:	70 e0       	ldi	r23, 0x00	; 0
    21c4:	60 e0       	ldi	r22, 0x00	; 0
    21c6:	08 95       	ret

000021c8 <__fp_nan>:
    21c8:	9f ef       	ldi	r25, 0xFF	; 255
    21ca:	80 ec       	ldi	r24, 0xC0	; 192
    21cc:	08 95       	ret

000021ce <__fp_pscA>:
    21ce:	00 24       	eor	r0, r0
    21d0:	0a 94       	dec	r0
    21d2:	16 16       	cp	r1, r22
    21d4:	17 06       	cpc	r1, r23
    21d6:	18 06       	cpc	r1, r24
    21d8:	09 06       	cpc	r0, r25
    21da:	08 95       	ret

000021dc <__fp_pscB>:
    21dc:	00 24       	eor	r0, r0
    21de:	0a 94       	dec	r0
    21e0:	12 16       	cp	r1, r18
    21e2:	13 06       	cpc	r1, r19
    21e4:	14 06       	cpc	r1, r20
    21e6:	05 06       	cpc	r0, r21
    21e8:	08 95       	ret

000021ea <__fp_round>:
    21ea:	09 2e       	mov	r0, r25
    21ec:	03 94       	inc	r0
    21ee:	00 0c       	add	r0, r0
    21f0:	11 f4       	brne	.+4      	; 0x21f6 <__fp_round+0xc>
    21f2:	88 23       	and	r24, r24
    21f4:	52 f0       	brmi	.+20     	; 0x220a <__fp_round+0x20>
    21f6:	bb 0f       	add	r27, r27
    21f8:	40 f4       	brcc	.+16     	; 0x220a <__fp_round+0x20>
    21fa:	bf 2b       	or	r27, r31
    21fc:	11 f4       	brne	.+4      	; 0x2202 <__fp_round+0x18>
    21fe:	60 ff       	sbrs	r22, 0
    2200:	04 c0       	rjmp	.+8      	; 0x220a <__fp_round+0x20>
    2202:	6f 5f       	subi	r22, 0xFF	; 255
    2204:	7f 4f       	sbci	r23, 0xFF	; 255
    2206:	8f 4f       	sbci	r24, 0xFF	; 255
    2208:	9f 4f       	sbci	r25, 0xFF	; 255
    220a:	08 95       	ret

0000220c <__fp_split3>:
    220c:	57 fd       	sbrc	r21, 7
    220e:	90 58       	subi	r25, 0x80	; 128
    2210:	44 0f       	add	r20, r20
    2212:	55 1f       	adc	r21, r21
    2214:	59 f0       	breq	.+22     	; 0x222c <__fp_splitA+0x10>
    2216:	5f 3f       	cpi	r21, 0xFF	; 255
    2218:	71 f0       	breq	.+28     	; 0x2236 <__fp_splitA+0x1a>
    221a:	47 95       	ror	r20

0000221c <__fp_splitA>:
    221c:	88 0f       	add	r24, r24
    221e:	97 fb       	bst	r25, 7
    2220:	99 1f       	adc	r25, r25
    2222:	61 f0       	breq	.+24     	; 0x223c <__fp_splitA+0x20>
    2224:	9f 3f       	cpi	r25, 0xFF	; 255
    2226:	79 f0       	breq	.+30     	; 0x2246 <__fp_splitA+0x2a>
    2228:	87 95       	ror	r24
    222a:	08 95       	ret
    222c:	12 16       	cp	r1, r18
    222e:	13 06       	cpc	r1, r19
    2230:	14 06       	cpc	r1, r20
    2232:	55 1f       	adc	r21, r21
    2234:	f2 cf       	rjmp	.-28     	; 0x221a <__fp_split3+0xe>
    2236:	46 95       	lsr	r20
    2238:	f1 df       	rcall	.-30     	; 0x221c <__fp_splitA>
    223a:	08 c0       	rjmp	.+16     	; 0x224c <__fp_splitA+0x30>
    223c:	16 16       	cp	r1, r22
    223e:	17 06       	cpc	r1, r23
    2240:	18 06       	cpc	r1, r24
    2242:	99 1f       	adc	r25, r25
    2244:	f1 cf       	rjmp	.-30     	; 0x2228 <__fp_splitA+0xc>
    2246:	86 95       	lsr	r24
    2248:	71 05       	cpc	r23, r1
    224a:	61 05       	cpc	r22, r1
    224c:	08 94       	sec
    224e:	08 95       	ret

00002250 <__fp_zero>:
    2250:	e8 94       	clt

00002252 <__fp_szero>:
    2252:	bb 27       	eor	r27, r27
    2254:	66 27       	eor	r22, r22
    2256:	77 27       	eor	r23, r23
    2258:	cb 01       	movw	r24, r22
    225a:	97 f9       	bld	r25, 7
    225c:	08 95       	ret

0000225e <__mulsf3>:
    225e:	0b d0       	rcall	.+22     	; 0x2276 <__mulsf3x>
    2260:	c4 cf       	rjmp	.-120    	; 0x21ea <__fp_round>
    2262:	b5 df       	rcall	.-150    	; 0x21ce <__fp_pscA>
    2264:	28 f0       	brcs	.+10     	; 0x2270 <__mulsf3+0x12>
    2266:	ba df       	rcall	.-140    	; 0x21dc <__fp_pscB>
    2268:	18 f0       	brcs	.+6      	; 0x2270 <__mulsf3+0x12>
    226a:	95 23       	and	r25, r21
    226c:	09 f0       	breq	.+2      	; 0x2270 <__mulsf3+0x12>
    226e:	a6 cf       	rjmp	.-180    	; 0x21bc <__fp_inf>
    2270:	ab cf       	rjmp	.-170    	; 0x21c8 <__fp_nan>
    2272:	11 24       	eor	r1, r1
    2274:	ee cf       	rjmp	.-36     	; 0x2252 <__fp_szero>

00002276 <__mulsf3x>:
    2276:	ca df       	rcall	.-108    	; 0x220c <__fp_split3>
    2278:	a0 f3       	brcs	.-24     	; 0x2262 <__mulsf3+0x4>

0000227a <__mulsf3_pse>:
    227a:	95 9f       	mul	r25, r21
    227c:	d1 f3       	breq	.-12     	; 0x2272 <__mulsf3+0x14>
    227e:	95 0f       	add	r25, r21
    2280:	50 e0       	ldi	r21, 0x00	; 0
    2282:	55 1f       	adc	r21, r21
    2284:	62 9f       	mul	r22, r18
    2286:	f0 01       	movw	r30, r0
    2288:	72 9f       	mul	r23, r18
    228a:	bb 27       	eor	r27, r27
    228c:	f0 0d       	add	r31, r0
    228e:	b1 1d       	adc	r27, r1
    2290:	63 9f       	mul	r22, r19
    2292:	aa 27       	eor	r26, r26
    2294:	f0 0d       	add	r31, r0
    2296:	b1 1d       	adc	r27, r1
    2298:	aa 1f       	adc	r26, r26
    229a:	64 9f       	mul	r22, r20
    229c:	66 27       	eor	r22, r22
    229e:	b0 0d       	add	r27, r0
    22a0:	a1 1d       	adc	r26, r1
    22a2:	66 1f       	adc	r22, r22
    22a4:	82 9f       	mul	r24, r18
    22a6:	22 27       	eor	r18, r18
    22a8:	b0 0d       	add	r27, r0
    22aa:	a1 1d       	adc	r26, r1
    22ac:	62 1f       	adc	r22, r18
    22ae:	73 9f       	mul	r23, r19
    22b0:	b0 0d       	add	r27, r0
    22b2:	a1 1d       	adc	r26, r1
    22b4:	62 1f       	adc	r22, r18
    22b6:	83 9f       	mul	r24, r19
    22b8:	a0 0d       	add	r26, r0
    22ba:	61 1d       	adc	r22, r1
    22bc:	22 1f       	adc	r18, r18
    22be:	74 9f       	mul	r23, r20
    22c0:	33 27       	eor	r19, r19
    22c2:	a0 0d       	add	r26, r0
    22c4:	61 1d       	adc	r22, r1
    22c6:	23 1f       	adc	r18, r19
    22c8:	84 9f       	mul	r24, r20
    22ca:	60 0d       	add	r22, r0
    22cc:	21 1d       	adc	r18, r1
    22ce:	82 2f       	mov	r24, r18
    22d0:	76 2f       	mov	r23, r22
    22d2:	6a 2f       	mov	r22, r26
    22d4:	11 24       	eor	r1, r1
    22d6:	9f 57       	subi	r25, 0x7F	; 127
    22d8:	50 40       	sbci	r21, 0x00	; 0
    22da:	8a f0       	brmi	.+34     	; 0x22fe <__mulsf3_pse+0x84>
    22dc:	e1 f0       	breq	.+56     	; 0x2316 <__mulsf3_pse+0x9c>
    22de:	88 23       	and	r24, r24
    22e0:	4a f0       	brmi	.+18     	; 0x22f4 <__mulsf3_pse+0x7a>
    22e2:	ee 0f       	add	r30, r30
    22e4:	ff 1f       	adc	r31, r31
    22e6:	bb 1f       	adc	r27, r27
    22e8:	66 1f       	adc	r22, r22
    22ea:	77 1f       	adc	r23, r23
    22ec:	88 1f       	adc	r24, r24
    22ee:	91 50       	subi	r25, 0x01	; 1
    22f0:	50 40       	sbci	r21, 0x00	; 0
    22f2:	a9 f7       	brne	.-22     	; 0x22de <__mulsf3_pse+0x64>
    22f4:	9e 3f       	cpi	r25, 0xFE	; 254
    22f6:	51 05       	cpc	r21, r1
    22f8:	70 f0       	brcs	.+28     	; 0x2316 <__mulsf3_pse+0x9c>
    22fa:	60 cf       	rjmp	.-320    	; 0x21bc <__fp_inf>
    22fc:	aa cf       	rjmp	.-172    	; 0x2252 <__fp_szero>
    22fe:	5f 3f       	cpi	r21, 0xFF	; 255
    2300:	ec f3       	brlt	.-6      	; 0x22fc <__mulsf3_pse+0x82>
    2302:	98 3e       	cpi	r25, 0xE8	; 232
    2304:	dc f3       	brlt	.-10     	; 0x22fc <__mulsf3_pse+0x82>
    2306:	86 95       	lsr	r24
    2308:	77 95       	ror	r23
    230a:	67 95       	ror	r22
    230c:	b7 95       	ror	r27
    230e:	f7 95       	ror	r31
    2310:	e7 95       	ror	r30
    2312:	9f 5f       	subi	r25, 0xFF	; 255
    2314:	c1 f7       	brne	.-16     	; 0x2306 <__mulsf3_pse+0x8c>
    2316:	fe 2b       	or	r31, r30
    2318:	88 0f       	add	r24, r24
    231a:	91 1d       	adc	r25, r1
    231c:	96 95       	lsr	r25
    231e:	87 95       	ror	r24
    2320:	97 f9       	bld	r25, 7
    2322:	08 95       	ret

00002324 <__udivmodsi4>:
    2324:	a1 e2       	ldi	r26, 0x21	; 33
    2326:	1a 2e       	mov	r1, r26
    2328:	aa 1b       	sub	r26, r26
    232a:	bb 1b       	sub	r27, r27
    232c:	fd 01       	movw	r30, r26
    232e:	0d c0       	rjmp	.+26     	; 0x234a <__udivmodsi4_ep>

00002330 <__udivmodsi4_loop>:
    2330:	aa 1f       	adc	r26, r26
    2332:	bb 1f       	adc	r27, r27
    2334:	ee 1f       	adc	r30, r30
    2336:	ff 1f       	adc	r31, r31
    2338:	a2 17       	cp	r26, r18
    233a:	b3 07       	cpc	r27, r19
    233c:	e4 07       	cpc	r30, r20
    233e:	f5 07       	cpc	r31, r21
    2340:	20 f0       	brcs	.+8      	; 0x234a <__udivmodsi4_ep>
    2342:	a2 1b       	sub	r26, r18
    2344:	b3 0b       	sbc	r27, r19
    2346:	e4 0b       	sbc	r30, r20
    2348:	f5 0b       	sbc	r31, r21

0000234a <__udivmodsi4_ep>:
    234a:	66 1f       	adc	r22, r22
    234c:	77 1f       	adc	r23, r23
    234e:	88 1f       	adc	r24, r24
    2350:	99 1f       	adc	r25, r25
    2352:	1a 94       	dec	r1
    2354:	69 f7       	brne	.-38     	; 0x2330 <__udivmodsi4_loop>
    2356:	60 95       	com	r22
    2358:	70 95       	com	r23
    235a:	80 95       	com	r24
    235c:	90 95       	com	r25
    235e:	9b 01       	movw	r18, r22
    2360:	ac 01       	movw	r20, r24
    2362:	bd 01       	movw	r22, r26
    2364:	cf 01       	movw	r24, r30
    2366:	08 95       	ret

00002368 <__tablejump2__>:
    2368:	ee 0f       	add	r30, r30
    236a:	ff 1f       	adc	r31, r31
    236c:	00 24       	eor	r0, r0
    236e:	00 1c       	adc	r0, r0
    2370:	0b be       	out	0x3b, r0	; 59
    2372:	07 90       	elpm	r0, Z+
    2374:	f6 91       	elpm	r31, Z
    2376:	e0 2d       	mov	r30, r0
    2378:	09 94       	ijmp

0000237a <__umulhisi3>:
    237a:	a2 9f       	mul	r26, r18
    237c:	b0 01       	movw	r22, r0
    237e:	b3 9f       	mul	r27, r19
    2380:	c0 01       	movw	r24, r0
    2382:	a3 9f       	mul	r26, r19
    2384:	70 0d       	add	r23, r0
    2386:	81 1d       	adc	r24, r1
    2388:	11 24       	eor	r1, r1
    238a:	91 1d       	adc	r25, r1
    238c:	b2 9f       	mul	r27, r18
    238e:	70 0d       	add	r23, r0
    2390:	81 1d       	adc	r24, r1
    2392:	11 24       	eor	r1, r1
    2394:	91 1d       	adc	r25, r1
    2396:	08 95       	ret

00002398 <atoi>:
    2398:	fc 01       	movw	r30, r24
    239a:	88 27       	eor	r24, r24
    239c:	99 27       	eor	r25, r25
    239e:	e8 94       	clt
    23a0:	21 91       	ld	r18, Z+
    23a2:	20 32       	cpi	r18, 0x20	; 32
    23a4:	e9 f3       	breq	.-6      	; 0x23a0 <atoi+0x8>
    23a6:	29 30       	cpi	r18, 0x09	; 9
    23a8:	10 f0       	brcs	.+4      	; 0x23ae <atoi+0x16>
    23aa:	2e 30       	cpi	r18, 0x0E	; 14
    23ac:	c8 f3       	brcs	.-14     	; 0x23a0 <atoi+0x8>
    23ae:	2b 32       	cpi	r18, 0x2B	; 43
    23b0:	39 f0       	breq	.+14     	; 0x23c0 <atoi+0x28>
    23b2:	2d 32       	cpi	r18, 0x2D	; 45
    23b4:	31 f4       	brne	.+12     	; 0x23c2 <atoi+0x2a>
    23b6:	68 94       	set
    23b8:	03 c0       	rjmp	.+6      	; 0x23c0 <atoi+0x28>
    23ba:	35 d0       	rcall	.+106    	; 0x2426 <__mulhi_const_10>
    23bc:	82 0f       	add	r24, r18
    23be:	91 1d       	adc	r25, r1
    23c0:	21 91       	ld	r18, Z+
    23c2:	20 53       	subi	r18, 0x30	; 48
    23c4:	2a 30       	cpi	r18, 0x0A	; 10
    23c6:	c8 f3       	brcs	.-14     	; 0x23ba <atoi+0x22>
    23c8:	1e f4       	brtc	.+6      	; 0x23d0 <atoi+0x38>
    23ca:	90 95       	com	r25
    23cc:	81 95       	neg	r24
    23ce:	9f 4f       	sbci	r25, 0xFF	; 255
    23d0:	08 95       	ret

000023d2 <strtok>:
    23d2:	46 e0       	ldi	r20, 0x06	; 6
    23d4:	59 e0       	ldi	r21, 0x09	; 9
    23d6:	00 c0       	rjmp	.+0      	; 0x23d8 <strtok_r>

000023d8 <strtok_r>:
    23d8:	fa 01       	movw	r30, r20
    23da:	a1 91       	ld	r26, Z+
    23dc:	b0 81       	ld	r27, Z
    23de:	00 97       	sbiw	r24, 0x00	; 0
    23e0:	19 f4       	brne	.+6      	; 0x23e8 <strtok_r+0x10>
    23e2:	10 97       	sbiw	r26, 0x00	; 0
    23e4:	e1 f0       	breq	.+56     	; 0x241e <strtok_r+0x46>
    23e6:	cd 01       	movw	r24, r26
    23e8:	dc 01       	movw	r26, r24
    23ea:	cd 01       	movw	r24, r26
    23ec:	0d 90       	ld	r0, X+
    23ee:	00 20       	and	r0, r0
    23f0:	11 f4       	brne	.+4      	; 0x23f6 <strtok_r+0x1e>
    23f2:	c0 01       	movw	r24, r0
    23f4:	13 c0       	rjmp	.+38     	; 0x241c <strtok_r+0x44>
    23f6:	fb 01       	movw	r30, r22
    23f8:	21 91       	ld	r18, Z+
    23fa:	22 23       	and	r18, r18
    23fc:	19 f0       	breq	.+6      	; 0x2404 <strtok_r+0x2c>
    23fe:	20 15       	cp	r18, r0
    2400:	d9 f7       	brne	.-10     	; 0x23f8 <strtok_r+0x20>
    2402:	f3 cf       	rjmp	.-26     	; 0x23ea <strtok_r+0x12>
    2404:	fb 01       	movw	r30, r22
    2406:	21 91       	ld	r18, Z+
    2408:	20 15       	cp	r18, r0
    240a:	19 f4       	brne	.+6      	; 0x2412 <strtok_r+0x3a>
    240c:	1e 92       	st	-X, r1
    240e:	11 96       	adiw	r26, 0x01	; 1
    2410:	06 c0       	rjmp	.+12     	; 0x241e <strtok_r+0x46>
    2412:	22 23       	and	r18, r18
    2414:	c1 f7       	brne	.-16     	; 0x2406 <strtok_r+0x2e>
    2416:	0d 90       	ld	r0, X+
    2418:	00 20       	and	r0, r0
    241a:	a1 f7       	brne	.-24     	; 0x2404 <strtok_r+0x2c>
    241c:	d0 01       	movw	r26, r0
    241e:	fa 01       	movw	r30, r20
    2420:	a1 93       	st	Z+, r26
    2422:	b0 83       	st	Z, r27
    2424:	08 95       	ret

00002426 <__mulhi_const_10>:
    2426:	7a e0       	ldi	r23, 0x0A	; 10
    2428:	97 9f       	mul	r25, r23
    242a:	90 2d       	mov	r25, r0
    242c:	87 9f       	mul	r24, r23
    242e:	80 2d       	mov	r24, r0
    2430:	91 0d       	add	r25, r1
    2432:	11 24       	eor	r1, r1
    2434:	08 95       	ret

00002436 <sprintf>:
    2436:	0f 93       	push	r16
    2438:	1f 93       	push	r17
    243a:	cf 93       	push	r28
    243c:	df 93       	push	r29
    243e:	cd b7       	in	r28, 0x3d	; 61
    2440:	de b7       	in	r29, 0x3e	; 62
    2442:	2e 97       	sbiw	r28, 0x0e	; 14
    2444:	0f b6       	in	r0, 0x3f	; 63
    2446:	f8 94       	cli
    2448:	de bf       	out	0x3e, r29	; 62
    244a:	0f be       	out	0x3f, r0	; 63
    244c:	cd bf       	out	0x3d, r28	; 61
    244e:	0d 89       	ldd	r16, Y+21	; 0x15
    2450:	1e 89       	ldd	r17, Y+22	; 0x16
    2452:	86 e0       	ldi	r24, 0x06	; 6
    2454:	8c 83       	std	Y+4, r24	; 0x04
    2456:	1a 83       	std	Y+2, r17	; 0x02
    2458:	09 83       	std	Y+1, r16	; 0x01
    245a:	8f ef       	ldi	r24, 0xFF	; 255
    245c:	9f e7       	ldi	r25, 0x7F	; 127
    245e:	9e 83       	std	Y+6, r25	; 0x06
    2460:	8d 83       	std	Y+5, r24	; 0x05
    2462:	ae 01       	movw	r20, r28
    2464:	47 5e       	subi	r20, 0xE7	; 231
    2466:	5f 4f       	sbci	r21, 0xFF	; 255
    2468:	6f 89       	ldd	r22, Y+23	; 0x17
    246a:	78 8d       	ldd	r23, Y+24	; 0x18
    246c:	ce 01       	movw	r24, r28
    246e:	01 96       	adiw	r24, 0x01	; 1
    2470:	10 d0       	rcall	.+32     	; 0x2492 <vfprintf>
    2472:	ef 81       	ldd	r30, Y+7	; 0x07
    2474:	f8 85       	ldd	r31, Y+8	; 0x08
    2476:	e0 0f       	add	r30, r16
    2478:	f1 1f       	adc	r31, r17
    247a:	10 82       	st	Z, r1
    247c:	2e 96       	adiw	r28, 0x0e	; 14
    247e:	0f b6       	in	r0, 0x3f	; 63
    2480:	f8 94       	cli
    2482:	de bf       	out	0x3e, r29	; 62
    2484:	0f be       	out	0x3f, r0	; 63
    2486:	cd bf       	out	0x3d, r28	; 61
    2488:	df 91       	pop	r29
    248a:	cf 91       	pop	r28
    248c:	1f 91       	pop	r17
    248e:	0f 91       	pop	r16
    2490:	08 95       	ret

00002492 <vfprintf>:
    2492:	2f 92       	push	r2
    2494:	3f 92       	push	r3
    2496:	4f 92       	push	r4
    2498:	5f 92       	push	r5
    249a:	6f 92       	push	r6
    249c:	7f 92       	push	r7
    249e:	8f 92       	push	r8
    24a0:	9f 92       	push	r9
    24a2:	af 92       	push	r10
    24a4:	bf 92       	push	r11
    24a6:	cf 92       	push	r12
    24a8:	df 92       	push	r13
    24aa:	ef 92       	push	r14
    24ac:	ff 92       	push	r15
    24ae:	0f 93       	push	r16
    24b0:	1f 93       	push	r17
    24b2:	cf 93       	push	r28
    24b4:	df 93       	push	r29
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	2b 97       	sbiw	r28, 0x0b	; 11
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	de bf       	out	0x3e, r29	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	cd bf       	out	0x3d, r28	; 61
    24c6:	6c 01       	movw	r12, r24
    24c8:	7b 01       	movw	r14, r22
    24ca:	8a 01       	movw	r16, r20
    24cc:	fc 01       	movw	r30, r24
    24ce:	17 82       	std	Z+7, r1	; 0x07
    24d0:	16 82       	std	Z+6, r1	; 0x06
    24d2:	83 81       	ldd	r24, Z+3	; 0x03
    24d4:	81 ff       	sbrs	r24, 1
    24d6:	bf c1       	rjmp	.+894    	; 0x2856 <vfprintf+0x3c4>
    24d8:	ce 01       	movw	r24, r28
    24da:	01 96       	adiw	r24, 0x01	; 1
    24dc:	3c 01       	movw	r6, r24
    24de:	f6 01       	movw	r30, r12
    24e0:	93 81       	ldd	r25, Z+3	; 0x03
    24e2:	f7 01       	movw	r30, r14
    24e4:	93 fd       	sbrc	r25, 3
    24e6:	85 91       	lpm	r24, Z+
    24e8:	93 ff       	sbrs	r25, 3
    24ea:	81 91       	ld	r24, Z+
    24ec:	7f 01       	movw	r14, r30
    24ee:	88 23       	and	r24, r24
    24f0:	09 f4       	brne	.+2      	; 0x24f4 <vfprintf+0x62>
    24f2:	ad c1       	rjmp	.+858    	; 0x284e <vfprintf+0x3bc>
    24f4:	85 32       	cpi	r24, 0x25	; 37
    24f6:	39 f4       	brne	.+14     	; 0x2506 <vfprintf+0x74>
    24f8:	93 fd       	sbrc	r25, 3
    24fa:	85 91       	lpm	r24, Z+
    24fc:	93 ff       	sbrs	r25, 3
    24fe:	81 91       	ld	r24, Z+
    2500:	7f 01       	movw	r14, r30
    2502:	85 32       	cpi	r24, 0x25	; 37
    2504:	21 f4       	brne	.+8      	; 0x250e <vfprintf+0x7c>
    2506:	b6 01       	movw	r22, r12
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	d6 d1       	rcall	.+940    	; 0x28b8 <fputc>
    250c:	e8 cf       	rjmp	.-48     	; 0x24de <vfprintf+0x4c>
    250e:	91 2c       	mov	r9, r1
    2510:	21 2c       	mov	r2, r1
    2512:	31 2c       	mov	r3, r1
    2514:	ff e1       	ldi	r31, 0x1F	; 31
    2516:	f3 15       	cp	r31, r3
    2518:	d8 f0       	brcs	.+54     	; 0x2550 <vfprintf+0xbe>
    251a:	8b 32       	cpi	r24, 0x2B	; 43
    251c:	79 f0       	breq	.+30     	; 0x253c <vfprintf+0xaa>
    251e:	38 f4       	brcc	.+14     	; 0x252e <vfprintf+0x9c>
    2520:	80 32       	cpi	r24, 0x20	; 32
    2522:	79 f0       	breq	.+30     	; 0x2542 <vfprintf+0xb0>
    2524:	83 32       	cpi	r24, 0x23	; 35
    2526:	a1 f4       	brne	.+40     	; 0x2550 <vfprintf+0xbe>
    2528:	23 2d       	mov	r18, r3
    252a:	20 61       	ori	r18, 0x10	; 16
    252c:	1d c0       	rjmp	.+58     	; 0x2568 <vfprintf+0xd6>
    252e:	8d 32       	cpi	r24, 0x2D	; 45
    2530:	61 f0       	breq	.+24     	; 0x254a <vfprintf+0xb8>
    2532:	80 33       	cpi	r24, 0x30	; 48
    2534:	69 f4       	brne	.+26     	; 0x2550 <vfprintf+0xbe>
    2536:	23 2d       	mov	r18, r3
    2538:	21 60       	ori	r18, 0x01	; 1
    253a:	16 c0       	rjmp	.+44     	; 0x2568 <vfprintf+0xd6>
    253c:	83 2d       	mov	r24, r3
    253e:	82 60       	ori	r24, 0x02	; 2
    2540:	38 2e       	mov	r3, r24
    2542:	e3 2d       	mov	r30, r3
    2544:	e4 60       	ori	r30, 0x04	; 4
    2546:	3e 2e       	mov	r3, r30
    2548:	2a c0       	rjmp	.+84     	; 0x259e <vfprintf+0x10c>
    254a:	f3 2d       	mov	r31, r3
    254c:	f8 60       	ori	r31, 0x08	; 8
    254e:	1d c0       	rjmp	.+58     	; 0x258a <vfprintf+0xf8>
    2550:	37 fc       	sbrc	r3, 7
    2552:	2d c0       	rjmp	.+90     	; 0x25ae <vfprintf+0x11c>
    2554:	20 ed       	ldi	r18, 0xD0	; 208
    2556:	28 0f       	add	r18, r24
    2558:	2a 30       	cpi	r18, 0x0A	; 10
    255a:	40 f0       	brcs	.+16     	; 0x256c <vfprintf+0xda>
    255c:	8e 32       	cpi	r24, 0x2E	; 46
    255e:	b9 f4       	brne	.+46     	; 0x258e <vfprintf+0xfc>
    2560:	36 fc       	sbrc	r3, 6
    2562:	75 c1       	rjmp	.+746    	; 0x284e <vfprintf+0x3bc>
    2564:	23 2d       	mov	r18, r3
    2566:	20 64       	ori	r18, 0x40	; 64
    2568:	32 2e       	mov	r3, r18
    256a:	19 c0       	rjmp	.+50     	; 0x259e <vfprintf+0x10c>
    256c:	36 fe       	sbrs	r3, 6
    256e:	06 c0       	rjmp	.+12     	; 0x257c <vfprintf+0xea>
    2570:	8a e0       	ldi	r24, 0x0A	; 10
    2572:	98 9e       	mul	r9, r24
    2574:	20 0d       	add	r18, r0
    2576:	11 24       	eor	r1, r1
    2578:	92 2e       	mov	r9, r18
    257a:	11 c0       	rjmp	.+34     	; 0x259e <vfprintf+0x10c>
    257c:	ea e0       	ldi	r30, 0x0A	; 10
    257e:	2e 9e       	mul	r2, r30
    2580:	20 0d       	add	r18, r0
    2582:	11 24       	eor	r1, r1
    2584:	22 2e       	mov	r2, r18
    2586:	f3 2d       	mov	r31, r3
    2588:	f0 62       	ori	r31, 0x20	; 32
    258a:	3f 2e       	mov	r3, r31
    258c:	08 c0       	rjmp	.+16     	; 0x259e <vfprintf+0x10c>
    258e:	8c 36       	cpi	r24, 0x6C	; 108
    2590:	21 f4       	brne	.+8      	; 0x259a <vfprintf+0x108>
    2592:	83 2d       	mov	r24, r3
    2594:	80 68       	ori	r24, 0x80	; 128
    2596:	38 2e       	mov	r3, r24
    2598:	02 c0       	rjmp	.+4      	; 0x259e <vfprintf+0x10c>
    259a:	88 36       	cpi	r24, 0x68	; 104
    259c:	41 f4       	brne	.+16     	; 0x25ae <vfprintf+0x11c>
    259e:	f7 01       	movw	r30, r14
    25a0:	93 fd       	sbrc	r25, 3
    25a2:	85 91       	lpm	r24, Z+
    25a4:	93 ff       	sbrs	r25, 3
    25a6:	81 91       	ld	r24, Z+
    25a8:	7f 01       	movw	r14, r30
    25aa:	81 11       	cpse	r24, r1
    25ac:	b3 cf       	rjmp	.-154    	; 0x2514 <vfprintf+0x82>
    25ae:	98 2f       	mov	r25, r24
    25b0:	9f 7d       	andi	r25, 0xDF	; 223
    25b2:	95 54       	subi	r25, 0x45	; 69
    25b4:	93 30       	cpi	r25, 0x03	; 3
    25b6:	28 f4       	brcc	.+10     	; 0x25c2 <vfprintf+0x130>
    25b8:	0c 5f       	subi	r16, 0xFC	; 252
    25ba:	1f 4f       	sbci	r17, 0xFF	; 255
    25bc:	9f e3       	ldi	r25, 0x3F	; 63
    25be:	99 83       	std	Y+1, r25	; 0x01
    25c0:	0d c0       	rjmp	.+26     	; 0x25dc <vfprintf+0x14a>
    25c2:	83 36       	cpi	r24, 0x63	; 99
    25c4:	31 f0       	breq	.+12     	; 0x25d2 <vfprintf+0x140>
    25c6:	83 37       	cpi	r24, 0x73	; 115
    25c8:	71 f0       	breq	.+28     	; 0x25e6 <vfprintf+0x154>
    25ca:	83 35       	cpi	r24, 0x53	; 83
    25cc:	09 f0       	breq	.+2      	; 0x25d0 <vfprintf+0x13e>
    25ce:	55 c0       	rjmp	.+170    	; 0x267a <vfprintf+0x1e8>
    25d0:	20 c0       	rjmp	.+64     	; 0x2612 <vfprintf+0x180>
    25d2:	f8 01       	movw	r30, r16
    25d4:	80 81       	ld	r24, Z
    25d6:	89 83       	std	Y+1, r24	; 0x01
    25d8:	0e 5f       	subi	r16, 0xFE	; 254
    25da:	1f 4f       	sbci	r17, 0xFF	; 255
    25dc:	88 24       	eor	r8, r8
    25de:	83 94       	inc	r8
    25e0:	91 2c       	mov	r9, r1
    25e2:	53 01       	movw	r10, r6
    25e4:	12 c0       	rjmp	.+36     	; 0x260a <vfprintf+0x178>
    25e6:	28 01       	movw	r4, r16
    25e8:	f2 e0       	ldi	r31, 0x02	; 2
    25ea:	4f 0e       	add	r4, r31
    25ec:	51 1c       	adc	r5, r1
    25ee:	f8 01       	movw	r30, r16
    25f0:	a0 80       	ld	r10, Z
    25f2:	b1 80       	ldd	r11, Z+1	; 0x01
    25f4:	36 fe       	sbrs	r3, 6
    25f6:	03 c0       	rjmp	.+6      	; 0x25fe <vfprintf+0x16c>
    25f8:	69 2d       	mov	r22, r9
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	02 c0       	rjmp	.+4      	; 0x2602 <vfprintf+0x170>
    25fe:	6f ef       	ldi	r22, 0xFF	; 255
    2600:	7f ef       	ldi	r23, 0xFF	; 255
    2602:	c5 01       	movw	r24, r10
    2604:	4e d1       	rcall	.+668    	; 0x28a2 <strnlen>
    2606:	4c 01       	movw	r8, r24
    2608:	82 01       	movw	r16, r4
    260a:	f3 2d       	mov	r31, r3
    260c:	ff 77       	andi	r31, 0x7F	; 127
    260e:	3f 2e       	mov	r3, r31
    2610:	15 c0       	rjmp	.+42     	; 0x263c <vfprintf+0x1aa>
    2612:	28 01       	movw	r4, r16
    2614:	22 e0       	ldi	r18, 0x02	; 2
    2616:	42 0e       	add	r4, r18
    2618:	51 1c       	adc	r5, r1
    261a:	f8 01       	movw	r30, r16
    261c:	a0 80       	ld	r10, Z
    261e:	b1 80       	ldd	r11, Z+1	; 0x01
    2620:	36 fe       	sbrs	r3, 6
    2622:	03 c0       	rjmp	.+6      	; 0x262a <vfprintf+0x198>
    2624:	69 2d       	mov	r22, r9
    2626:	70 e0       	ldi	r23, 0x00	; 0
    2628:	02 c0       	rjmp	.+4      	; 0x262e <vfprintf+0x19c>
    262a:	6f ef       	ldi	r22, 0xFF	; 255
    262c:	7f ef       	ldi	r23, 0xFF	; 255
    262e:	c5 01       	movw	r24, r10
    2630:	2d d1       	rcall	.+602    	; 0x288c <strnlen_P>
    2632:	4c 01       	movw	r8, r24
    2634:	f3 2d       	mov	r31, r3
    2636:	f0 68       	ori	r31, 0x80	; 128
    2638:	3f 2e       	mov	r3, r31
    263a:	82 01       	movw	r16, r4
    263c:	33 fc       	sbrc	r3, 3
    263e:	19 c0       	rjmp	.+50     	; 0x2672 <vfprintf+0x1e0>
    2640:	82 2d       	mov	r24, r2
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	88 16       	cp	r8, r24
    2646:	99 06       	cpc	r9, r25
    2648:	a0 f4       	brcc	.+40     	; 0x2672 <vfprintf+0x1e0>
    264a:	b6 01       	movw	r22, r12
    264c:	80 e2       	ldi	r24, 0x20	; 32
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	33 d1       	rcall	.+614    	; 0x28b8 <fputc>
    2652:	2a 94       	dec	r2
    2654:	f5 cf       	rjmp	.-22     	; 0x2640 <vfprintf+0x1ae>
    2656:	f5 01       	movw	r30, r10
    2658:	37 fc       	sbrc	r3, 7
    265a:	85 91       	lpm	r24, Z+
    265c:	37 fe       	sbrs	r3, 7
    265e:	81 91       	ld	r24, Z+
    2660:	5f 01       	movw	r10, r30
    2662:	b6 01       	movw	r22, r12
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	28 d1       	rcall	.+592    	; 0x28b8 <fputc>
    2668:	21 10       	cpse	r2, r1
    266a:	2a 94       	dec	r2
    266c:	21 e0       	ldi	r18, 0x01	; 1
    266e:	82 1a       	sub	r8, r18
    2670:	91 08       	sbc	r9, r1
    2672:	81 14       	cp	r8, r1
    2674:	91 04       	cpc	r9, r1
    2676:	79 f7       	brne	.-34     	; 0x2656 <vfprintf+0x1c4>
    2678:	e1 c0       	rjmp	.+450    	; 0x283c <vfprintf+0x3aa>
    267a:	84 36       	cpi	r24, 0x64	; 100
    267c:	11 f0       	breq	.+4      	; 0x2682 <vfprintf+0x1f0>
    267e:	89 36       	cpi	r24, 0x69	; 105
    2680:	39 f5       	brne	.+78     	; 0x26d0 <vfprintf+0x23e>
    2682:	f8 01       	movw	r30, r16
    2684:	37 fe       	sbrs	r3, 7
    2686:	07 c0       	rjmp	.+14     	; 0x2696 <vfprintf+0x204>
    2688:	60 81       	ld	r22, Z
    268a:	71 81       	ldd	r23, Z+1	; 0x01
    268c:	82 81       	ldd	r24, Z+2	; 0x02
    268e:	93 81       	ldd	r25, Z+3	; 0x03
    2690:	0c 5f       	subi	r16, 0xFC	; 252
    2692:	1f 4f       	sbci	r17, 0xFF	; 255
    2694:	08 c0       	rjmp	.+16     	; 0x26a6 <vfprintf+0x214>
    2696:	60 81       	ld	r22, Z
    2698:	71 81       	ldd	r23, Z+1	; 0x01
    269a:	07 2e       	mov	r0, r23
    269c:	00 0c       	add	r0, r0
    269e:	88 0b       	sbc	r24, r24
    26a0:	99 0b       	sbc	r25, r25
    26a2:	0e 5f       	subi	r16, 0xFE	; 254
    26a4:	1f 4f       	sbci	r17, 0xFF	; 255
    26a6:	f3 2d       	mov	r31, r3
    26a8:	ff 76       	andi	r31, 0x6F	; 111
    26aa:	3f 2e       	mov	r3, r31
    26ac:	97 ff       	sbrs	r25, 7
    26ae:	09 c0       	rjmp	.+18     	; 0x26c2 <vfprintf+0x230>
    26b0:	90 95       	com	r25
    26b2:	80 95       	com	r24
    26b4:	70 95       	com	r23
    26b6:	61 95       	neg	r22
    26b8:	7f 4f       	sbci	r23, 0xFF	; 255
    26ba:	8f 4f       	sbci	r24, 0xFF	; 255
    26bc:	9f 4f       	sbci	r25, 0xFF	; 255
    26be:	f0 68       	ori	r31, 0x80	; 128
    26c0:	3f 2e       	mov	r3, r31
    26c2:	2a e0       	ldi	r18, 0x0A	; 10
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	a3 01       	movw	r20, r6
    26c8:	33 d1       	rcall	.+614    	; 0x2930 <__ultoa_invert>
    26ca:	88 2e       	mov	r8, r24
    26cc:	86 18       	sub	r8, r6
    26ce:	44 c0       	rjmp	.+136    	; 0x2758 <vfprintf+0x2c6>
    26d0:	85 37       	cpi	r24, 0x75	; 117
    26d2:	31 f4       	brne	.+12     	; 0x26e0 <vfprintf+0x24e>
    26d4:	23 2d       	mov	r18, r3
    26d6:	2f 7e       	andi	r18, 0xEF	; 239
    26d8:	b2 2e       	mov	r11, r18
    26da:	2a e0       	ldi	r18, 0x0A	; 10
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	25 c0       	rjmp	.+74     	; 0x272a <vfprintf+0x298>
    26e0:	93 2d       	mov	r25, r3
    26e2:	99 7f       	andi	r25, 0xF9	; 249
    26e4:	b9 2e       	mov	r11, r25
    26e6:	8f 36       	cpi	r24, 0x6F	; 111
    26e8:	c1 f0       	breq	.+48     	; 0x271a <vfprintf+0x288>
    26ea:	18 f4       	brcc	.+6      	; 0x26f2 <vfprintf+0x260>
    26ec:	88 35       	cpi	r24, 0x58	; 88
    26ee:	79 f0       	breq	.+30     	; 0x270e <vfprintf+0x27c>
    26f0:	ae c0       	rjmp	.+348    	; 0x284e <vfprintf+0x3bc>
    26f2:	80 37       	cpi	r24, 0x70	; 112
    26f4:	19 f0       	breq	.+6      	; 0x26fc <vfprintf+0x26a>
    26f6:	88 37       	cpi	r24, 0x78	; 120
    26f8:	21 f0       	breq	.+8      	; 0x2702 <vfprintf+0x270>
    26fa:	a9 c0       	rjmp	.+338    	; 0x284e <vfprintf+0x3bc>
    26fc:	e9 2f       	mov	r30, r25
    26fe:	e0 61       	ori	r30, 0x10	; 16
    2700:	be 2e       	mov	r11, r30
    2702:	b4 fe       	sbrs	r11, 4
    2704:	0d c0       	rjmp	.+26     	; 0x2720 <vfprintf+0x28e>
    2706:	fb 2d       	mov	r31, r11
    2708:	f4 60       	ori	r31, 0x04	; 4
    270a:	bf 2e       	mov	r11, r31
    270c:	09 c0       	rjmp	.+18     	; 0x2720 <vfprintf+0x28e>
    270e:	34 fe       	sbrs	r3, 4
    2710:	0a c0       	rjmp	.+20     	; 0x2726 <vfprintf+0x294>
    2712:	29 2f       	mov	r18, r25
    2714:	26 60       	ori	r18, 0x06	; 6
    2716:	b2 2e       	mov	r11, r18
    2718:	06 c0       	rjmp	.+12     	; 0x2726 <vfprintf+0x294>
    271a:	28 e0       	ldi	r18, 0x08	; 8
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	05 c0       	rjmp	.+10     	; 0x272a <vfprintf+0x298>
    2720:	20 e1       	ldi	r18, 0x10	; 16
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	02 c0       	rjmp	.+4      	; 0x272a <vfprintf+0x298>
    2726:	20 e1       	ldi	r18, 0x10	; 16
    2728:	32 e0       	ldi	r19, 0x02	; 2
    272a:	f8 01       	movw	r30, r16
    272c:	b7 fe       	sbrs	r11, 7
    272e:	07 c0       	rjmp	.+14     	; 0x273e <vfprintf+0x2ac>
    2730:	60 81       	ld	r22, Z
    2732:	71 81       	ldd	r23, Z+1	; 0x01
    2734:	82 81       	ldd	r24, Z+2	; 0x02
    2736:	93 81       	ldd	r25, Z+3	; 0x03
    2738:	0c 5f       	subi	r16, 0xFC	; 252
    273a:	1f 4f       	sbci	r17, 0xFF	; 255
    273c:	06 c0       	rjmp	.+12     	; 0x274a <vfprintf+0x2b8>
    273e:	60 81       	ld	r22, Z
    2740:	71 81       	ldd	r23, Z+1	; 0x01
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	0e 5f       	subi	r16, 0xFE	; 254
    2748:	1f 4f       	sbci	r17, 0xFF	; 255
    274a:	a3 01       	movw	r20, r6
    274c:	f1 d0       	rcall	.+482    	; 0x2930 <__ultoa_invert>
    274e:	88 2e       	mov	r8, r24
    2750:	86 18       	sub	r8, r6
    2752:	fb 2d       	mov	r31, r11
    2754:	ff 77       	andi	r31, 0x7F	; 127
    2756:	3f 2e       	mov	r3, r31
    2758:	36 fe       	sbrs	r3, 6
    275a:	0d c0       	rjmp	.+26     	; 0x2776 <vfprintf+0x2e4>
    275c:	23 2d       	mov	r18, r3
    275e:	2e 7f       	andi	r18, 0xFE	; 254
    2760:	a2 2e       	mov	r10, r18
    2762:	89 14       	cp	r8, r9
    2764:	58 f4       	brcc	.+22     	; 0x277c <vfprintf+0x2ea>
    2766:	34 fe       	sbrs	r3, 4
    2768:	0b c0       	rjmp	.+22     	; 0x2780 <vfprintf+0x2ee>
    276a:	32 fc       	sbrc	r3, 2
    276c:	09 c0       	rjmp	.+18     	; 0x2780 <vfprintf+0x2ee>
    276e:	83 2d       	mov	r24, r3
    2770:	8e 7e       	andi	r24, 0xEE	; 238
    2772:	a8 2e       	mov	r10, r24
    2774:	05 c0       	rjmp	.+10     	; 0x2780 <vfprintf+0x2ee>
    2776:	b8 2c       	mov	r11, r8
    2778:	a3 2c       	mov	r10, r3
    277a:	03 c0       	rjmp	.+6      	; 0x2782 <vfprintf+0x2f0>
    277c:	b8 2c       	mov	r11, r8
    277e:	01 c0       	rjmp	.+2      	; 0x2782 <vfprintf+0x2f0>
    2780:	b9 2c       	mov	r11, r9
    2782:	a4 fe       	sbrs	r10, 4
    2784:	0f c0       	rjmp	.+30     	; 0x27a4 <vfprintf+0x312>
    2786:	fe 01       	movw	r30, r28
    2788:	e8 0d       	add	r30, r8
    278a:	f1 1d       	adc	r31, r1
    278c:	80 81       	ld	r24, Z
    278e:	80 33       	cpi	r24, 0x30	; 48
    2790:	21 f4       	brne	.+8      	; 0x279a <vfprintf+0x308>
    2792:	9a 2d       	mov	r25, r10
    2794:	99 7e       	andi	r25, 0xE9	; 233
    2796:	a9 2e       	mov	r10, r25
    2798:	09 c0       	rjmp	.+18     	; 0x27ac <vfprintf+0x31a>
    279a:	a2 fe       	sbrs	r10, 2
    279c:	06 c0       	rjmp	.+12     	; 0x27aa <vfprintf+0x318>
    279e:	b3 94       	inc	r11
    27a0:	b3 94       	inc	r11
    27a2:	04 c0       	rjmp	.+8      	; 0x27ac <vfprintf+0x31a>
    27a4:	8a 2d       	mov	r24, r10
    27a6:	86 78       	andi	r24, 0x86	; 134
    27a8:	09 f0       	breq	.+2      	; 0x27ac <vfprintf+0x31a>
    27aa:	b3 94       	inc	r11
    27ac:	a3 fc       	sbrc	r10, 3
    27ae:	10 c0       	rjmp	.+32     	; 0x27d0 <vfprintf+0x33e>
    27b0:	a0 fe       	sbrs	r10, 0
    27b2:	06 c0       	rjmp	.+12     	; 0x27c0 <vfprintf+0x32e>
    27b4:	b2 14       	cp	r11, r2
    27b6:	80 f4       	brcc	.+32     	; 0x27d8 <vfprintf+0x346>
    27b8:	28 0c       	add	r2, r8
    27ba:	92 2c       	mov	r9, r2
    27bc:	9b 18       	sub	r9, r11
    27be:	0d c0       	rjmp	.+26     	; 0x27da <vfprintf+0x348>
    27c0:	b2 14       	cp	r11, r2
    27c2:	58 f4       	brcc	.+22     	; 0x27da <vfprintf+0x348>
    27c4:	b6 01       	movw	r22, r12
    27c6:	80 e2       	ldi	r24, 0x20	; 32
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	76 d0       	rcall	.+236    	; 0x28b8 <fputc>
    27cc:	b3 94       	inc	r11
    27ce:	f8 cf       	rjmp	.-16     	; 0x27c0 <vfprintf+0x32e>
    27d0:	b2 14       	cp	r11, r2
    27d2:	18 f4       	brcc	.+6      	; 0x27da <vfprintf+0x348>
    27d4:	2b 18       	sub	r2, r11
    27d6:	02 c0       	rjmp	.+4      	; 0x27dc <vfprintf+0x34a>
    27d8:	98 2c       	mov	r9, r8
    27da:	21 2c       	mov	r2, r1
    27dc:	a4 fe       	sbrs	r10, 4
    27de:	0f c0       	rjmp	.+30     	; 0x27fe <vfprintf+0x36c>
    27e0:	b6 01       	movw	r22, r12
    27e2:	80 e3       	ldi	r24, 0x30	; 48
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	68 d0       	rcall	.+208    	; 0x28b8 <fputc>
    27e8:	a2 fe       	sbrs	r10, 2
    27ea:	16 c0       	rjmp	.+44     	; 0x2818 <vfprintf+0x386>
    27ec:	a1 fc       	sbrc	r10, 1
    27ee:	03 c0       	rjmp	.+6      	; 0x27f6 <vfprintf+0x364>
    27f0:	88 e7       	ldi	r24, 0x78	; 120
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	02 c0       	rjmp	.+4      	; 0x27fa <vfprintf+0x368>
    27f6:	88 e5       	ldi	r24, 0x58	; 88
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	b6 01       	movw	r22, r12
    27fc:	0c c0       	rjmp	.+24     	; 0x2816 <vfprintf+0x384>
    27fe:	8a 2d       	mov	r24, r10
    2800:	86 78       	andi	r24, 0x86	; 134
    2802:	51 f0       	breq	.+20     	; 0x2818 <vfprintf+0x386>
    2804:	a1 fe       	sbrs	r10, 1
    2806:	02 c0       	rjmp	.+4      	; 0x280c <vfprintf+0x37a>
    2808:	8b e2       	ldi	r24, 0x2B	; 43
    280a:	01 c0       	rjmp	.+2      	; 0x280e <vfprintf+0x37c>
    280c:	80 e2       	ldi	r24, 0x20	; 32
    280e:	a7 fc       	sbrc	r10, 7
    2810:	8d e2       	ldi	r24, 0x2D	; 45
    2812:	b6 01       	movw	r22, r12
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	50 d0       	rcall	.+160    	; 0x28b8 <fputc>
    2818:	89 14       	cp	r8, r9
    281a:	30 f4       	brcc	.+12     	; 0x2828 <vfprintf+0x396>
    281c:	b6 01       	movw	r22, r12
    281e:	80 e3       	ldi	r24, 0x30	; 48
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	4a d0       	rcall	.+148    	; 0x28b8 <fputc>
    2824:	9a 94       	dec	r9
    2826:	f8 cf       	rjmp	.-16     	; 0x2818 <vfprintf+0x386>
    2828:	8a 94       	dec	r8
    282a:	f3 01       	movw	r30, r6
    282c:	e8 0d       	add	r30, r8
    282e:	f1 1d       	adc	r31, r1
    2830:	80 81       	ld	r24, Z
    2832:	b6 01       	movw	r22, r12
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	40 d0       	rcall	.+128    	; 0x28b8 <fputc>
    2838:	81 10       	cpse	r8, r1
    283a:	f6 cf       	rjmp	.-20     	; 0x2828 <vfprintf+0x396>
    283c:	22 20       	and	r2, r2
    283e:	09 f4       	brne	.+2      	; 0x2842 <vfprintf+0x3b0>
    2840:	4e ce       	rjmp	.-868    	; 0x24de <vfprintf+0x4c>
    2842:	b6 01       	movw	r22, r12
    2844:	80 e2       	ldi	r24, 0x20	; 32
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	37 d0       	rcall	.+110    	; 0x28b8 <fputc>
    284a:	2a 94       	dec	r2
    284c:	f7 cf       	rjmp	.-18     	; 0x283c <vfprintf+0x3aa>
    284e:	f6 01       	movw	r30, r12
    2850:	86 81       	ldd	r24, Z+6	; 0x06
    2852:	97 81       	ldd	r25, Z+7	; 0x07
    2854:	02 c0       	rjmp	.+4      	; 0x285a <vfprintf+0x3c8>
    2856:	8f ef       	ldi	r24, 0xFF	; 255
    2858:	9f ef       	ldi	r25, 0xFF	; 255
    285a:	2b 96       	adiw	r28, 0x0b	; 11
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	f8 94       	cli
    2860:	de bf       	out	0x3e, r29	; 62
    2862:	0f be       	out	0x3f, r0	; 63
    2864:	cd bf       	out	0x3d, r28	; 61
    2866:	df 91       	pop	r29
    2868:	cf 91       	pop	r28
    286a:	1f 91       	pop	r17
    286c:	0f 91       	pop	r16
    286e:	ff 90       	pop	r15
    2870:	ef 90       	pop	r14
    2872:	df 90       	pop	r13
    2874:	cf 90       	pop	r12
    2876:	bf 90       	pop	r11
    2878:	af 90       	pop	r10
    287a:	9f 90       	pop	r9
    287c:	8f 90       	pop	r8
    287e:	7f 90       	pop	r7
    2880:	6f 90       	pop	r6
    2882:	5f 90       	pop	r5
    2884:	4f 90       	pop	r4
    2886:	3f 90       	pop	r3
    2888:	2f 90       	pop	r2
    288a:	08 95       	ret

0000288c <strnlen_P>:
    288c:	fc 01       	movw	r30, r24
    288e:	05 90       	lpm	r0, Z+
    2890:	61 50       	subi	r22, 0x01	; 1
    2892:	70 40       	sbci	r23, 0x00	; 0
    2894:	01 10       	cpse	r0, r1
    2896:	d8 f7       	brcc	.-10     	; 0x288e <strnlen_P+0x2>
    2898:	80 95       	com	r24
    289a:	90 95       	com	r25
    289c:	8e 0f       	add	r24, r30
    289e:	9f 1f       	adc	r25, r31
    28a0:	08 95       	ret

000028a2 <strnlen>:
    28a2:	fc 01       	movw	r30, r24
    28a4:	61 50       	subi	r22, 0x01	; 1
    28a6:	70 40       	sbci	r23, 0x00	; 0
    28a8:	01 90       	ld	r0, Z+
    28aa:	01 10       	cpse	r0, r1
    28ac:	d8 f7       	brcc	.-10     	; 0x28a4 <strnlen+0x2>
    28ae:	80 95       	com	r24
    28b0:	90 95       	com	r25
    28b2:	8e 0f       	add	r24, r30
    28b4:	9f 1f       	adc	r25, r31
    28b6:	08 95       	ret

000028b8 <fputc>:
    28b8:	0f 93       	push	r16
    28ba:	1f 93       	push	r17
    28bc:	cf 93       	push	r28
    28be:	df 93       	push	r29
    28c0:	fb 01       	movw	r30, r22
    28c2:	23 81       	ldd	r18, Z+3	; 0x03
    28c4:	21 fd       	sbrc	r18, 1
    28c6:	03 c0       	rjmp	.+6      	; 0x28ce <fputc+0x16>
    28c8:	8f ef       	ldi	r24, 0xFF	; 255
    28ca:	9f ef       	ldi	r25, 0xFF	; 255
    28cc:	2c c0       	rjmp	.+88     	; 0x2926 <fputc+0x6e>
    28ce:	22 ff       	sbrs	r18, 2
    28d0:	16 c0       	rjmp	.+44     	; 0x28fe <fputc+0x46>
    28d2:	46 81       	ldd	r20, Z+6	; 0x06
    28d4:	57 81       	ldd	r21, Z+7	; 0x07
    28d6:	24 81       	ldd	r18, Z+4	; 0x04
    28d8:	35 81       	ldd	r19, Z+5	; 0x05
    28da:	42 17       	cp	r20, r18
    28dc:	53 07       	cpc	r21, r19
    28de:	44 f4       	brge	.+16     	; 0x28f0 <fputc+0x38>
    28e0:	a0 81       	ld	r26, Z
    28e2:	b1 81       	ldd	r27, Z+1	; 0x01
    28e4:	9d 01       	movw	r18, r26
    28e6:	2f 5f       	subi	r18, 0xFF	; 255
    28e8:	3f 4f       	sbci	r19, 0xFF	; 255
    28ea:	31 83       	std	Z+1, r19	; 0x01
    28ec:	20 83       	st	Z, r18
    28ee:	8c 93       	st	X, r24
    28f0:	26 81       	ldd	r18, Z+6	; 0x06
    28f2:	37 81       	ldd	r19, Z+7	; 0x07
    28f4:	2f 5f       	subi	r18, 0xFF	; 255
    28f6:	3f 4f       	sbci	r19, 0xFF	; 255
    28f8:	37 83       	std	Z+7, r19	; 0x07
    28fa:	26 83       	std	Z+6, r18	; 0x06
    28fc:	14 c0       	rjmp	.+40     	; 0x2926 <fputc+0x6e>
    28fe:	8b 01       	movw	r16, r22
    2900:	ec 01       	movw	r28, r24
    2902:	fb 01       	movw	r30, r22
    2904:	00 84       	ldd	r0, Z+8	; 0x08
    2906:	f1 85       	ldd	r31, Z+9	; 0x09
    2908:	e0 2d       	mov	r30, r0
    290a:	09 95       	icall
    290c:	89 2b       	or	r24, r25
    290e:	e1 f6       	brne	.-72     	; 0x28c8 <fputc+0x10>
    2910:	d8 01       	movw	r26, r16
    2912:	16 96       	adiw	r26, 0x06	; 6
    2914:	8d 91       	ld	r24, X+
    2916:	9c 91       	ld	r25, X
    2918:	17 97       	sbiw	r26, 0x07	; 7
    291a:	01 96       	adiw	r24, 0x01	; 1
    291c:	17 96       	adiw	r26, 0x07	; 7
    291e:	9c 93       	st	X, r25
    2920:	8e 93       	st	-X, r24
    2922:	16 97       	sbiw	r26, 0x06	; 6
    2924:	ce 01       	movw	r24, r28
    2926:	df 91       	pop	r29
    2928:	cf 91       	pop	r28
    292a:	1f 91       	pop	r17
    292c:	0f 91       	pop	r16
    292e:	08 95       	ret

00002930 <__ultoa_invert>:
    2930:	fa 01       	movw	r30, r20
    2932:	aa 27       	eor	r26, r26
    2934:	28 30       	cpi	r18, 0x08	; 8
    2936:	51 f1       	breq	.+84     	; 0x298c <__ultoa_invert+0x5c>
    2938:	20 31       	cpi	r18, 0x10	; 16
    293a:	81 f1       	breq	.+96     	; 0x299c <__ultoa_invert+0x6c>
    293c:	e8 94       	clt
    293e:	6f 93       	push	r22
    2940:	6e 7f       	andi	r22, 0xFE	; 254
    2942:	6e 5f       	subi	r22, 0xFE	; 254
    2944:	7f 4f       	sbci	r23, 0xFF	; 255
    2946:	8f 4f       	sbci	r24, 0xFF	; 255
    2948:	9f 4f       	sbci	r25, 0xFF	; 255
    294a:	af 4f       	sbci	r26, 0xFF	; 255
    294c:	b1 e0       	ldi	r27, 0x01	; 1
    294e:	3e d0       	rcall	.+124    	; 0x29cc <__ultoa_invert+0x9c>
    2950:	b4 e0       	ldi	r27, 0x04	; 4
    2952:	3c d0       	rcall	.+120    	; 0x29cc <__ultoa_invert+0x9c>
    2954:	67 0f       	add	r22, r23
    2956:	78 1f       	adc	r23, r24
    2958:	89 1f       	adc	r24, r25
    295a:	9a 1f       	adc	r25, r26
    295c:	a1 1d       	adc	r26, r1
    295e:	68 0f       	add	r22, r24
    2960:	79 1f       	adc	r23, r25
    2962:	8a 1f       	adc	r24, r26
    2964:	91 1d       	adc	r25, r1
    2966:	a1 1d       	adc	r26, r1
    2968:	6a 0f       	add	r22, r26
    296a:	71 1d       	adc	r23, r1
    296c:	81 1d       	adc	r24, r1
    296e:	91 1d       	adc	r25, r1
    2970:	a1 1d       	adc	r26, r1
    2972:	20 d0       	rcall	.+64     	; 0x29b4 <__ultoa_invert+0x84>
    2974:	09 f4       	brne	.+2      	; 0x2978 <__ultoa_invert+0x48>
    2976:	68 94       	set
    2978:	3f 91       	pop	r19
    297a:	2a e0       	ldi	r18, 0x0A	; 10
    297c:	26 9f       	mul	r18, r22
    297e:	11 24       	eor	r1, r1
    2980:	30 19       	sub	r19, r0
    2982:	30 5d       	subi	r19, 0xD0	; 208
    2984:	31 93       	st	Z+, r19
    2986:	de f6       	brtc	.-74     	; 0x293e <__ultoa_invert+0xe>
    2988:	cf 01       	movw	r24, r30
    298a:	08 95       	ret
    298c:	46 2f       	mov	r20, r22
    298e:	47 70       	andi	r20, 0x07	; 7
    2990:	40 5d       	subi	r20, 0xD0	; 208
    2992:	41 93       	st	Z+, r20
    2994:	b3 e0       	ldi	r27, 0x03	; 3
    2996:	0f d0       	rcall	.+30     	; 0x29b6 <__ultoa_invert+0x86>
    2998:	c9 f7       	brne	.-14     	; 0x298c <__ultoa_invert+0x5c>
    299a:	f6 cf       	rjmp	.-20     	; 0x2988 <__ultoa_invert+0x58>
    299c:	46 2f       	mov	r20, r22
    299e:	4f 70       	andi	r20, 0x0F	; 15
    29a0:	40 5d       	subi	r20, 0xD0	; 208
    29a2:	4a 33       	cpi	r20, 0x3A	; 58
    29a4:	18 f0       	brcs	.+6      	; 0x29ac <__ultoa_invert+0x7c>
    29a6:	49 5d       	subi	r20, 0xD9	; 217
    29a8:	31 fd       	sbrc	r19, 1
    29aa:	40 52       	subi	r20, 0x20	; 32
    29ac:	41 93       	st	Z+, r20
    29ae:	02 d0       	rcall	.+4      	; 0x29b4 <__ultoa_invert+0x84>
    29b0:	a9 f7       	brne	.-22     	; 0x299c <__ultoa_invert+0x6c>
    29b2:	ea cf       	rjmp	.-44     	; 0x2988 <__ultoa_invert+0x58>
    29b4:	b4 e0       	ldi	r27, 0x04	; 4
    29b6:	a6 95       	lsr	r26
    29b8:	97 95       	ror	r25
    29ba:	87 95       	ror	r24
    29bc:	77 95       	ror	r23
    29be:	67 95       	ror	r22
    29c0:	ba 95       	dec	r27
    29c2:	c9 f7       	brne	.-14     	; 0x29b6 <__ultoa_invert+0x86>
    29c4:	00 97       	sbiw	r24, 0x00	; 0
    29c6:	61 05       	cpc	r22, r1
    29c8:	71 05       	cpc	r23, r1
    29ca:	08 95       	ret
    29cc:	9b 01       	movw	r18, r22
    29ce:	ac 01       	movw	r20, r24
    29d0:	0a 2e       	mov	r0, r26
    29d2:	06 94       	lsr	r0
    29d4:	57 95       	ror	r21
    29d6:	47 95       	ror	r20
    29d8:	37 95       	ror	r19
    29da:	27 95       	ror	r18
    29dc:	ba 95       	dec	r27
    29de:	c9 f7       	brne	.-14     	; 0x29d2 <__ultoa_invert+0xa2>
    29e0:	62 0f       	add	r22, r18
    29e2:	73 1f       	adc	r23, r19
    29e4:	84 1f       	adc	r24, r20
    29e6:	95 1f       	adc	r25, r21
    29e8:	a0 1d       	adc	r26, r0
    29ea:	08 95       	ret

000029ec <_exit>:
    29ec:	f8 94       	cli

000029ee <__stop_program>:
    29ee:	ff cf       	rjmp	.-2      	; 0x29ee <__stop_program>
